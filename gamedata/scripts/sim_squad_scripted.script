-- function printf()
-- end

local math_random = math.random

local function get_string_field(ini, section, field, default)
	if ini:line_exist(section, field) then
		return ini:r_string(section, field) or default -- string if field has a value, else default
	end
	return default
end

class "sim_squad_scripted" (sim_squad_generic.sim_squad_generic)

function sim_squad_scripted:__init(sim_board, player_id, squad_id, settings_id) super (sim_board, player_id, squad_id)

	local squad_ltx        = _G.sim_board.squad_ltx
	local settings_id      = settings_id or squad_id
	local parse_condlist   = xr_logic.parse_condlist

	if not squad_ltx:section_exist(settings_id) then
		abort("[sim_squad_scripted:__init]: Squad section '%s' does not exist in misc\\squad_descr.ltx or any of its includes.", settings_id)
	end

	self.name              = "sim_squad_scripted"
	self.settings_id       = settings_id
	self.action_condlist   = parse_condlist(nil, nil, nil, get_string_field(squad_ltx, settings_id, "target_smart", ""))
	self.death_condlist    = parse_condlist(nil, nil, nil, get_string_field(squad_ltx, settings_id, "on_death", ""))
	self.attack_power      = parse_condlist(nil, nil, nil, get_string_field(squad_ltx, settings_id, "attack_power", ""))
--	self.invulnerability   = parse_condlist(nil, nil, nil, get_string_field(squad_ltx, settings_id, "invulnerability", "")) -- see comments in check_invulnerability() below
	self.show_spot         = parse_condlist(nil, nil, nil, get_string_field(squad_ltx, settings_id, "show_spot", "true"))
	self.relationship      = get_string_field(squad_ltx, settings_id, "relationship", nil)
	self.sympathy          = squad_ltx:line_exist(settings_id, "sympathy") and squad_ltx:r_float(settings_id, "sympathy") or nil
	self.always_walk       = false -- utils.cfg_get_bool(squad_ltx, settings_id, "always_walk", self, false) -- unused in vanilla, defaults to false

	if not xr_surge_hide.surge_activated then
		self.show_disabled = xr_logic.pick_section_from_condlist(db.actor, self, self.show_spot) == "false"
	end
end

-- function sim_squad_scripted:init_squad() -- smart)
--	sim_squad_generic.sim_squad_generic.init_squad(self, smart)
-- end

function sim_squad_scripted:create_npc(spawn_smart)

	self.squad_power = 0

	local squad_ltx = sim_board.squad_ltx
	local settings_id = self.settings_id
	local spawn_point = get_string_field(squad_ltx, settings_id, "spawn_point", nil) -- in vanilla, default was ""
	local base_spawn_position, base_lvi, base_gvi

	if spawn_point ~= nil then -- this test always passed in vanilla because spawn_point defaulted to ""; it now defaults to nil as seemingly intended
		base_spawn_position = patrol(spawn_point):point(0)
		base_lvi = patrol(spawn_point):level_vertex_id(0)
		base_gvi = patrol(spawn_point):game_vertex_id(0)
	else
		spawn_point = spawn_smart.spawn_point
		if spawn_point ~= nil then
			base_spawn_position = patrol(spawn_point):point(0)
			base_lvi = patrol(spawn_point):level_vertex_id(0)
			base_gvi = patrol(spawn_point):game_vertex_id(0)
		else
			base_spawn_position = spawn_smart.position
			base_lvi = spawn_smart.m_level_vertex_id
			base_gvi = spawn_smart.m_game_vertex_id
		end
	end

	local spawn_sections_str = get_string_field(squad_ltx, settings_id, "npc", nil)
	if not spawn_sections_str then
		abort("[sim_squad_scripted:create_npc]: Field 'npc' is missing or without a supplied value in section '%s' in misc\\squad_descr.ltx or one of its includes.", settings_id)
	end

	local spawn_sections = utils.parse_names(spawn_sections_str)
	local ltx = system_ini()
	local sim = _G.sim

	for k, npc_section in pairs (spawn_sections) do

		if ltx:section_exist(npc_section) and ltx:line_exist(npc_section, "custom_data") then
			local custom_data = ltx:r_string(npc_section, "custom_data") or "stalker_custom_data.ltx"
			if custom_data ~= "stalker_custom_data.ltx" then
				abort("[sim_squad_scripted:create_npc]: Invalid NPC spawn section: '%s'. You cannot use NPCs with custom_data in squads.", tostring(npc_section))
			end
		end

		local position = base_spawn_position
		position.x = position.x + math_random(-2, 2)
		position.z = position.z + math_random(-2, 2)

		local obj = sim:create(npc_section, position, base_lvi, base_gvi)
		local obj_id = obj.id

		obj.squad_id = self.squad_id
		self.squad_npc[obj_id] = obj_id
		self.sound_manager:register_npc(obj_id)

		if self.commander_id == nil then
			self.commander_id = obj_id
		end

		self.npc_count = self.npc_count + 1
		self.squad_power = self.squad_power + 5 * obj:rank() / 1000
	end

--	self.smart_id = spawn_smart.id -- done in sim_board:assign_squad_to_smart() after this func called

--	self:refresh() -- done after sim_board:create_squad() after this func called
end

function sim_squad_scripted:get_script_target()

	local new_target = xr_logic.pick_section_from_condlist(db.actor, self, self.action_condlist)

	if new_target == nil then
		return nil
	end

	if new_target ~= self.last_target then

		self.last_target = new_target
		self.parsed_targets = utils.parse_names(new_target)

		if self.need_free_update ~= true then
			self.next_target = 1
		else
			self.need_free_update = false
		end
	end

	if self.parsed_targets[self.next_target] == nil then
		self.next_target = 1
	end

	local nt = self.parsed_targets[self.next_target]

	if nt == "nil" then
		return nil
	elseif nt == "loop" then
		self.next_target = 1
		nt = self.parsed_targets[1]
	end

	local point = self.board.smarts_by_names[nt]

	if point == nil then
		abort("[sim_squad_scripted:get_script_target]: Invalid next point '%s' for squad with ID '%s'.", tostring(nt), tostring(self.squad_id))
	end

	return point.id
end

-- function sim_squad_scripted:pick_next_target()
--	return self.parsed_targets[self.next_target]
-- end

function sim_squad_scripted:calculate_attack_power()

	local attack_power = xr_logic.pick_section_from_condlist(db.actor, self, self.attack_power)

	if attack_power == nil then
		sim_squad_generic.sim_squad_generic.calculate_attack_power(self)
		return
	end

	self.squad_attack_power = tonumber(attack_power)
end

function sim_squad_scripted:check_squad_come_to_point()

--	if self.parsed_targets == nil then -- impossible
--		return true
--	end

	if self.assigned_target_smart_id ~= nil and self.smart_id == self.assigned_target_smart_id then
		local next_target = self.next_target or 0
		if self.parsed_targets[next_target + 1] ~= nil then
			self.next_target = next_target + 1
			return true
		end
	end

	return false
end
--[[
function sim_squad_scripted:update_current_action()
	return self.current_action:is_finished()
end

function sim_squad_scripted:check_invulnerability()

	if self.squad_online ~= true then
		return
	end

	local invulnerability = xr_logic.pick_section_from_condlist(db.actor, self, self.invulnerability) == "true"
	local st = db.storage

	for npc_id in pairs (self.squad_npc) do
		local npc = st[npc_id]
		npc = npc and npc.object
		if npc ~= nil then
			if npc:invulnerable() ~= invulnerability then -- typo: was "invulnerabilty", which has value nil, so test would always pass since npc:invulnerable() returns boolean
				if utils.cfg_get_bool(npc_st.ini, npc_st.active_section, "invulnerable", npc, false, nil) == nil then -- cfg_get_bool() never returns nil, so this test would always fail in vanilla
					npc:invulnerable(invulnerability)
				end
			end
		end
	end
end
]]
function sim_squad_scripted:update()

--	self:check_invulnerability() -- broken in vanilla, but stalker_generic.reset_invulnerability() achieves the intended effect on every section switch anyway, for *all* NPCs

	if not xr_surge_hide.surge_activated then
		self.show_disabled = xr_logic.pick_section_from_condlist(db.actor, self, self.show_spot) == "false"
	end

	local script_target = self:get_script_target()

	if script_target == nil then
		sim_squad_generic.sim_squad_generic.update(self)
		return
	end

	self.sound_manager:update()

	self:calculate_attack_power()

	local need_to_find_new_action = false

	if self.assigned_target_smart_id == script_target then
		if self.current_action ~= nil then
			if self.current_action.name == "stay_point" then
				if self:check_squad_come_to_point() then
					need_to_find_new_action = true
				else
					need_to_find_new_action = self.current_action:is_finished()
				end
			else
				if self.current_action:is_finished() then
					self:check_squad_come_to_point()
					need_to_find_new_action = true
				end
			end
		else
			self:check_squad_come_to_point()
			need_to_find_new_action = true
		end
	else
		if self.current_action == nil then
			self.board.players[self.player_id].squad_target_cache[self.squad_id] = script_target
			need_to_find_new_action = true
		else
			if self.current_action.major == true then
				if self.current_action:is_finished() then
					self:check_squad_come_to_point()
					need_to_find_new_action = true
				end
			else
				self.board.players[self.player_id].squad_target_cache[self.squad_id] = script_target
				need_to_find_new_action = true
				if self.sim_combat_id ~= nil then
					self.board.smarts[self.sim_combat_id].smrt.combat_manager:unregister_squad(self)
				end
			end
		end
	end

	if need_to_find_new_action == true then
		self:find_target()
		if self.current_action ~= nil then
			self.current_action:finalize()
			self.current_action = nil
		end
		self:get_next_action() -- calls self.current_action:make() calls self:refresh()
	else
		self:refresh()
	end

	if not self.items_spawned and self.smart_id ~= nil then
		self:spawn_box_items(self.smart_id)
	end
end

function sim_squad_scripted:save(packet)

	sim_squad_generic.sim_squad_generic.save(self, packet)

	set_save_marker(packet, "save", false, "sim_squad_scripted")

	if self.next_target == nil then
		packet:w_u8(-1)
		packet:w_bool(false)
	else
		packet:w_u8(self.next_target)
		packet:w_bool(true)
	end

	if self.relationship == "friend" then
		packet:w_u8(1)
	elseif self.relationship == "enemy" then
		packet:w_u8(2)
	elseif self.relationship == "neutral" then
		packet:w_u8(3)
	else
		packet:w_u8(0)
	end

	if self.sympathy == nil then
		packet:w_u8(-1)
	else
		packet:w_u8(self.sympathy)
	end

	set_save_marker(packet, "save", true, "sim_squad_scripted")
end

function sim_squad_scripted:load(packet)

	sim_squad_generic.sim_squad_generic.load(self, packet)

	set_save_marker(packet, "load", false, "sim_squad_scripted")
--[[
	local smart_id = self.smart_id
	local smart_info = smart_id and self.board.smarts[smart_id]
	self:init_squad(smart_info and smart_info.smrt)
]]
	self.next_target = packet:r_u8()
	if self.next_target == 255 then
		self.next_target = nil
	end

	self.need_free_update = packet:r_bool()

	local s = packet:r_u8()
	if s == 0 then
		self.relationship = nil
	elseif s == 1 then
		self.relationship = "friend"
		game_relations.set_squad_goodwill(self, "friend")
	elseif s == 2 then
		self.relationship = "enemy"
		game_relations.set_squad_goodwill(self, "enemy")
	elseif s == 3 then
		self.relationship = "neutral"
		game_relations.set_squad_goodwill(self, "neutral")
	end

	local n = packet:r_u8()
	if n ~= 255 then
		self.sympathy = n
		game_relations.set_squad_sympathy(self, n)
	end

	set_save_marker(packet, "load", true, "sim_squad_scripted")
end