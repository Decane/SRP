-- nv170324, nv170508: Fixed the use_object callback for doors and buttons being reset on scheme switch.
-- DC170518, DC180328: Optimization.

local sim = _G.sim
local empty_table = {}

local function get_string(ini, section, field, default)
	if section and ini:section_exist(section) and ini:line_exist(section, field) then
		return ini:r_string(section, field) or default -- string if field has a value, else default
	end
	return default
end

local function get_string_field(ini, section, field, default)
	if ini:line_exist(section, field) then
		return ini:r_string(section, field) or default -- ditto
	end
	return default
end

local string_find      = string.find
local string_gfind     = string.gfind
local string_sub       = string.sub
local string_gsub      = string.gsub
local string_len       = string.len
local string_match     = string.match

local stype_stalker    = 0 -- modules.stype_stalker
local stype_mobile     = 1 -- modules.stype_mobile
local stype_item       = 2 -- modules.stype_item
local stype_heli       = 3 -- modules.stype_heli
local stype_trader     = 5 -- modules.stype_trader

local function disable_generic_schemes(npc, stype)

	if stype == stype_stalker then

		xr_combat.disable_scheme(npc, "combat")
		xr_hit.disable_scheme(npc, "hit")
		xr_combat_ignore.disable_scheme(npc, "combat_ignore")
		npc:invulnerable(false) -- stalker_generic.disable_invulnerability(npc)

	elseif stype == stype_mobile then

		mob_combat.disable_scheme(npc, "mob_combat")
		xr_combat_ignore.disable_scheme(npc, "combat_ignore")
		npc:invulnerable(false) -- stalker_generic.disable_invulnerability(npc)

	elseif stype == stype_item then

		ph_on_hit.disable_scheme(npc, "ph_on_hit")

	elseif stype == stype_heli then

		xr_hit.disable_scheme(npc, "hit")
	end
end

local function enable_generic_schemes(ini, npc, stype, section)

	if not section or not ini:section_exist(section) then

		if stype == stype_stalker then

			xr_danger.set_danger(npc, ini, "danger", "danger")
			xr_combat.set_combat_checker(npc, ini, "combat", nil)
			stalker_generic.reset_invulnerability(npc, ini, section)
			xr_wounded.set_wounded(npc, ini, "wounded", nil)
			xr_abuse.set_abuse(npc, ini, "abuse", section)
			xr_meet.set_meet(npc, ini, "meet", nil)
			xr_death.set_death(npc, ini, "death", nil)
			xr_combat_ignore.set_combat_ignore_checker(npc, ini, "combat_ignore")

		elseif stype == stype_mobile then

			mob_death.set_scheme(npc, ini, "mob_death", nil)
			stalker_generic.reset_invulnerability(npc, ini, section)
			xr_combat_ignore.set_combat_ignore_checker(npc, ini, "combat_ignore")
		end
	else
		if stype == stype_stalker then

			xr_danger.set_danger(npc, ini, "danger", "danger")
			xr_combat.set_combat_checker(npc, ini, "combat", get_string_field(ini, section, "on_combat"))
			stalker_generic.reset_invulnerability(npc, ini, section)
			local section_string = get_string_field(ini, section, "on_hit")
			if section_string then
				xr_hit.set_hit_checker(npc, ini, "hit", section_string)
			end
			xr_wounded.set_wounded(npc, ini, "wounded", get_string_field(ini, section, "wounded"))
			xr_abuse.set_abuse(npc, ini, "abuse", section)
			xr_meet.set_meet(npc, ini, "meet", get_string_field(ini, section, "meet"))
			xr_death.set_death(npc, ini, "death", get_string_field(ini, section, "on_death"))
			xr_combat_ignore.set_combat_ignore_checker(npc, ini, "combat_ignore")

		elseif stype == stype_mobile then

			local section_string = get_string_field(ini, section, "on_combat")
			if section_string then
				mob_combat.set_scheme(npc, ini, "mob_combat", section_string)
			end
			mob_death.set_scheme(npc, ini, "mob_death", get_string_field(ini, section, "on_death"))
			stalker_generic.reset_invulnerability(npc, ini, section)
			section_string = get_string_field(ini, section, "on_hit")
			if section_string then
				xr_hit.set_hit_checker(npc, ini, "hit", section_string)
			end
			xr_combat_ignore.set_combat_ignore_checker(npc, ini, "combat_ignore")

		elseif stype == stype_item then

			local hit_section = get_string_field(ini, section, "on_hit")
			if hit_section then
				ph_on_hit.set_scheme(npc, ini, "ph_on_hit", hit_section)
			end

		elseif stype == stype_heli then

			local hit_section = get_string_field(ini, section, "on_hit")
			if hit_section then
				xr_hit.set_hit_checker(npc, ini, "hit", hit_section)
			end
		end
	end
end

function issue_event(npc, st, event_func, ...) -- TODO: 'npc' not used

	if not st or not st.actions then
		return
	end

--	local activation_count = 0
--	local action, is_active = 0, 0

	for action in pairs (st.actions) do
		if action[event_func] then
			action[event_func](action, ...)
--			activation_count = activation_count + 1
		end
	end
end

local issue_event = issue_event

function configure_schemes(npc, ini, ini_filename, stype, section_logic, gulag_name) -- section_logic is a logic section name, e.g. 'logic' or 'logic@work1'

	local npc_id = npc:id()
	local npc_st = db.storage[npc_id]

	if npc_st.active_section then
		issue_event(nil, npc_st[npc_st.active_scheme], "deactivate", npc)
	end

	local actual_ini_filename = ini_filename
	local actual_ini = ini

	if ini:section_exist(section_logic) then
		local filename = get_string_field(ini, section_logic, "cfg", nil)
		if filename then
			actual_ini_filename = filename
			actual_ini = ini_file(filename)
			if not actual_ini:section_exist(section_logic) then
				abort("[xr_logic.configure_schemes]: Configuration file '%s' was not found or section [logic] is not defined therein for NPC '%s'.", tostring(filename), npc:name())
			end
			return configure_schemes(npc, actual_ini, actual_ini_filename, stype, section_logic, gulag_name)
		else
			if stype == stype_stalker or stype == stype_mobile then
				local current_smart = xr_gulag.get_npc_smart(npc)
				if current_smart ~= nil then
					local t = current_smart:getJob(npc_id)
					npc_st.job_ini = t and t.ini_path or nil
				end
			end
		end
	else
		if gulag_name ~= "" then
			abort("[xr_logic.configure_schemes]: Cannot find section '%s' in '%s' for NPC '%s'.", tostring(section_logic), tostring(ini_filename), npc:name())
		end
	end

	disable_generic_schemes(npc, stype)
	enable_generic_schemes(actual_ini, npc, stype, section_logic)

	if stype == stype_stalker or stype == stype_trader then -- npc:clsid() == clsid.script_trader
		local trade_ini = get_string(actual_ini, section_logic, "trade", "misc\\trade_generic.ltx")
		trade_manager.trade_init(npc, trade_ini)
	end

	npc_st.active_section = nil
	npc_st.active_scheme = nil
	npc_st.gulag_name = gulag_name

	npc_st.stype = stype
	npc_st.ini = actual_ini
	npc_st.ini_filename = actual_ini_filename
	npc_st.section_logic = section_logic

	return actual_ini -- npc_st.ini
end

function mob_release(mob)
	if mob:get_script() then
		mob:script(false, script_name())
	end
end

local mob_release = mob_release

local function reset_generic_schemes_on_scheme_switch(npc, scheme, section, npc_st)

--	local npc_st = db.storage[npc:id()]

	npc_st.exit_from_smartcover_initialized = nil

	local stype = npc_st.stype

	if not stype then
		return
	end

	if stype == stype_stalker then

		-- xr_reactions.reset_reactions(npc, scheme, npc_st, section)
		xr_meet.dialog_manager_reset(npc, stype)
		xr_meet.reset_meet(npc, scheme, npc_st, section)
		xr_abuse.reset_abuse(npc, scheme, npc_st, section)
		xr_wounded.reset_wounded(npc, scheme, npc_st, section)
		xr_death.reset_death(npc, npc_st)
		xr_danger.reset_danger(npc, scheme, npc_st, section)
		xr_combat_ignore.reset_combat_ignore_checker(npc, scheme, npc_st) --, section)
		stalker_generic.reset_threshold(npc, scheme, npc_st, section)
		stalker_generic.reset_show_spot(npc, scheme, npc_st, section)
		-- stalker_generic.set_level_spot(npc, scheme, npc_st, section)
		local st_ini = npc_st.ini
		stalker_generic.reset_invulnerability(npc, st_ini, section)
		stalker_generic.reset_group(npc, st_ini, section)
		stalker_generic.take_items_enabled(npc, scheme, npc_st, section)
		restrictor_manager.get_restrictor_manager(npc):reset_restrictions(npc_st, section)

	elseif stype == stype_mobile then

		xr_meet.dialog_manager_reset(npc, stype)
		mob_release(npc)
		if get_clsid(npc) == clsid.bloodsucker_s then
			npc:set_manual_invisibility(scheme ~= "nil")
		end
		xr_combat_ignore.reset_combat_ignore_checker(npc, scheme, npc_st) --, section)
		mob_panic.reset_panic(npc, scheme, npc_st, section)
		stalker_generic.reset_invulnerability(npc, npc_st.ini, section)
		restrictor_manager.get_restrictor_manager(npc):reset_restrictions(npc_st, section)

	elseif stype == stype_trader then

		stalker_generic.reset_show_spot(npc, scheme, npc_st, section)

	elseif stype == stype_item then

		-- nv170324, nv170508:
		if npc_st.ph_door == nil and npc_st.ph_button == nil then
			npc:set_callback(callback.use_object, nil)
		end
		npc:set_nonscript_usable(true)
		if get_clsid(npc) == clsid.car then
			npc:destroy_car()
			mob_release(npc)
		end
	end
end

local function parse_func_params(infop_name)
	-- Arg #3 to functions in xr_conditions and xr_effects should always be a table value
	-- so it doesn't need to be nil-checked before being indexed. As it's inefficient to
	-- create a new empty table each time a condition/effect func has no args passed to
	-- it, let's just keep re-using one always-empty table in such cases:
	local params = empty_table
	local at = string_find(infop_name, "(", 1, true)
	if at then
		if string_sub(infop_name, -1) ~= ")" then
			abort("[xr_logic.parse_func_params]: Invalid condlist: Terminating character of '%s' is not a closing parenthesis.", infop_name)
		end
		if at < string_len(infop_name) - 1 then
			params = {}
			local c = 0
			-- The vanilla pattern is '%s*([^:]+)%s*'. The SRP variant omits the trailing
			-- '%s*' since it would never have anything left to match after the greedy
			-- whitespace matching of '[^:]+'. Neither the vanilla pattern nor the SRP
			-- variant can cope with trailing whitespace in the params. E.g.:
			-- ( foo : bar ) -> {'foo ', 'bar '}
			for par in string_gfind(string_sub(infop_name, at + 1, -2), "%s*([^:]+)") do
				c = c + 1
				params[c] = tonumber(par) or par
			end
--		else
--			params = {}
		end
		infop_name = string_sub(infop_name, 1, at - 1)
	end
	return infop_name, params
end

local function parse_infop(rslt, str)
	local infop_n = 1
	for s in string_gfind(str, "([-+~=!][^-+~=!%s]+)") do
		local sign = string_sub(s, 1, 1)
		local infop_name = string_sub(s, 2)
		if sign == "+" then
			rslt[infop_n] = { name = infop_name, required = true }
		elseif sign == "-" then
			rslt[infop_n] = { name = infop_name, required = false }
		elseif sign == "~" then
			rslt[infop_n] = { prob = tonumber(infop_name) }
		elseif sign == "=" then
			local func_name, params = parse_func_params(infop_name)
			rslt[infop_n] = { func = func_name, expected = true, params = params }
		elseif sign == "!" then
			local func_name, params = parse_func_params(infop_name)
			rslt[infop_n] = { func = func_name, expected = false, params = params }
		else
			-- Never reached; see regex capture in loop initialization.
			abort("[xr_logic.parse_infop]: Invalid condlist '%s': First character of '%s' is not '+', '-', '~', '=', or '!'.", str, s)
		end
		infop_n = infop_n + 1
	end
end

function parse_condlist(npc, section, field, src) -- TODO: only 'src' is used

	local lst = {}
	local n = 1

	-- The vanilla pattern is '%s*([^,]+)%s*'. See the note in parse_func_params() about
	-- why neither that nor the SRP variant can cope with trailing whitespace in the
	-- comma-separated {conditions}-section-%effects% lists. (Here, it doesn't need to.)

	for fld in string_gfind(src, "%s*([^,]+)") do

		local chk_tbl = {}
		local at, to, infop_check_lst = string_find(fld, "{%s*(.*)}") -- vanilla: '{%s*(.*)%s*}'

		if infop_check_lst then
			fld = string_sub(fld, 1, at - 1) .. string_sub(fld, to + 1)
			parse_infop(chk_tbl, infop_check_lst)
		end

		local set_tbl = {}
		local at, to, infop_set_lst = string_find(fld, "%%%s*(.*)%%") -- vanilla: '%%%s*(.*)%s*%%'

		if infop_set_lst then
			fld = string_sub(fld, 1, at - 1) .. string_sub(fld, to + 1)
			parse_infop(set_tbl, infop_set_lst)
		end
--[[
		local at, to, newsect = string_find(fld, "%s*(.*)%s*")

		-- '%s*(.*)%s*' always captures the empty string at a minimum, which does not
		-- evaluate to false in a boolean context. Hence, abort_syntax_error_in_cond()
		-- would never be reached; the matching needs to be against e.g. '%s*(%S+)' to be
		-- of any use, but then section-less condlists would crash the game. And those are
		-- used extensively as values to comat_ignore_cond in vanilla.

		if not newsect then
			abort_syntax_error_in_cond(npc, section, field)
		end
]]
		local newsect = string_match(fld, "%s*(%S*)")

		lst[n] =
		{
			section     = newsect,
			infop_check = chk_tbl,
			infop_set   = set_tbl
		}

		n = n + 1
	end

	return lst
end

local parse_condlist = parse_condlist

local function cfg_get_overrides(ini, section, npc_st)

	local l = {}

--	if section and ini:section_exist(section) then -- already verified in activate_by_section()
		local tmp							= get_string_field(ini, section, "heli_hunter", nil)
		if tmp then
			l.heli_hunter					= parse_condlist(nil, nil, nil, tmp) -- (npc, section, "heli_hunter", tmp)
		end
		l.combat_ignore_keep_when_attacked	= ini:line_exist(section, "combat_ignore_keep_when_attacked") and ini:r_bool(section, "combat_ignore_keep_when_attacked") or false
		tmp									= get_string_field(ini, section, "combat_ignore_cond", nil)
		if tmp then
			l.combat_ignore					= {name = "combat_ignore_cond", condlist = parse_condlist(nil, nil, nil, tmp)}
		end
		tmp									= get_string_field(ini, section, "combat_type", nil)
		if tmp then
			l.combat_type					= {name = "combat_type", condlist = parse_condlist(nil, nil, nil, tmp)}
		end
		tmp									= get_string_field(ini, section, "on_combat", nil)
		if tmp then
			l.on_combat						= {name = "on_combat", condlist = parse_condlist(nil, nil, nil, tmp)}
		end
		if string_find(section, "kamp", 1, true) ~= nil then
			l.soundgroup					= get_string_field(ini, section, "center_point", nil)
		else
			l.soundgroup					= get_string_field(ini, section, "soundgroup", nil)
		end
--	end

	if ini:line_exist(npc_st.section_logic, "post_combat_time") then
		l.min_post_combat_time, l.max_post_combat_time = utils.r_2nums(ini, npc_st.section_logic, "post_combat_time", 10, 15)
	else
		l.min_post_combat_time, l.max_post_combat_time = utils.r_2nums(ini, section, "post_combat_time", 10, 15)
	end

	return l
end

function activate_by_section(npc, ini, section, loading)
--[[
	-- Nothing in vanilla specifically requires a boolean 'loading' value:
	if loading == nil then
		abort("[xr_logic.activate_by_section]: 'loading' field is nil, true or false expected.")
	end
]]
	local npc_st = db.storage[npc:id()]

	if not loading then
		npc_st.activation_time = time_global()
		npc_st.activation_game_time = game.get_game_time()
	end

	if section == "nil" then
		npc_st.overrides = nil
		reset_generic_schemes_on_scheme_switch(npc, "nil", "nil", npc_st)
		npc_st.active_section = nil
		npc_st.active_scheme = nil
--'		npc_st.pstor = nil
		return
	end
--[[
	if section == nil then -- not possible in vanilla
		local current_gulag = xr_gulag.get_npc_smart(npc)
		if current_gulag == nil then
			abort("[xr_logic.activate_by_section]: Section is NIL and NPC is not in a gulag.")
		end
		local t = current_gulag:getJob(npc:id())
		section = t.section
	end
]]
	if not ini:section_exist(section) then
		abort("[xr_logic.activate_by_section]: Section '%s' does not exist for NPC '%s'.", tostring(section), npc:name())
	end

	local scheme = string_gsub(section, "[%d@].*", "") -- utils.get_scheme_by_section(section)
	local filename = schemes[scheme]
--[[
	if scheme == "" then -- vanilla test is against nil, but scheme is always a string
		abort("[xr_logic.activate_by_section]: Unable to determine scheme name from section name '%s' for NPC '%s'.", tostring(section), npc:name())
	end
]]
	if filename == nil then
		abort("[xr_logic.activate_by_section]: Scheme '%s' is not registered in modules.script.", scheme)
	end

	npc_st.overrides = cfg_get_overrides(ini, section, npc_st)

	reset_generic_schemes_on_scheme_switch(npc, scheme, section, npc_st)
--[[
	-- nv130308 validation is now done (once) when scheme registered in _g.load_scheme()
	if not _G[filename] then
		abort("xr_logic: can't call %s.set_scheme() - a nil value", filename)
	end
	_G[filename].set_scheme(npc, ini, scheme, section, gulag_name)
]]
	-- if your scheme is nil, it might need to be added to modules.script
	_G[filename].set_scheme(npc, ini, scheme, section, npc_st["gulag_name"]) -- NatVac edit

	npc_st.active_section = section
	npc_st.active_scheme = scheme

	if npc_st.stype == stype_stalker then
		utils.send_to_nearest_accessible_vertex(npc, npc:level_vertex_id())
		issue_event(nil, npc_st[scheme], "activate_scheme", loading, npc)
	else
		issue_event(nil, npc_st[scheme], "reset_scheme", loading, npc)
	end
end

function assign_storage_and_bind(npc, ini, scheme, section)

	local npc_st = db.storage[npc:id()]
	local st = npc_st[scheme]

	if not st then
		st = {}
		npc_st[scheme] = st
		st["npc"] = npc
		_G[schemes[scheme]].add_to_binder(npc, ini, scheme, section, st)
	end

	st["scheme"] = scheme
	st["section"] = section
	st["ini"] = ini

	return st
end

function subscribe_action_for_events(npc, storage, new_action) -- TODO: 'npc' not used
	if not storage.actions then
		storage.actions = {}
	end
	storage.actions[new_action] = true
end

function unsubscribe_action_from_events(npc, storage, old_action) -- TODO: 'npc' not used
	if not storage.actions then
		storage.actions = {}
	end
	storage.actions[old_action] = nil
end

function check_action(st, event_func) --, p)

	if not st or not st.actions then
		return true
	end

	for action in pairs (st.actions) do
		if action[event_func] then
			return action[event_func](action) --, p)
		end
	end

	return true
end

function pick_section_from_condlist(actor, npc, condlist)

	local rval = nil

	for n = 1, #condlist do
		local cond = condlist[n]
		local infop_conditions_met = true
		for i = 1, #cond.infop_check do
			local infop = cond.infop_check[i]
			if infop.func then
				if not xr_conditions[infop.func] then
					local npc_name = type(npc.name) ~= "function" and tostring(npc.name) or npc:name()
					abort("[xr_logic.pick_section_from_condlist]: NPC '%s': Function '%s' is not defined in xr_conditions.script.", npc_name, tostring(infop.func))
				end
				if xr_conditions[infop.func](actor, npc, infop.params) then -- infop.params is now never nil, see parse_func_params()
					if not infop.expected then
						infop_conditions_met = false
						break
					end
				else
					if infop.expected then
						infop_conditions_met = false
						break
					end
				end
			elseif infop.prob then
				if not rval then
					rval = math.random(100)
				end
				if infop.prob < rval then
					infop_conditions_met = false
					break
				end
			elseif has_alife_info(infop.name) then
				if not infop.required then
					infop_conditions_met = false
					break
				end
			else
				if infop.required then
					infop_conditions_met = false
					break
				end
			end
		end
		if infop_conditions_met then
			local effects = cond.infop_set
			if #effects > 0 then
				if actor == nil then
					abort("[xr_logic.pick_section_from_condlist]: TRYING TO SET INFOS WHEN ACTOR IS NIL.")
				end
				for i = 1, #effects do
					local infop = effects[i]
					if infop.func then
						if not xr_effects[infop.func] then
							abort("[xr_logic.pick_section_from_condlist]: NPC '%s': Function '%s' is not defined in xr_effects.script.", npc and npc:name() or "nil", tostring(infop.func))
						end
						xr_effects[infop.func](actor, npc, infop.params) -- infop.params is now never nil, see parse_func_params()
					elseif infop.required then
						if not has_alife_info(infop.name) then
							actor:give_info_portion(infop.name)
						end
					else
						if has_alife_info(infop.name) then
							actor:disable_info_portion(infop.name)
						end
					end
				end
			end
			return cond.section
		end
	end

	return nil
end

function cfg_get_condlist(ini, section, field) --, npc)

	local str = get_string(ini, section, field)
	if not str then
		return nil
	end
--[[
	local par = utils.parse_params(str)
	if not par[1] then
		abort_syntax_error_in_cond(npc, section, field)
	end
]]
	return {name = field, condlist = parse_condlist(nil, nil, nil, str)} -- (npc, section, field, str)}
end

local cfg_get_condlist = cfg_get_condlist
local pick_section_from_condlist = pick_section_from_condlist

function determine_section_to_activate(npc, ini, section_logic) -- never returns nil

	if not ini:section_exist(section_logic) then
		return "nil"
	end

	local active_section_cond = cfg_get_condlist(ini, section_logic, "active") --, npc)

	if not active_section_cond then
		return "nil"
	else
		local next_section = pick_section_from_condlist(db.actor, npc, active_section_cond.condlist)
		if not next_section then
			abort("[xr_logic.determine_section_to_activate]: Value of 'active' field of active section '%s' of NPC '%s' has no conditionless else clause.", tostring(section_logic), npc:name())
		end
		return next_section
	end
end

local activate_by_section = activate_by_section

function switch_to_section(npc, ini, section)

	if section == "" or section == nil then
		return false
	end

	local npc_st = db.storage[npc:id()]
	local active_section = npc_st.active_section

	if active_section == section then
		return false
	end

	if active_section then
		issue_event(nil, npc_st[npc_st.active_scheme], "deactivate", npc)
	end

	npc_st.exit_from_smartcover_initialized = nil
	npc_st.active_section = nil
	npc_st.active_scheme = nil
--[[
	if section == nil then	-- This was already checked!
		return true
	end
]]
	activate_by_section(npc, ini, section, false)

	return true
end

--[[
	-- Section switch condition tests in try_switch_to_another_section() are now sorted roughly in order of frequency of occurrence:

	cond                    hits (gulag_general)    hits (custom logic scripts)

	on_info                 39,413                  3,766
	on_signal               2,976                   686
	on_timer                882                     175
	on_game_timer           0                       747
	on_actor_inside         0                       105
	on_actor_outside        0                       10
	on_actor_dist_le        0                       25
	on_actor_dist_le_nvis   0                       25
	on_actor_dist_ge        0                       20
	on_actor_dist_ge_nvis   0                       45
	on_actor_in_zone        0                       35
	on_actor_not_in_zone    0                       22
	on_npc_in_zone          0                       14
	on_npc_not_in_zone      0                       1
]]

local switch_to_section = switch_to_section

function try_switch_to_another_section(npc, st, actor)

	if not actor then
		abort("[xr_logic.try_switch_to_another_section]: Error in implementation of scheme '%s' for NPC '%s': actor is nil.", tostring(st.scheme), (npc and npc:name()) or "nil")
	end

	local l = st.logic

	if not l then
		abort("[xr_logic.try_switch_to_another_section]: Cannot find script switching information in storage for scheme '%s' of NPC '%s'.", tostring(st.active_scheme), (npc and npc:name()) or "nil")
	end

	for x = 1, #l do
		local c = l[x]
		local c_name = c.name
		local switched = false
		if c_name == "on_info" then
			switched = switch_to_section(npc, st.ini, pick_section_from_condlist(actor, npc, c.condlist))
		elseif c_name == "on_signal" then
			if st.signals and st.signals[c.v1] then
				switched = switch_to_section(npc, st.ini, pick_section_from_condlist(actor, npc, c.condlist))
			end
		elseif c_name == "on_timer" then
			if time_global() >= db.storage[npc:id()].activation_time + c.v1 then
				switched = switch_to_section(npc, st.ini, pick_section_from_condlist(actor, npc, c.condlist))
			end
		elseif c_name == "on_game_timer" then
			if game.get_game_time():diffSec(db.storage[npc:id()].activation_game_time) >= c.v1 then
				switched = switch_to_section(npc, st.ini, pick_section_from_condlist(actor, npc, c.condlist))
			end
		elseif c_name == "on_actor_inside" then
			if npc:inside(actor:position()) then
				switched = switch_to_section(npc, st.ini, pick_section_from_condlist(actor, npc, c.condlist))
			end
		elseif c_name == "on_actor_outside" then
			if not npc:inside(actor:position()) then
				switched = switch_to_section(npc, st.ini, pick_section_from_condlist(actor, npc, c.condlist))
			end
		elseif c_name == "on_actor_dist_le" then
			if npc:alive() and npc:see(actor) and distance_between(actor, npc) <= c.v1 then
				switched = switch_to_section(npc, st.ini, pick_section_from_condlist(actor, npc, c.condlist))
			end
		elseif c_name == "on_actor_dist_le_nvis" then
			if distance_between(actor, npc) <= c.v1 then
				switched = switch_to_section(npc, st.ini, pick_section_from_condlist(actor, npc, c.condlist))
			end
		elseif c_name == "on_actor_dist_ge" then
			if npc:alive() and npc:see(actor) and distance_between(actor, npc) > c.v1 then
				switched = switch_to_section(npc, st.ini, pick_section_from_condlist(actor, npc, c.condlist))
			end
		elseif c_name == "on_actor_dist_ge_nvis" then
			if distance_between(actor, npc) > c.v1 then
				switched = switch_to_section(npc, st.ini, pick_section_from_condlist(actor, npc, c.condlist))
			end
		elseif c_name == "on_actor_in_zone" then
			local zone = db.zone_by_name[c.v1]
			if zone ~= nil and zone:inside(actor:position()) then
				switched = switch_to_section(npc, st.ini, pick_section_from_condlist(actor, npc, c.condlist))
			end
		elseif c_name == "on_actor_not_in_zone" then
			local zone = db.zone_by_name[c.v1]
			if zone == nil or not zone:inside(actor:position()) then
				switched = switch_to_section(npc, st.ini, pick_section_from_condlist(actor, npc, c.condlist))
			end
		elseif c_name == "on_npc_in_zone" then
			local npc_obj = level.object_by_id(c.npc_id)
			local zone = db.zone_by_name[c.v2]
			if npc_obj ~= nil and zone ~= nil and zone:inside(npc_obj:position()) then
				switched = switch_to_section(npc, st.ini, pick_section_from_condlist(actor, npc, c.condlist))
			end
		elseif c_name == "on_npc_not_in_zone" then
			local npc_obj = level.object_by_id(c.npc_id)
			local zone = db.zone_by_name[c.v2]
			if npc_obj == nil or zone == nil or not zone:inside(npc_obj:position()) then
				switched = switch_to_section(npc, st.ini, pick_section_from_condlist(actor, npc, c.condlist))
			end
		else
			abort("[xr_logic.try_switch_to_another_section]: Unrecognized condition '%s' encountered for NPC '%s'.", tostring(c_name), npc:name())
		end
		if switched == true then
			return true
		end
	end

	return false
end

function is_active(npc, st)
	local sect = st.section
	if sect == nil then
		abort("[xr_logic.is_active]: st.section is nil and active section is '%s' for NPC '%s'.", utils.to_str(db.storage[npc:id()].active_section), npc:name())
	end
	return sect == db.storage[npc:id()].active_section
end

local function abort_syntax_error_in_cond(npc, section, field) -- nv130116 make error reporting more robust
	abort("[xr_logic.abort_syntax_error_in_cond]: Syntax error in switch condition/effect list value of field '%s' in section '%s' for NPC '%s'.", tostring(field), tostring(section), npc and npc:name() or "nil")
end

local function cfg_get_number_and_condlist_s(str, section, field, cond, npc)
--[[
	local str = get_string_field(ini, section, field)
	if not str then
		return nil
	end

	local par = utils.parse_params(str)
	if not par[1] or not par[2] then
]]
	local num, condlist = string_match(str, "^([^|]+)|(.+)") -- see comments in cfg_get_number_string_and_condlist_s()
	num = tonumber(num) -- validate numericity
	if num == nil or condlist == nil then
		abort_syntax_error_in_cond(npc, section, field)
	end

	local t =
	{
		name     = cond,
		v1       = num,
		condlist = parse_condlist(nil, nil, nil, condlist) -- (npc, section, field, condlist)
	}

	return t
end

function cfg_get_string_and_condlist(ini, section, field, npc)

	local str = get_string(ini, section, field)
	if not str then
		return nil
	end

--	local par = utils.parse_params(str)
--	if not par[1] or not par[2] then

	local strng, condlist = string_match(str, "^([^|]+)|(.+)") -- see comments in cfg_get_number_string_and_condlist_s()
	if strng == nil or condlist == nil then
		abort_syntax_error_in_cond(npc, section, field)
	end

	local t =
	{
		name     = field,
		v1       = strng,
		condlist = parse_condlist(nil, nil, nil, condlist) -- (npc, section, field, condlist)
	}

	return t
end

local function cfg_get_string_and_condlist_s(str, section, field, cond, npc)

	local strng, condlist = string_match(str, "^([^|]+)|(.+)") -- see comments in cfg_get_number_string_and_condlist_s()
	if strng == nil or condlist == nil then
		abort_syntax_error_in_cond(npc, section, field)
	end

	local t =
	{
		name     = cond,
		v1       = strng,
		condlist = parse_condlist(nil, nil, nil, condlist) -- (npc, section, field, condlist)
	}

	return t
end

local function cfg_get_number_string_and_condlist_s(str, section, field, cond, npc)
--[[
	local str = get_string_field(ini, section, field)
	if not str then
		return nil
	end

	local par = utils.parse_params(str) -- leaves any trailing whitespace intact in each '|'-separated substring
	if not par[1] or not par[2] or not par[3] then -- not a problem for the 1st substring (tonumber() can deal with it), but could be a problem for the 2nd
]]
--	local num, strng, condlist = string_match(str, "^([^|]+)|%s*([^|%s]+)%s*|(.+)") -- e.g. str = " 600 | b4r | {=moo} baz@1 " would yield ' 600 ', 'b4r', and ' {=moo} baz@1 '
	local num, strng, condlist = string_match(str, "^([^|]+)|([^|]+)|(.+)") -- update: no need to worry about whitespace, every line in an LTX file has its whitespace stripped on being read
	num = tonumber(num) -- validate numericity
	if num == nil or strng == nil or condlist == nil then
		abort_syntax_error_in_cond(npc, section, field)
	end

	local t =
	{
		name     = cond,
		v1       = num,
		v2       = strng,
		condlist = parse_condlist(nil, nil, nil, condlist) -- (npc, section, field, condlist)
	}

	return t
end

local function cfg_get_condlist_s(str, section, field, cond) --, npc)
	return {name = cond, condlist = parse_condlist(nil, nil, nil, str)} -- (npc, section, field, str)}
end

local function cfg_get_npc_and_zone_s(str, section, field, cond, npc)

	local t = cfg_get_number_string_and_condlist_s(str, section, field, cond, npc)

	if t then
--		local sim = alife()
		if sim then
			local se_obj = sim:story_object(t.v1)
			if se_obj then
				t.npc_id = se_obj.id
			else
				t.npc_id = -1
				abort("[xr_logic.cfg_get_npc_and_zone_s]: NPC '%s', section '%s', field '%s': There is no server object with story_id '%d'.", npc:name(), tostring(section), tostring(field), t.v1)
			end
		else
			t.npc_id = -1
		end
	end

	return t
end

local func_by_cond =
{
	"on_info"               , cfg_get_condlist_s,
	"on_signal"             , cfg_get_string_and_condlist_s,
	"on_timer"              , cfg_get_number_and_condlist_s,
	"on_game_timer"         , cfg_get_number_and_condlist_s,
	"on_actor_inside"       , cfg_get_condlist_s,
	"on_actor_outside"      , cfg_get_condlist_s,
	"on_actor_dist_le"      , cfg_get_number_and_condlist_s,
	"on_actor_dist_le_nvis" , cfg_get_number_and_condlist_s,
	"on_actor_dist_ge"      , cfg_get_number_and_condlist_s,
	"on_actor_dist_ge_nvis" , cfg_get_number_and_condlist_s,
	"on_actor_in_zone"      , cfg_get_string_and_condlist_s,
	"on_actor_not_in_zone"  , cfg_get_string_and_condlist_s,
	"on_npc_in_zone"        , cfg_get_npc_and_zone_s,
	"on_npc_not_in_zone"    , cfg_get_npc_and_zone_s
}

local last_cond_idx = #func_by_cond - 1

function cfg_get_switch_conditions(ini, section, npc)

	if not section or not ini:section_exist(section) then
		return empty_table
	end

	local funcs = func_by_cond
	local l = {}
	local n = 1

	for x = 1, last_cond_idx, 2 do
		local cond, func = funcs[x], funcs[x + 1]
		local cond_value = ini:line_exist(section, cond) and ini:r_string(section, cond)
		local c = cond_value and func(cond_value, section, cond, cond, npc) or nil
		local i = 1
		while c ~= nil do
			l[n] = c
			n = n + 1
			i = i + 1
			local next_cond = cond..i
			cond_value = ini:line_exist(section, next_cond) and ini:r_string(section, next_cond)
			c = cond_value and func(cond_value, section, next_cond, cond, npc) or nil
		end
	end

	return l -- contiguous array of condlist data, used only by try_switch_to_another_section() to iterate over
end -- array now arranged roughly in descending order of frequency of condition occurrence with the SRP

function generic_scheme_overrides(npc)
	return db.storage[npc:id()].overrides
end

function mob_capture(mob, reset_actions)
	if reset_actions == nil then
		abort("[xr_logic.mob_capture]: reset_actions parameter is unspecified.")
	end
	if reset_actions then
		if mob:get_script() then
			mob:script(false, script_name())
		end
		mob:script(true, script_name())
	else
		if not mob:get_script() then
			mob:script(true, script_name())
		end
	end
end

function mob_captured(mob)
	return mob:get_script()
end
--[[
local function save_logic(obj, packet)

	local npc_st = db.storage[obj:id()]
	local activation_time = npc_st.activation_time

	if not activation_time then
		activation_time = 0
	end

 	packet:w_s32(activation_time - time_global())
	utils.w_CTime(packet, npc_st.activation_game_time)
end

local function load_logic(obj, reader)
	local npc_st = db.storage[obj:id()]
	npc_st.activation_time = reader:r_s32() + time_global()
	npc_st.activation_game_time = utils.r_CTime(reader)
end
]]
local pstor_number = 0
local pstor_string = 1
local pstor_boolean = 2

function pstor_store(obj, varname, val)

	local npc_st = db.storage[obj:id()]

	if npc_st.pstor == nil then
		npc_st.pstor = {}
	end

	local tv = type(val)

	if tv ~= "boolean" and tv ~= "string" and tv ~= "number" then
		abort("[xr_logic.pstor_store]: Unregistered variable type '%s' encountered.", tostring(tv))
	end

	npc_st.pstor[varname] = val
end

function pstor_retrieve(obj, varname, defval)
	local npc_st = db.storage[obj:id()]
	if npc_st.pstor ~= nil then
		local val = npc_st.pstor[varname]
		if val ~= nil then
			return val
		end
	end
	return defval
end

function pstor_save_all(obj, packet)

	local obj_st = db.storage[obj:id()]
	local pstor = obj_st.pstor

	if not pstor then
		pstor = {}
		obj_st.pstor = pstor
	end

	local ctr = 0

	for k in pairs (pstor) do
		ctr = ctr + 1
	end

	packet:w_u32(ctr)

	for k, v in pairs (pstor) do
 		packet:w_stringZ(k)
		local tv = type(v)
		if tv == "number" then
			packet:w_u8(pstor_number)
	 		packet:w_float(v)
	 	elseif tv == "string" then
			packet:w_u8(pstor_string)
	 		packet:w_stringZ(v)
	 	elseif tv == "boolean" then
			packet:w_u8(pstor_boolean)
	 		packet:w_bool(v)
		else
			local ppos = obj:position()
			dbglog("[xr_logic.pstor_save_all]: Tried to save an unregistered pstor value-type ["..tostring(tv).."] with key ["..tostring(k).."] and value ["..tostring(v).."] for NPC with ID ["..tostring(obj:id()).."], name ["..tostring(obj:name()).."], and position [x: "..tostring(ppos.x)..", y: "..tostring(ppos.y)..", z: "..tostring(ppos.z).."].")
			abort("[xr_logic.pstor_save_all]: Error encountered. If a save file was generated, it is corrupt. Navigate to your 'XRay Engine' > 'reports' folder, open the most recent ZIP file, and inform your modder of the contents of the xray_[Your_name].log file.")
			return
		end
	end
end

function pstor_load_all(obj, reader)

	local obj_st = db.storage[obj:id()]
	local pstor = obj_st.pstor

	if not pstor then
		pstor = {}
		obj_st.pstor = pstor
	end

	local ctr = reader:r_u32()

	for i = 1, ctr do
		local varname = reader:r_stringZ()
		local tn = reader:r_u8()
		if tn == pstor_number then
			pstor[varname] = reader:r_float()
		elseif tn == pstor_string then
			pstor[varname] = reader:r_stringZ()
		elseif tn == pstor_boolean then
			pstor[varname] = reader:r_bool()
		else
			local ppos = obj:position()
			dbglog("[xr_logic.pstor_load_all]: Tried to load an unregistered pstor value-type ["..tostring(tn).."] with key ["..tostring(varname).."] for alive(?) ["..tostring(obj:alive() == true).."] NPC with ID ["..tostring(obj:id()).."], name ["..tostring(obj:name()).."], and position [x: "..tostring(ppos.x)..", y: "..tostring(ppos.y)..", z: "..tostring(ppos.z).."].")
			abort("[xr_logic.pstor_load_all]: Your save file is corrupt. Navigate to your 'XRay Engine' > 'reports' folder, open the most recent ZIP file, and inform your modder of the contents of the xray_[Your_name].log file.")
			return
		end
--		dbglog("Loaded pstor key-value pair "..tostring(varname).." and "..tostring(pstor[varname]).." for NPC with ID "..tostring(obj:id()).." and name "..tostring(obj:name()))
	end
end

local pstor_save_all = pstor_save_all

function save_obj(obj, packet)

	local object_name = "object"..obj:name()

	set_save_marker(packet, "save", false, object_name)

	local obj_st = db.storage[obj:id()]

	local TMP = obj_st.job_ini
	if TMP then
		packet:w_stringZ(TMP)
	else
		packet:w_stringZ("")
	end

	TMP = obj_st.ini_filename
	if TMP then
		packet:w_stringZ(TMP)
	else
		packet:w_stringZ("")
	end

	TMP = obj_st.section_logic
	if TMP then
		packet:w_stringZ(TMP)
	else
		packet:w_stringZ("")
	end

	TMP = obj_st.active_section
	if TMP then
		packet:w_stringZ(TMP)
	else
		packet:w_stringZ("")
	end

	TMP = obj_st.gulag_name
	if TMP then
		packet:w_stringZ(TMP)
	else
		packet:w_stringZ("")
	end

--	save_logic(obj, packet) -- now inlined, below

	local activation_time = obj_st.activation_time or 0

 	packet:w_s32(activation_time - time_global())
	utils.w_CTime(packet, obj_st.activation_game_time)

	if obj_st.active_scheme then
		issue_event(nil, obj_st[obj_st.active_scheme], "save")
	end

	pstor_save_all(obj, packet)

	set_save_marker(packet, "save", true, object_name)
end

local pstor_load_all = pstor_load_all

function load_obj(obj, reader)

	local object_name = "object"..obj:name()

	set_save_marker(reader, "load", false, object_name)

	local obj_st = db.storage[obj:id()]

	local job_ini = reader:r_stringZ()
	if job_ini == "" then
		job_ini = nil
	end

	local ini_filename = reader:r_stringZ()
	if ini_filename == "" then
		ini_filename = nil
	end

	local section_logic = reader:r_stringZ()
	if section_logic == "" then
		section_logic = nil
	end

	local active_section = reader:r_stringZ()
	if active_section == "" then
		active_section = "nil"
	end

	local gulag_name = reader:r_stringZ()

	obj_st.job_ini = job_ini
	obj_st.loaded_ini_filename = ini_filename
	obj_st.loaded_section_logic = section_logic
	obj_st.loaded_active_section = active_section
	obj_st.loaded_gulag_name = gulag_name
--[[
	dbglog(object_name..": obj_st.job_ini = "..tostring(job_ini))
	dbglog(object_name..": obj_st.loaded_ini_filename = "..tostring(ini_filename))
	dbglog(object_name..": obj_st.loaded_section_logic = "..tostring(section_logic))
	dbglog(object_name..": obj_st.loaded_active_section = "..tostring(active_section))
	dbglog(object_name..": obj_st.loaded_gulag_name = "..tostring(gulag_name))

	load_logic(obj, reader) -- now inlined, below
]]
	obj_st.activation_time = reader:r_s32() + time_global()
	obj_st.activation_game_time = utils.r_CTime(reader)

	pstor_load_all(obj, reader)

	set_save_marker(reader, "load", true, object_name)
end

local dummy_ini_file = ini_file([[scripts\dummy.ltx]])

local function get_customdata_or_ini_file(npc, filename)
	if filename == "<customdata>" then
		return npc:spawn_ini() or dummy_ini_file
	elseif string_sub(filename, 1, 1) == "*" then
		local job_ini = db.storage[npc:id()].job_ini
		if job_ini ~= nil then
			return ini_file(job_ini)
		end
		return xr_gulag.loadLtx(string_sub(filename, 2))
	else
		return ini_file(filename)
	end
end

local configure_schemes = configure_schemes
local determine_section_to_activate = determine_section_to_activate

function initialize_obj(obj, obj_st, loaded, stype)
	if not loaded then
		local ini = configure_schemes(obj, obj:spawn_ini() or dummy_ini_file, "<customdata>", stype, "logic", "")
		local sect = determine_section_to_activate(obj, ini, "logic")
		activate_by_section(obj, ini, sect, false)
		if ini:section_exist("logic") then
			local relation = get_string_field(ini, "logic", "relation", nil)
			if relation ~= nil then
				-- general_goodwill toward actor = personal_goodwill {-3000, 9000} + community_goodwill {-3000, 1000} + community_to_community {-5000, 1000}
				local actor = db.actor
				local goodwill
				if relation == "enemy" then
					goodwill = -3000
				elseif relation == "friend" then
					goodwill = 9000
				else
					local npc_faction = obj:character_community()
					local npc_faction_attitude = relation_registry.community_relation(npc_faction, actor:character_community()) + actor:community_goodwill(npc_faction)
					goodwill = 0 - npc_faction_attitude -- goal: goodwill + npc_faction_attitude = 0
				end
				obj:set_goodwill(goodwill, actor)
--				obj:set_relation(game_object[relation], actor)
			end
			local sympathy = ini:line_exist("logic", "sympathy") and ini:r_float("logic", "sympathy") or nil
			if sympathy ~= nil then
				obj:set_sympathy(sympathy)
			end
		end
	else
		local ini_filename = obj_st.loaded_ini_filename
		if ini_filename then
			local ini = get_customdata_or_ini_file(obj, ini_filename)
			ini = configure_schemes(obj, ini, ini_filename, stype, obj_st.loaded_section_logic, obj_st.loaded_gulag_name)
			activate_by_section(obj, ini, obj_st.loaded_active_section, true)
		end
	end
end