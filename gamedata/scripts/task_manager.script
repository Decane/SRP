-- DC180402: Fixed the issue where speaking to a mechanic with incomplete 'find upgrade' tasks would leak task entity IDs.

local random_task = nil

class "CRandomTask"

function CRandomTask:__init()

	self.task_ini = ini_file("misc\\task_manager.ltx")
	self.task_phrase_id = 100
	self.id_generator = object_collection.object_collection()

	local ini = self.task_ini

	if not ini:section_exist("list") then
		abort("[CRandomTask:__init]: There is no section [list] in misc\\task_manager.ltx or any of its includes.")
	end

--	local category = ""

	self.task_info = {}
	self.general_tasks = {}
	self.eliminate_smart_tasks = {}
	self.capture_smart_tasks = {}
	self.defend_smart_tasks = {}
	self.defend_smart_delay_tasks = {}
	self.reward_tasks = {}
	self.bring_item_tasks = {}
	self.recover_item_tasks = {}
	self.find_upgrade_tasks = {}
	self.hide_from_surge = {}
--	self.eliminate_squad_tasks = {}
	self.inited_find_upgrade_tasks = {}

	for i = 0, ini:line_count("list") - 1 do

		local result, id = ini:r_line("list", i, "", "")

		if not ini:section_exist(id) then
			abort("[CRandomTask:__init]: There is no section [%s] in misc\\task_manager.ltx or any of its includes, despite being listed under section [list].", id)
		end

		local type = utils.cfg_get_string(ini, id, "type", nil, true, "")

		if type == "storyline" then
			self.general_tasks[id] = task_objects.CStorylineTask(ini, id, "storyline")
		elseif type == "eliminate_smart" then
			self.eliminate_smart_tasks[id] = task_objects.CEliminateSmartTask(ini, id, "eliminate_smart")
		elseif type == "capture_smart" then
			self.capture_smart_tasks[id] = task_objects.CCaptureSmartTask(ini, id, "capture_smart")
		elseif type == "defend_smart" then
			self.defend_smart_tasks[id] = task_objects.CDefendSmartTask(ini, id, "defend_smart")
		elseif type == "defend_smart_delay" then
			self.defend_smart_delay_tasks[id] = task_objects.CDefendSmartTaskDelay(ini, id, "defend_smart_delay")
		elseif type == "take_reward" then
			self.reward_tasks[id] = task_objects.CGetRewardTask(ini, id, "take_reward")
		elseif type == "bring_item" then
			self.bring_item_tasks[id] = task_objects.CBringItemTask(ini, id, "bring_item")
		elseif type == "recover_item" then
			self.recover_item_tasks[id] = task_objects.CRecoverItemTask(ini, id, "recover_item")
		elseif type == "find_upgrade" then
			self.find_upgrade_tasks[id] = task_objects.CFindUpgradeTask(ini, id, "find_upgrade")
		elseif type == "hide_from_surge" then
			self.hide_from_surge[id] = task_objects.CHideFromSurgeTask(ini, id, "hide_from_surge")
--		elseif type == "eliminate_squad" then
--			self.eliminate_squad_tasks[id] = task_objects.CEliminateSquadTask(ini, id, "eliminate_squad")
		else
			abort("[CRandomTask:__init]: Invalid task type '%s' in section [%s] in misc\\task_manager.ltx or one of its includes.", type, id)
		end
	end

	self.inited_tasks = {}
	self.rewards = {}
	self.rewarders = {}
	self.taskers = {}
--	self.selected_faction_task = {}
	self.tasks_by_smarts = {}
end

function CRandomTask:save(packet)

	set_save_marker(packet, "save", false, "CRandomTask")

	local inited_tasks = self.inited_tasks
--[[
	The block below clears any unstarted bring_item, recover_item, and capture_smart tasks.
	An autosave while the player has the random task dialog open would erase the
	entity IDs of any tasks of the aforementioned types that have by then been
	allocated for player selection in that dialog by task_dialogs.squad_has_capture_tasks().
	That would spell trouble, so this block is run only if the dialog window is closed.
]]
	if pda.dialog_closed == true then
		local id_by_type = {bring_item = 4, recover_item = 3}
		for key, task in pairs (inited_tasks) do
			local id = id_by_type[task.type]
			if id ~= nil then
				if task.status == "normal" then
					self.id_generator:remove(task.entity_id)
					local task_squad = sim_board.get_sim_board().squads[task.squad_id]
					if task_squad then
						task_squad.random_tasks[id] = nil
					end
					inited_tasks[key] = nil
				end
			elseif task.type == "capture_smart" then
				if task.status == "normal" then
					local task_eid = task.entity_id
					self.id_generator:remove(task_eid)
					local task_squad = sim_board.get_sim_board().squads[task.squad_id]
					if task_squad then
						for id, entity_id in pairs (task_squad.random_tasks) do
							if entity_id == task_eid then
								task_squad.random_tasks[id] = nil
								break
							end
						end
					end
					inited_tasks[key] = nil
				end
			end
		end
	end

	local n = 0
	for k in pairs (inited_tasks) do
		n = n + 1
	end

	packet:w_u16(n)

	local task_id_by_type =
	{
		storyline          = 0,
		eliminate_smart    = 1,
		capture_smart      = 2,
		defend_smart       = 3,
		defend_smart_delay = 4,
		take_reward        = 5,
		bring_item         = 6,
		recover_item       = 7,
		find_upgrade       = 8,
		hide_from_surge    = 9,
--		eliminate_squad    = 10
	}

	for key, task in pairs (inited_tasks) do
		packet:w_stringZ(task.base_id)
		packet:w_stringZ(key)
		packet:w_u16(task_id_by_type[task.type])
		task:save(packet)
	end

	self.id_generator:save(packet)

	n = 0
	for k in pairs (self.rewards) do
		n = n + 1
	end

	packet:w_u8(n)

	for k, v in pairs (self.rewards) do
		packet:w_stringZ(k)
		packet:w_u8(#v)
		for kk, vv in pairs (v) do
			if vv.money ~= nil then
				packet:w_bool(true)
				packet:w_u16(vv.money)
			else
				packet:w_bool(false)
				packet:w_stringZ(vv.item)
			end
		end
	end

	n = 0
	for k in pairs (self.inited_find_upgrade_tasks) do
		n = n + 1
	end

	packet:w_u16(n)

	for k, v in pairs (self.inited_find_upgrade_tasks) do
		packet:w_u16(k)
		local num = 0
		for kk in pairs (v) do
			num = num + 1
		end
		packet:w_u16(num)
		for kk, vv in pairs (v) do
			packet:w_stringZ(kk)
			packet:w_u16(vv.entity_id)
		end
	end

	set_save_marker(packet, "save", true, "CRandomTask")
end

function CRandomTask:load(reader)

	set_save_marker(reader, "load", false, "CRandomTask")

--	self.task_ini = ini_file("misc\\task_manager.ltx")
--	self.task_info = {}
--	self.inited_tasks = {}
--	self.inited_find_upgrade_tasks = {}

	local task_type_by_id =
	{
		[0] = "storyline",
		[1] = "eliminate_smart",
		[2] = "capture_smart",
		[3] = "defend_smart",
		[4] = "defend_smart_delay",
		[5] = "take_reward",
		[6] = "bring_item",
		[7] = "recover_item",
		[8] = "find_upgrade",
		[9] = "hide_from_surge",
--		[10] = "eliminate_squad"
	}

	local inited_tasks = self.inited_tasks
	local tasks_by_smarts = self.tasks_by_smarts
	local task_info = self.task_info

	local n = reader:r_u16()

	for i = 1, n do

		local base_id = reader:r_stringZ()
		local key = reader:r_stringZ()
		local t = task_type_by_id[reader:r_u16()]
		local task = nil

		if t == "storyline" then
			task = task_objects.CStorylineTask(self.task_ini, base_id, t)
		elseif t == "eliminate_smart" then
			task = task_objects.CEliminateSmartTask(self.task_ini, base_id, t)
		elseif t == "capture_smart" then
			task = task_objects.CCaptureSmartTask(self.task_ini, base_id, t)
		elseif t == "defend_smart" then
			task = task_objects.CDefendSmartTask(self.task_ini, base_id, t)
		elseif t == "defend_smart_delay" then
			task = task_objects.CDefendSmartTaskDelay(self.task_ini, base_id, t)
		elseif t == "take_reward" then
			task = task_objects.CGetRewardTask(self.task_ini, base_id, t)
		elseif t == "bring_item" then
			task = task_objects.CBringItemTask(self.task_ini, base_id, t)
		elseif t == "recover_item" then
			task = task_objects.CRecoverItemTask(self.task_ini, base_id, t)
		elseif t == "find_upgrade" then
			task = task_objects.CFindUpgradeTask(self.task_ini, base_id, t)
		elseif t == "hide_from_surge" then
			task = task_objects.CHideFromSurgeTask(self.task_ini, base_id, t)
--		elseif t == "eliminate_squad" then
--			task = task_objects.CEliminateSquadTask(self.task_ini, base_id, t)
		end

		if task ~= nil then
			task:load(reader)
			inited_tasks[key] = task
			if task.status == "selected" then
				task_info[tostring(task.entity_id)] = task
				if (t == "eliminate_smart") or (t == "capture_smart") or (t == "defend_smart") or (t == "defend_smart_delay") then
					tasks_by_smarts[task.target] = task
				end
			end
		end
	end

	self.id_generator:load(reader)

	local rewards = self.rewards

	n = reader:r_u8()

	for i = 1, n do

		local community = reader:r_stringZ()
		local num = reader:r_u8()
		local rewards_by_community = {}

		rewards[community] = rewards_by_community

		for j = 1, num do

			local is_money = reader:r_bool()
			if is_money then
				local amount = reader:r_u16()
--				table.insert(rewards[community], {money = amount})
				rewards_by_community[j] = {money = amount}
			else
				local item_name = reader:r_stringZ()
--				table.insert(rewards[community], {item = item_name})
				rewards_by_community[j] = {item = item_name}
			end
		end
	end

	local inited_find_upgrade_tasks = self.inited_find_upgrade_tasks

	n = reader:r_u16()

	for i = 1, n do
		local k = reader:r_u16()
		local TT = {}
		inited_find_upgrade_tasks[k] = TT
		local num = reader:r_u16()
		for j = 1, num do
			local kk = reader:r_stringZ()
			local ei = reader:r_u16()
			TT[kk] = self:get_task_by_entity_id(ei)
		end
	end

	set_save_marker(reader, "load", true, "CRandomTask")
end

--------------------------------------------------------------------------------

function CRandomTask:give_task(task_id, community)
	local task = self.task_info[task_id]
	if task == nil then
		abort("Wrong task id [%s] in give_task function.", tostring(task_id))
	end
	task:give_task(community)
end

function CRandomTask:task_complete(task_id)

	local task = self.task_info[task_id]

	if task == nil then
		return false
	end

	task:check_task(self)

	if task.last_check_task == "complete" then
		xr_statistic.inc_completed_quests_counter()
		return true
	else
		return false
	end
end

function CRandomTask:task_fail(task_id)

	local task = self.task_info[task_id]

	if task == nil then
		return false
	end

	task:check_task(self)

	local status = task.last_check_task
	if status == "fail" then
		xr_statistic.inc_failed_quests_counter()
		return true
	end

	return status == "reversed" or status == "reversed_silent"
end

function CRandomTask:task_callback(_task, completed)

	local task_id = _task:get_id()
	local task_obj = self.task_info[task_id]

	if task_obj == nil then
		return
	end

	local delta

	if completed == true then
		task_obj:init_reward()
		delta = task_obj.community_relation_delta_complete
	else
		delta = task_obj.community_relation_delta_fail
	end

	local actor = db.actor
	local community = task_obj.community
	local relation = actor:community_goodwill(community) + delta

	if relation > 1000 then
		relation = 1000
	elseif relation < -3000 then
		relation = -3000
	end

	actor:set_community_goodwill(community, relation)

	local task_obj_id = task_obj.id
	for k, v in pairs (self.inited_find_upgrade_tasks) do
		v[task_obj_id] = nil
	end

	task_obj:deactivate_task(_task)

--	dbgmsg("tm.id_generator.m_count before finishing task: "..self.id_generator.m_count)

	for key, task in pairs (self.inited_tasks) do
		if tostring(task.entity_id) == tostring(task_id) then
--			self.id_generator:remove(task.entity_id)
--			dbgmsg("Cleared task with key "..key..", entity_id "..task.entity_id..", name "..task.name.." from tm.inited_tasks")
			self.inited_tasks[key] = nil
			break
		end
	end

	for smart_id, task in pairs (self.tasks_by_smarts) do
		if tostring(task.entity_id) == tostring(task_id) then
--			self.id_generator:remove(task.entity_id)
--			dbgmsg("Cleared task with smart_id "..smart_id..", entity_id "..task.entity_id..", name "..task.name.." from tm.tasks_by_smarts")
			self.tasks_by_smarts[smart_id] = nil
			break
		end
	end

--	dbgmsg("tm.id_generator.m_count after finishing task: "..self.id_generator.m_count)

	self.task_info[task_id] = nil
end

function CRandomTask:select_task(type, obj, faction)

	local task_table, key = nil, nil
	if type == "storyline" then
		task_table = self.general_tasks
		key = tostring(faction).."_general_"..obj
	elseif type == "eliminate_smart" then
		task_table = self.eliminate_smart_tasks
		key = tostring(faction).."_eliminate_smart_"..obj.id
	elseif type == "capture_smart" then
		task_table = self.capture_smart_tasks
		key = tostring(faction).."_capture_smart_"..obj.id
	elseif type == "defend_smart" then
		task_table = self.defend_smart_tasks
		key = tostring(faction).."_defend_smart_"..obj.id
	elseif type == "defend_smart_delay" then
		task_table = self.defend_smart_delay_tasks
		key = tostring(faction).."_defend_smart_delay_"..obj.id
	elseif type == "take_reward" then
		task_table = self.reward_tasks
		key = tostring(faction).."_take_reward_"..obj
	elseif type == "bring_item" then
		task_table = self.bring_item_tasks
		key = tostring(faction).."_bring_item_"..obj
	elseif type == "recover_item" then
		task_table = self.recover_item_tasks
		key = "recover_item_"..level.name() -- SRP
--	elseif type == "find_upgrade" then -- find_upgrade tasks never get a select_task() call
--		task_table = self.find_upgrade_tasks
--		key = tostring(faction).."_find_upgrade_"..obj
	elseif type == "hide_from_surge" then
		task_table = self.hide_from_surge
		key = tostring(faction).."_hide_from_surge_"..obj
--	elseif type == "eliminate_squad" then
--		task_table = self.eliminate_squad_tasks
--		key = tostring(faction).."_eliminate_squad_"..obj.squad_id
	end

	if task_table == nil then
		abort("Wrong type [%s] in select_task.", tostring(type))
	end

	local inited_tasks = self.inited_tasks
	local inited_inspected_task = inited_tasks[key]
--[[
	for k, task in pairs (inited_tasks) do
		dbglog("inited_tasks: key = "..k..", entity_id = "..task.entity_id)
	end

--	for k, task in pairs (self.task_info) do
--		dbglog("tm.task_info: key = "..k..", name = "..task.name)
--	end
]]
	if inited_inspected_task ~= nil then
		if type ~= "recover_item" then
			return inited_inspected_task
		end
		if inited_inspected_task.status == "selected" then
			return
		end
		self.id_generator:remove(inited_inspected_task.entity_id)
		local task_squad = sim_board.get_sim_board().squads[inited_inspected_task.squad_id]
		if task_squad ~= nil then
			task_squad.random_tasks[3] = nil
		end
		inited_tasks[key] = nil
--[[
		if type == "recover_item" then
			if not inited_tasks[key]:check_target(obj, faction) or inited_tasks[key].status ~= "normal" then
				return
			end
		end
		return inited_tasks[key]
]]
	end

--	local new_EId = self.id_generator:get_id() -- memory leak
	local max_prior = -1
	local selected_task = nil

	for k, task in pairs (task_table) do -- un-inited tasks
		if task.prior > max_prior then
			if task:check_target(obj, faction) then -- flipped this and the line above it for performance
				max_prior = task.prior
				selected_task = task
			end
		end
	end

	if selected_task == nil then
		return
	end

--	dbgmsg("tm.id_generator.m_count before accepting task: "..self.id_generator.m_count)

	local new_EId = self.id_generator:get_id() -- prevented a small memory leak by moving this *below* the potential return above

	inited_tasks[key] = selected_task:get_inited_task(obj, faction, new_EId)

	return inited_tasks[key]
end

function CRandomTask:select_find_upgrade_task(npc, faction)

	local npc_id = npc:id()
	local npc_upgr_tasks = self.inited_find_upgrade_tasks[npc_id]

	if npc_upgr_tasks == nil then
		npc_upgr_tasks = {}
		self.inited_find_upgrade_tasks[npc_id] = npc_upgr_tasks
	end

	-- DC180402: The original loop (block-commented below this one) would leak entity IDs
	-- whenever the player spoke to a mechanic with incomplete find_upgrade tasks:
	for section, task in pairs (self.find_upgrade_tasks) do -- un-inited tasks
		if npc_upgr_tasks[section] == nil then
			if task:check_target(npc, faction) then
				local entity_id = self.id_generator:get_id()
				local itask = task:get_inited_task(npc, faction, entity_id)
				npc_upgr_tasks[section] = itask
				self.inited_tasks[tostring(faction).."_find_upgrade_"..entity_id] = itask
			end
		end
	end
--[[
	for k, v in pairs (self.find_upgrade_tasks) do
		if v:check_target(npc, faction) then
			local task = v:get_inited_task(npc, faction, self.id_generator:get_id())
			if self.inited_find_upgrade_tasks[npc_id][task.id] == nil then
				self.inited_find_upgrade_tasks[npc_id][task.id] = task
				self.inited_tasks[tostring(faction).."_find_upgrade_"..task.entity_id] = task
			end
		end
	end
]]
end

function CRandomTask:get_task_by_entity_id(entity_id)
	for k, task in pairs (self.inited_tasks) do
		if task.entity_id == entity_id then
			return task
		end
	end
	return nil
end
--[[
function CRandomTask:get_task_by_key(type, obj, faction)

	local key = nil
	if type == "storyline" then
		key = tostring(faction).."_general_"..obj
	elseif type == "eliminate_smart" then
		key = tostring(faction).."_eliminate_smart_"..obj.id
	elseif type == "capture_smart" then
		key = tostring(faction).."_capture_smart_"..obj.id
	elseif type == "defend_smart" then
		key = tostring(faction).."_defend_smart_"..obj.id
	elseif type == "defend_smart_delay" then
		key = tostring(faction).."_defend_smart_delay_"..obj.id
	elseif type == "take_reward" then
		key = tostring(faction).."_take_reward_"..obj
	elseif type == "bring_item" then
		key = tostring(faction).."_bring_item_"..obj
	elseif type == "recover_item" then
		key = "recover_item_"..level.name()			-- SRP
	elseif type == "find_upgrade" then
		key = tostring(faction).."_find_upgrade_"..obj
	elseif type == "hide_from_surge" then
		key = tostring(faction).."_hide_from_surge_"..obj
--	elseif type == "eliminate_squad" then
--		key = tostring(faction).."_eliminate_squad_"..obj.squad_id
	end

	local inited_inspected_task = self.inited_tasks[key]
	if inited_inspected_task ~= nil then
		return inited_inspected_task
	else
		abort("There is no %s task with key %s!!!", type, key)
	end
end
]]
function CRandomTask:get_tasks_by_smart(smart_id)
	return self.tasks_by_smarts[smart_id]
end
--[[
function CRandomTask:reinit_task_prior(faction)
	for k, task in pairs (self.inited_tasks) do
		if task.community == faction then
			local task_type = task.type
			if task_type == "eliminate_smart" then
				task.prior = task.base_prior + task.target_obj.sim_prior[faction]
			elseif task_type == "capture_smart" then
				task.prior = task.base_prior + task.target_obj.sim_prior[faction]
			elseif task_type == "defend_smart" then
				task.prior = task.base_prior + task.target_obj.sim_prior[faction]
			elseif task_type == "defend_smart_delay" then
				task.prior = task.base_prior + task.target_obj.sim_prior[faction]
			end
		end
	end
end

function CRandomTask:register_faction_task(faction, task_object)

	if self.selected_faction_task[faction] == nil then
		self.selected_faction_task[faction] = {}
	end

	if task_object.added_to_faction == true then
		return
	end

	task_object.added_to_faction = true

	table.insert(self.selected_faction_task[faction], task_object)

	table.sort(self.selected_faction_task[faction], function(a, b) return a.prior > b.prior end)
end

function CRandomTask:unregister_faction_task(faction, task_object)

	if task_object.added_to_faction == nil then
		return
	end

	task_object.added_to_faction = nil

	local del_id = nil

	for k, v in pairs (self.selected_faction_task[faction]) do
		if v.id == task_object.id then
			del_id = k
			break
		end
	end

	table.remove(self.selected_faction_task[faction], del_id)
end
]]
function CRandomTask:register_rewarder(npc_id, community)
	self.rewarders[community] = npc_id
end

function CRandomTask:register_tasker(npc_id, community)
	self.taskers[community] = npc_id
end
--[[
function CRandomTask:immediate_give_reward(id)

	local task_ini = self.task_ini
	local immediate_reward = utils.cfg_get_bool(task_ini, id, "immediate_reward", nil, false, false)

	if immediate_reward then

		local act = db.actor
		local reward_money = xr_logic.parse_condlist(nil, nil, nil, utils.cfg_get_string(task_ini, id, "reward_money", nil, false, "", ""))
		local reward_item = xr_logic.parse_condlist(nil, nil, nil, utils.cfg_get_string(task_ini, id, "reward_item", nil, false, "", ""))
		local money = xr_logic.pick_section_from_condlist(act, act, reward_money)

		if money ~= nil then
			dialogs.relocate_money(nil, tonumber(money), "in")
		end

		local items = xr_logic.pick_section_from_condlist(act, act, reward_item)

		if items ~= nil then
			local ancillary_item_table = {}
			for k, v in pairs (utils.parse_names(items)) do
				if ancillary_item_table[v] == nil then
					ancillary_item_table[v] = 1
				else
					ancillary_item_table[v] = ancillary_item_table[v] + 1
				end
			end
			for section, amount in pairs (ancillary_item_table) do
				dialogs.relocate_item_section(nil, section, "in", amount)
			end
		end
	end
end
]]
function CRandomTask:update()
end

function CRandomTask:register_target(obj)
end

function CRandomTask:unregister_target(obj)
end

function get_task_manager()
	if random_task == nil then
		random_task = CRandomTask()
	end
	return random_task
end

function task_complete(p1)
	return get_task_manager():task_complete(p1)
end

function task_fail(p1)
	return get_task_manager():task_fail(p1)
end

function task_callback(_task, _state)
	if _state == task.fail or _state == task.completed then
		get_task_manager():task_callback(_task, _state == task.completed)
	end
end
--[[
function give_task(task_id, community)
	local tm = get_task_manager()
	local task = tm:select_task(task_type, target_obj, faction_name)
	task:give_task(faction_name)
	tm.selected_faction_task[community][5]:give_task(community)
	tm:give_task(task_id, community)
end
]]
function clear_task_manager()
end

function is_more_suitable(squad_obj)

	local squad_smart_descr = squad_obj.board.smarts[squad_obj.smart_id]
	if squad_smart_descr.stayed_squad_quan <= 1 then
		return true
	end

	if squad_obj:get_script_target() == nil then
		return true
	end

	for k, v in pairs (squad_smart_descr.squads) do
		if v:get_script_target() == nil then
			return false
		end
	end
	return true
end