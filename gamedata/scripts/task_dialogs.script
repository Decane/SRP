local trans = game.translate_string

function is_squad_leader(actor, npc)
	local npc_id = npc:id()
	local squad = db.storage[npc_id].squad_obj
	if squad == nil then
		return false
	end
	return npc_id == squad.commander_id
end

function is_squad_idle(npc)

	local squad = db.storage[npc:id()].squad_obj

	if squad == nil then
		abort("[task_dialogs.is_squad_idle]: Squad for NPC with ID %s is nil!", npc:id())
	end

	if squad.current_action and squad.current_action.name == "attack_point" then
		return false
	end

	local combat = squad.board.smarts[squad.sim_combat_id].smrt.combat_manager
	local combat_stage = combat.squads[squad.squad_id]._stage

	return combat_stage == "idle"
end

function isnt_squad_idle(npc)
	return not is_squad_idle(npc)
end

function init_squad_task(actor, npc) --, p1, p2)
	local squad = db.storage[npc:id()].squad_obj
	if squad == nil then
		abort("[task_dialogs.init_squad_task]: Squad for NPC with ID %s is nil!", npc:id())
	end
	squad:init_squad_task()
end

function squad_has_tasks(npc) --, actor, p1, p2)

	local squad = db.storage[npc:id()].squad_obj

	if squad == nil then
		abort("[task_dialogs.squad_has_tasks]: Squad for NPC with ID %s is nil!", npc:id())
	end

	local tm = task_manager.get_task_manager()

	for k, entity_id in pairs (squad.random_tasks) do
		if tm:get_task_by_entity_id(entity_id).status ~= "selected" then
			return true
		end
	end

	return false
end

function squad_hasnt_tasks(npc) --, actor, p1, p2)
	return not squad_has_tasks(npc)
end

function show_tasks(npc) --, actor, dialog, phrase)

	local squad = db.storage[npc:id()].squad_obj
	if squad == nil then
		abort("[task_dialogs.show_tasks]: Squad for NPC with ID %s is nil!", npc:id())
	end

	local news_caption = ""
	local news_text = ""
	local tm = task_manager.get_task_manager()

	for k, entity_id in pairs (squad.random_tasks) do
		local tsk = tm:get_task_by_entity_id(entity_id)
		if tsk.status ~= "selected" then
			local task_type = tsk.type
			if (task_type == "eliminate_smart") then
				news_caption = trans(tsk.name)
				if tsk.description ~= "NO_TEXT" then
					news_text = tsk.description
				else
					news_text = trans("sim_eliminate_smart_text")
				end
			elseif (task_type == "capture_smart") then
				if tsk.task_type == 0 then
					news_caption = trans(tsk.name)
				else
					local smart_obj = sim_board.get_sim_board().smarts[tsk.target].smrt
					local smart_name = smart_names.get_smart_terrain_name(smart_obj)
					if smart_name ~= nil then
						news_caption = trans(tsk.name)..": "..smart_name
					else
						news_caption = trans(tsk.name)..": "..smart_obj:name()
					end
				end
				if tsk.description ~= "NO_TEXT" then
					news_text = tsk.description
				else
					news_text = trans("sim_capture_smart_text")
				end
			elseif (task_type == "defend_smart") then
				news_caption = trans(tsk.name)
				if tsk.description ~= "NO_TEXT" then
					news_text = tsk.description
				else
					news_text = trans("sim_defend_smart_text")
				end
			elseif (task_type == "take_reward") then
				news_caption = trans(tsk.name)
				if tsk.description ~= "NO_TEXT" then
					news_text = tsk.description
				else
					news_text = trans("sim_take_reward_text")
				end
			elseif (task_type == "sos") then
				news_caption = trans(tsk.name)
				if tsk.description ~= "NO_TEXT" then
					news_text = tsk.description
				else
					news_text = trans("sim_sos_text")
				end
			elseif (task_type == "bring_item") then
				news_caption = trans("sim_bring_item")
				local s = ""
				local ini = system_ini()
				for item_name, cnt_table in pairs (tsk.requested_items) do
					local name = trans(ini:r_string(item_name, "inv_name")).." x"..cnt_table.goal
					if s ~= "" then
						s = s..", "..name
					else
						s = name
					end
				end
				s = s.."."
				news_text = s
			elseif (task_type == "recover_item") then
				news_caption = trans("sim_recover_item")
				local name = trans(system_ini():r_string(tsk.requested_item, "inv_name"))
				news_text = name.."."
			elseif (task_type == "eliminate_squad") then
				news_caption = trans(tsk.name)
				if tsk.description ~= "NO_TEXT" then
					news_text = tsk.description
				else
					news_text = trans("sim_eliminate_squad_text")
				end
			else
				news_caption = trans("test_storyline_task")
				news_text = trans("test_storyline_task_text")
			end
			npc:give_talk_message2(news_caption, news_text, "ui_iconsTotal_"..task_type, "iconed_answer_item")
		end
	end
end

function show_description(npc) --, dialog_name, phrase_id)
	local squad = db.storage[npc:id()].squad_obj
	if squad == nil then
		abort("[task_dialogs.show_description]: Squad for NPC with ID %s is nil!", npc:id())
	end
	local tm = task_manager.get_task_manager()
	for k, entity_id in pairs (squad.random_tasks) do
		local tsk = tm:get_task_by_entity_id(entity_id)
		if tsk.status ~= "selected" then
			if tsk.type == "recover_item" then
--				return tsk.text -- causes string buffer overflow when pre-translated as in SRP
				return utils.cfg_get_string(tsk.task_ini, tsk.id, "text", nil, false, "", "NO_TEXT")
			end
		end
	end
	return ""
end

function squad_has_capture_tasks(actor, npc, p1, p2, p3) -- misnomer, is actually used to check for 'return_item', 'bring_item', and 'capture_smart' tasks via dialog
	local squad = db.storage[npc:id()].squad_obj
	if squad == nil then
		abort("[task_dialogs.squad_has_capture_tasks]: Squad for NPC with ID %s is nil!", npc:id())
	end
	local entity_id = squad.random_tasks[tonumber(p3) - 10]
	if entity_id ~= nil then
		local task = task_manager.get_task_manager():get_task_by_entity_id(entity_id)
		return task.status ~= "selected"
	else
		return false
	end
end

function give_squad_capture_task(npc, actor, p1, p2) -- misnomer, is actually used to assign 'return_item', 'bring_item', and 'capture_smart' tasks via dialog

	local squad = db.storage[npc:id()].squad_obj
	if squad == nil then
		abort("[task_dialogs.give_squad_capture_task]: Squad for NPC with ID %s is nil!", npc:id())
	end

	if tonumber(p2) == 43 then -- 43: return_item, 24: bring_item, 22 & 21: capture_smart
		p2 = 23
	end

	local entity_id = squad.random_tasks[tonumber(p2) - 20] -- 4,3,2,1 are possible indices here
	if entity_id == nil then
		return
	end

	local task = task_manager.get_task_manager():get_task_by_entity_id(entity_id)
--	if p2 == 23 then
--		task:init_task(squad.squad_id) -- return_item gets an extra init_task() call ???
--	end

--	local player = sim_board.get_sim_board().players[squad.player_id]
	task.squad = squad
	task:give_task(squad.player_id)
--[[
	if sr_recoveritem.target_sr then
		entity_id = squad.random_tasks[3]
		if entity_id ~= nil then
			local task = task_manager.get_task_manager():get_task_by_entity_id(entity_id)
			if task.status ~= "selected" then
				db.storage.table_squad_for_recoveritem[squad.squad_id] = nil
			end
		end
	end
]]
end

function squad_hasnt_capture_tasks(actor, npc) --, p1, p2, p3)
	local squad = db.storage[npc:id()].squad_obj
	if squad == nil then
		abort("[task_dialogs.squad_hasnt_capture_tasks]: Squad for NPC with ID %s is nil!", npc:id())
	end
--[[
	if sr_recoveritem.target_sr then
		local entity_id = squad.random_tasks[3]
		if entity_id ~= nil then
			local task = task_manager.get_task_manager():get_task_by_entity_id(entity_id)
			if task.status ~= "selected" then
				db.storage.table_squad_for_recoveritem[squad.squad_id] = nil
			end
		end
	end
]]
end

function is_bring_item_task(actor, npc)
	local squad = db.storage[npc:id()].squad_obj
	if squad == nil then
		return false
	end
	local bring_item_task_entity_id = squad.random_tasks[4]
	if bring_item_task_entity_id ~= nil then
		local task = task_manager.get_task_manager():get_task_by_entity_id(bring_item_task_entity_id)
		return task.state == "have_item"
	else
		return false
	end
end

function transfer_bringed_item(actor, npc)
	local squad = db.storage[npc:id()].squad_obj
	if squad == nil then
		return false
	end
	local task = task_manager.get_task_manager():get_task_by_entity_id(squad.random_tasks[4])
	task:transfer_items_looking_for(npc)
--	squad.random_tasks[4] = nil -- done in task_objects.CBringItemTask:deactivate_task()
end

function create_task_answer_phrase(npc, dialog_name, phrase_id)
	local string = ""
	if (phrase_id == "15") then
		string = trans("tm_random_task_15")
	elseif (phrase_id == "14") then
		string = trans("tm_random_task_14")
	elseif (phrase_id == "13") then
		local return_item_task = task_manager.get_task_manager():get_task_by_entity_id(db.storage[npc:id()].squad_obj.random_tasks[3])
		string = trans("sim_recover_item").." "..trans(system_ini():r_string(return_item_task.requested_item, "inv_name"))
	else
		local task = task_manager.get_task_manager():get_task_by_entity_id(db.storage[npc:id()].squad_obj.random_tasks[tonumber(phrase_id) - 10])
		local smt = sim_board.get_sim_board().smarts[task.target].smrt
		local name = smart_names.get_smart_terrain_name(smt)
		if name == nil then
			name = smt:name()
		end
		local smart_owner = smt.player_name
		string = trans("tm_random_task_11").." "..name.." ["..trans(smart_owner).."]"
	end
	return string
end

function is_recover_item_task(actor, npc)
	local npc_id = npc:id()
	local squad = db.storage[npc_id].squad_obj
	if squad == nil then
		return false
	end
	local return_item_task_entity_id = squad.random_tasks[3]
	if return_item_task_entity_id ~= nil and npc_id == squad.commander_id then
		local task = task_manager.get_task_manager():get_task_by_entity_id(return_item_task_entity_id)
		if task.target == npc_id then
			return task.state == "have_item"
		end
	end
	return false
end

function transfer_recovered_item(actor, npc)
	local squad = db.storage[npc:id()].squad_obj
	if squad == nil then
		return false
	end
	local task = task_manager.get_task_manager():get_task_by_entity_id(squad.random_tasks[3])
	task:transfer_items_looking_for(npc)
--[[
	squad.random_tasks[3] = nil -- done in task_objects.CRecoverItemTask:deactivate_task()
	if sr_recoveritem.target_sr then
		local db_storage = db.storage
		local remembered_target = db_storage.remember_target_for_recoveritem[squad.squad_id]
		db_storage.recoveritem_table[remembered_target] = db_storage[remembered_target].object
		db_storage.remember_target_for_recoveritem[squad.squad_id] = nil
		sr_recoveritem.target_sr = nil
	end
]]
end

function rewarder_has_reward(npc) --, actor)

	local tm = task_manager.get_task_manager()
	local community = nil
	local npc_id = npc:id()

	for k, v in pairs (tm.rewarders) do
		if v == npc_id then
			community = k
			break
		end
	end

	if community == nil then
		return false
	end

	if tm.rewards[community] == nil then
		return false
	end

	return #tm.rewards[community] > 0
end

function rewarder_hasnt_reward(npc) --, actor)

	local tm = task_manager.get_task_manager()
	local community = nil
	local npc_id = npc:id()

	for k, v in pairs (tm.rewarders) do
		if v == npc_id then
			community = k
			break
		end
	end

	if community == nil then
		return true
	end

	if tm.rewards[community] == nil then
		return true
	end

	return #tm.rewards[community] == 0
end

function rewarder_give_reward(npc) --, actor, p1, p2)

	local tm = task_manager.get_task_manager()
	local community = nil
	local npc_id = npc:id()

	for k, v in pairs (tm.rewarders) do
		if v == npc_id then
			community = k
			break
		end
	end

	local amount_money = 0
	local ancillary_item_table = {}

	for k, v in pairs (tm.rewards[community]) do
		local reward_money_amount = v.money
		if reward_money_amount ~= nil then
			if type(reward_money_amount) == "number" then
				amount_money = amount_money + reward_money_amount
			else
				abort("[task_dialogs.rewarder_give_reward]: reward money amount is not a number!")
			end
		else
			local reward_item_name = v.item
			if reward_item_name ~= nil then
				if ancillary_item_table[reward_item_name] == nil then
					ancillary_item_table[reward_item_name] = 1
				else
					ancillary_item_table[reward_item_name] = ancillary_item_table[reward_item_name] + 1
				end
			end
		end
	end

	if amount_money ~= 0 then
		dialogs.relocate_money(npc, amount_money, "in")
	end

	for reward_item_name, reward_item_count in pairs (ancillary_item_table) do
		dialogs.relocate_item_section(npc, reward_item_name, "in", reward_item_count)
	end

	tm.rewards[community] = {}
end

--[[
function init_faction_task(actor, npc, p1, p2)

	local tm = task_manager.get_task_manager()
	local community = nil
	local npc_id = npc:id()

	for k, v in pairs (tm.taskers) do
		if v == npc_id then
			community = k
		end
		break
	end

	local faction = sim_board.get_sim_board().players[community]
	if faction == nil then
		abort("Faction %s doesnt exist", community)
	end

	faction:init_faction_task()
end

function faction_hasnt_task()	--npc, actor)
	return false
end

function faction_has_task()	--npc, actor)
	return true
end

function faction_show_task(npc, actor)

	local tm = task_manager.get_task_manager()
	local community = nil
	local npc_id = npc:id()

	for k, v in pairs (tm.taskers) do
		if v == npc_id then
			community = k
		end
		break
	end

	local faction = sim_board.get_sim_board().players[community]
	if faction == nil then
		abort("Faction %s doesnt exist", community)
	end

	for k, v in pairs (faction.random_tasks) do
		if k > 5 then
			return
		end
		db.actor:give_talk_message2(trans(v.id), trans(v.id), "ui_iconsTotal_locations", "iconed_trade_info")
	end
end

function faction_has_prior(actor, npc, p1, p2, p3)

	local tm = task_manager.get_task_manager()
	local community = nil
	local npc_id = npc:id()

	for k, v in pairs (tm.taskers) do
		if v == npc_id then
			community = k
		end
		break
	end

	local faction = sim_board.get_sim_board().players[community]
	if faction == nil then
		abort("Faction %s doesnt exist", community)
	end

	return faction.random_tasks[tonumber(p3)-10] ~= nil
end

function faction_give_prior(npc, actor, p1, p2)

	local tm = task_manager.get_task_manager()
	local community = nil
	local npc_id = npc:id()

	for k, v in pairs (tm.taskers) do
		if v == npc_id then
			community = k
		end
		break
	end

	local faction = sim_board.get_sim_board().players[community]
	if faction == nil then
		abort("Faction %s doesnt exist", community)
	end

	faction.random_tasks[tonumber(p2)-20]:give_task(community)
end
]]

function mechanic_has_tasks(actor, npc)
	local tm = task_manager.get_task_manager()
	tm:select_find_upgrade_task(npc, npc:character_community())
	for k, task in pairs (tm.inited_find_upgrade_tasks[npc:id()]) do
		if task.status == "normal" then
			return true
		end
	end
	return false
end

function mechanic_show_tasks(npc) --, actor, dialog, phrase)
--	local news_text = ""
	local task_table = task_manager.get_task_manager().inited_find_upgrade_tasks[npc:id()]
	for k, task in pairs (task_table) do
		if task.status == "normal" then
			local news_text = task.item_for_reward
			npc:give_talk_message2(trans("sim_find_upgrade"), news_text, "ui_iconsTotal_find_upgrade", "iconed_answer_item")
		end
	end
end

function give_find_upgrade_task(actor, npc) --, p1, p2)
	local community = npc:character_community()
	local task_table = task_manager.get_task_manager().inited_find_upgrade_tasks[npc:id()]
	for k, task in pairs (task_table) do
		if task.status == "normal" then
			task:give_task(community)
		end
	end
end

function is_find_upgrade_task(actor, npc)
	local task_table = task_manager.get_task_manager().inited_find_upgrade_tasks[npc:id()]
	if task_table == nil then
		return false
	end
	for k, task in pairs (task_table) do
		if task.state == "have_item" then
			return true
		end
	end
	return false
end

function transfer_find_upgrade(actor, npc)
	local task_table = task_manager.get_task_manager().inited_find_upgrade_tasks[npc:id()]
	for k, task in pairs (task_table) do
		if task.state == "have_item" then
			task:transfer_items_looking_for(npc)
--			task:finish_task() -- now done above
		end
	end
end

--[[
function mechanic_need_flash_card(actor, npc)
	local npc_name = npc:name()
	local se_obj = alife():object(npc_name)
	local npc_id = se_obj:profile_name()
	flash_card_ini = ini_file("misc\\stalkers_flash_info.ltx")
	if not flash_card_ini:section_exist(npc_id) then
		return false
	end
	flash_card_table = {}
	for i=0, flash_card_ini:line_count(npc_id)-1 do
		result, section, value = flash_card_ini:r_line(npc_id, i, "", "")
		local temp_table = utils.parse_names(value)
		flash_card_table[i+1] = {}
		flash_card_table[i+1]["item"] = section
		flash_card_table[i+1]["price"] = temp_table[1]
		flash_card_table[i+1]["info"] = temp_table[2]
	end
	for k,v in pairs(flash_card_table) do
		if actor:object(v.item) ~= nil then
			return true
		end
	end
	return false
end

function mechanic_proposition(npc, actor, dialog, phrase)
	local news_caption = ""
	local news_text = ""
	for k,v in pairs(flash_card_table) do
		if actor:object(v.item) ~= nil then
			local name = trans(system_ini():r_string(v.item, "inv_name"))
			local price = v.price
			news_caption = name
			news_text = price..trans("st_rubles")
			npc:give_talk_message2(news_text, "ui_iconsTotal_lost_money", "iconed_answer_item")
		end
	end
end

function mechanic_proposition_answer_phrase(npc, dialog_name, phrase_id)
	local string = ""
	local i = phrase_id-10
	if flash_card_table[i]~=nil then
		if db.actor:object(flash_card_table[i].item) ~= nil then
			local name = trans(system_ini():r_string(flash_card_table[i].item, "inv_name"))
			local price = flash_card_table[i].price
			string = name.."/"..price.." RU"
		end
	end
	return string
end

function mechanic_pay_flash_card(npc, actor, p1, p2)
	local i = p2 - 20
	actor:give_info_portion(flash_card_table[i].info)
	dialogs.relocate_item_section(npc, flash_card_table[i].item, "out")
	dialogs.relocate_money(npc, tonumber(flash_card_table[i].price), "in")
end
]]