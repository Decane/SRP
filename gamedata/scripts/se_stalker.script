-- DC170520: Optimization.

local cse_alife_human_stalker_update = cse_alife_human_stalker.update

class "se_stalker" (cse_alife_human_stalker)

--------------------

function se_stalker:__init (section) super (section)
	self.ini                                  = nil
--	self.ini_initialized                      = false
--	self.smart_terrain_conditions             = nil
--	self.smart_terrain_conditions_initialized = false
--	self.job_online                           = nil
--	self.job_online_condlist                  = nil
	self.death_droped                         = false
	self.squad_id                             = nil
--	self.m_registred                          = false
	self.sim_forced_online                    = false
	self.treasure_processed                   = 0 -- SRP: 1 means true, other values (should be only 0 or 2) mean false
end

--------------------
--[[
function se_stalker:get_ini()
	if not self.ini_initialized then
		local ini = self:spawn_ini()
		self.ini = ini
		self.ini_initialized = true
		if ini:section_exist("spawner") then
			self.spawner = xr_logic.parse_condlist(db.actor, "spawner", "cond", ini:r_string("spawner", "cond"))
		end
	end
end
]]
--------------------

function se_stalker:can_switch_offline()

	if xr_surge_hide.stalker_can_switch_offline(self) then
		return true
	end

	if self.sim_forced_online == true then
		return false
	end
--[[
	if self.job_online_condlist ~= nil then
		return xr_logic.pick_section_from_condlist(db.actor_proxy, self, self.job_online) ~= true
	end
]]
	return cse_alife_human_stalker.can_switch_offline(self)
end

--------------------

function se_stalker:can_switch_online()

	if xr_surge_hide.stalker_can_switch_offline(self) then
		return false
	end

	if self.sim_forced_online == true then
		return true
	end
--[[
	if self.job_online_condlist ~= nil then
		return xr_logic.pick_section_from_condlist(db.actor_proxy, self, self.job_online) == true
	end
]]
	if self.ini == nil or self.spawner == nil then
		return cse_alife_human_stalker.can_switch_online(self)
	end

	if db.actor ~= nil and db.actor:alive() == false then
		return self.online
	end

	if self.online == false then
		return xr_logic.pick_section_from_condlist(db.actor, self, self.spawner) ~= nil and cse_alife_human_stalker.can_switch_online(self)
	else
		return xr_logic.pick_section_from_condlist(db.actor, self, self.spawner) ~= nil
	end
end

function se_stalker:switch_online()
	cse_alife_human_stalker.switch_online(self)
	if self.squad_id ~= nil then
		local squad = self.board.squads[self.squad_id]
		if squad ~= nil then
			squad:switch_online(true, self.id)
		end
	end
end

function se_stalker:switch_offline()
	cse_alife_human_stalker.switch_offline(self)
	if self.squad_id ~= nil then
		local squad = self.board.squads[self.squad_id]
		if squad ~= nil then
			squad:switch_online(false, self.id)
		end
	end
end

--------------------

function se_stalker:STATE_Write(packet)

	cse_alife_human_stalker.STATE_Write (self, packet)

	packet:w_u8(self.treasure_processed) -- SRP

--	dbglog("Saved self.treasure_processed = %d for %s", self.treasure_processed, self:name())
--[[
	if self.job_online == true then
		packet:w_u8(0)
	elseif self.job_online == false then
		packet:w_u8(1)
	elseif self.job_online == nil then
		packet:w_u8(2)
	else
		packet:w_u8(3)
		packet:w_stringZ(self.job_online_condlist)
	end
]]
	packet:w_bool(self.death_droped)

	packet:w_stringZ(self.squad_id or "nil")

	packet:w_bool(self.sim_forced_online)
end

--------------------

function se_stalker:STATE_Read(packet, size)

	cse_alife_human_stalker.STATE_Read (self, packet, size)

	self.treasure_processed = packet:r_u8() -- SRP

--	dbglog("Loaded self.treasure_processed = %d for %s", self.treasure_processed, self:name())
--[[
	local t = packet:r_u8()

	if t == 0 then
		self.job_online = true
	elseif t == 1 then
		self.job_online = false
	elseif t == 2 then
		self.job_online = nil
	else
		self.job_online_condlist = packet:r_stringZ()
		self.job_online = xr_logic.parse_condlist(nil, "se_stalker:STATE_Read", "job_online", self.job_online_condlist)
	end
]]
	self.death_droped = packet:r_bool()

--	if self.script_version >= 7 then -- defined as 8 via 'current_server_entity_version' in system.ltx
		self.squad_id = packet:r_stringZ()
		if self.squad_id == "nil" then -- or tostring(self.squad_id) == "0" or tostring(self.squad_id) == "" then
			self.squad_id = nil
		end
--	end

--	if self.script_version >= 8 then
		self.sim_forced_online = packet:r_bool()
--	end
end

--------------------

function se_stalker:on_before_register()
--	self:fill_exclusives()
	local ini = self:spawn_ini()
	self.ini = ini
	if ini:section_exist("spawner") then
		self.spawner = xr_logic.parse_condlist(nil, nil, nil, ini:r_string("spawner", "cond"))
	end
end

--------------------

function se_stalker:on_register()

	cse_alife_human_stalker.on_register(self)

	local board = sim_board.get_sim_board()
	self.board = board

	local tm = task_manager.get_task_manager()
	self.tm = tm

--	self.m_registred = true

	local obj_ini = self.ini

	if obj_ini:section_exist("task_manager") then

		local reward = utils.cfg_get_string(obj_ini, "task_manager", "reward", self, false, "", nil)
		if reward ~= nil then
			tm:register_rewarder(self.id, reward)
		end

		local task = utils.cfg_get_string(obj_ini, "task_manager", "task", self, false, "", nil)
		if task ~= nil then
			tm:register_tasker(self.id, task)
		end
	end

	self:brain():can_choose_alife_tasks(false)

	local smart = utils.cfg_get_string(obj_ini, "logic", "smart_terrain", self, false, "", "")
	local smart_obj = board:get_smart_by_name(smart)

	if smart_obj == nil then
		return
	end

	_G.sim:object(smart_obj.id):register_npc(self)
end

--------------------

function se_stalker:on_unregister()
	local strn_id = self:smart_terrain_id()
	if strn_id ~= 65535 then
		local smart = _G.sim:object(strn_id)
		if smart ~= nil then
			smart:unregister_npc(self)
		end
	end
	cse_alife_human_stalker.on_unregister(self)
end

--------------------

function se_stalker:on_spawn()
	cse_alife_human_stalker.on_spawn(self)
end

--------------------

function se_stalker:on_death(killer)
	cse_alife_human_stalker.on_death(self, killer)
	smart_terrain.on_death(self)
	if self.squad_id ~= nil then
		local squad = self.board.squads[self.squad_id]
		if squad == nil then
			abort("[se_stalker.se_stalker:on_death]: There is no squad with ID '%s'.", self.squad_id)
		end
		squad:on_npc_death(self, killer.id)
	end
end

--------------------
--[[
function se_stalker:fill_exclusives()
	self:get_ini()
	self.smart_terrain_conditions = smart_terrain.read_smart_terrain_conditions(self)
	if self.smart_terrain_conditions then
		for name, condlist in pairs (self.smart_terrain_conditions) do
			smart_terrain.exclusives[name] = (smart_terrain.exclusives[name] or 0) + 1
		end
	end
end
]]
function se_stalker:update()
	cse_alife_human_stalker_update(self)
	if self.squad_id ~= nil then
		local squad = self.board.squads[self.squad_id]
		if squad ~= nil and squad.commander_id == self.id then
			squad:update()
		end
	end
end

--------------------

class "se_trader" (cse_alife_trader)

function se_trader:__init (section) super (section)
end

function se_trader:keep_saved_data_anyway()
	return true
end