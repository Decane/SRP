local def_ignore_distance               = 150
local def_ignore_distance_grenade       = 15
local def_ignore_distance_corpse        = 10
local def_ignore_distance_hit           = 150
local def_ignore_distance_sound         = 50

local def_danger_inertion_time_grenade  = 20000
local def_danger_inertion_time_corpse   = 0
local def_danger_inertion_time_hit      = 60000
local def_danger_inertion_time_sound    = 15000
local def_danger_inertion_time_ricochet = 30000

local always_ignore_danger_from         = {m_car = true}

local danger_type_attack_sound          = danger_object.attack_sound
local danger_type_attacked              = danger_object.attacked
local danger_type_bullet_ricochet       = danger_object.bullet_ricochet
local danger_type_enemy_sound           = danger_object.enemy_sound
local danger_type_entity_attacked       = danger_object.entity_attacked
local danger_type_entity_corpse         = danger_object.entity_corpse
local danger_type_entity_death          = danger_object.entity_death
local danger_type_grenade               = danger_object.grenade
local game_object_enemy                 = game_object.enemy
local stalker_ids_property_danger       = stalker_ids.property_danger

----------------------------------------------------------------------------------------------------------------------
-- EVALUATORS
----------------------------------------------------------------------------------------------------------------------

class "evaluator_danger" (property_evaluator)

function evaluator_danger:__init(storage) super()
--	self.a = storage
	self.npc_st = db.storage[storage.npc:id()]
	self.faction = storage.npc:character_community()
end

function evaluator_danger:evaluate()

	local npc = self.object
--[[
	if self.mgr == nil then
		self.mgr = npc:motivation_action_manager()
	end
]]
	local danger = npc:best_danger()

	if danger == nil then
		self.danger_time = nil
		return false
	end

	local danger_obj
	local danger_type = danger:type()

	if danger_type == danger_type_grenade then
		danger_obj = danger:object()
	else
		danger_obj = danger:dependent_object() or danger:object()
	end

	if danger_obj == nil then
		return false
	end

	if danger_obj:id() == 0 and (danger_type == danger_type_attack_sound or danger_type == danger_type_bullet_ricochet) then -- 0 = actor ID
		if npc:relation(db.actor) ~= game_object_enemy then -- and npc:best_enemy() == nil -- no danger if non-hostile actor fires gun, now even when NPC is engaging enemy
			return false
		end
	end

	if danger_obj:character_community() == self.faction then
--		if danger_obj:id() ~= 0 or npc:relation(db.actor) ~= game_object_enemy then -- always true in vanilla; the actor's faction is "actor_"-prefixed, which no NPC shares
			return false
--		end
	end

	if danger_type == danger_type_entity_corpse then
		return false
	end

	if not danger_obj:alive() then
		return false -- no danger if danger_obj is a dead creature; this check should be rendered unnecessary by the above, but isn't
	end

	if danger_type == danger_type_grenade then
		if self.faction == "zombied" then
			return false
		end
--		if self.a.ignore_types["grenade"] == true then -- use the ignore_distance parameters instead of 'ignore_types' for danger ignorance via NPC script logic
--			return false
--		end
	end
--[[
	if danger_type == danger_type_entity_attacked or danger_type == danger_type_attacked then
		if self.a.ignore_types["hit"] == true then
			return false
		end
	elseif danger_type == danger_type_enemy_sound or
		danger_type == danger_type_bullet_ricochet or -- SRP addition: ignore bullet ricochets if set to ignore sounds
		danger_type == danger_type_attack_sound or
		danger_type == danger_type_entity_death then
		if self.a.ignore_types["sound"] == true then
			return false
		end
	end
]]
	local npc_st = self.npc_st

	if not xr_combat_ignore.is_enemy(npc, danger_obj, npc_st.combat_ignore, true) then
		return false
	end

	if always_ignore_danger_from[danger_obj:section()] then -- moved down for performance; there aren't many m_cars in vanilla
		return false
	end

	if self.danger_time then
		self.danger_time = danger:time()
		local passed_time = time_global() - self.danger_time
		return check_danger_inertion_time(npc, danger, passed_time)
	end

	if check_danger_distance(npc, danger) == false then
		return false
	end

	if npc_st.active_sector ~= nil then
		if sr_danger.check_danger_position(danger:position(), npc_st.active_sector) == false then
			return false
		end
	end
--[[
	if xr_gulag.is_info_restricted(npc:id(), danger:position()) then -- nv130303 test is never true in vanilla
		return false
	end
]]
	if npc_st.wounded then
		local wounded_state = npc_st.wounded.wound_manager.state
		if wounded_state ~= nil and wounded_state ~= "nil" then -- xr_wounded.is_heavy_wounded_by_id(npc:id())
			return false
		end
	end

	if npc_st.active_scheme == "camper" then
		if danger_type == danger_type_grenade then
			self.danger_time = danger:time()
			return true
		end
		return false
	else
		self.danger_time = danger:time()
		return true
	end
end

----------------------------------------------------------------------------------------------------------------------
-- BINDER
----------------------------------------------------------------------------------------------------------------------

function add_to_binder(object, ini, scheme, section, storage)
	local manager = object:motivation_action_manager()
	manager:remove_evaluator(stalker_ids_property_danger)
	manager:add_evaluator(stalker_ids_property_danger, this.evaluator_danger(storage))
end

function reset_danger(npc, scheme, npc_st, section) -- scheme is either "nil" or a valid scheme name per xr_logic.activate_by_section()

	local ini = npc_st.ini
	local st = npc_st.danger
	local danger_section

	if scheme ~= "nil" then
		danger_section = utils.cfg_get_string(ini, section, "danger", npc, false, "")
	end
--[[
	st.ignore_types = {} -- define an appropriate ignore_distance parameter with value 0 in NPC logic if you want full danger ignorance - don't use the 'ignore_types' parameter

	if danger_section then
		local t = parse_names(utils.cfg_get_string(ini, danger_section, "ignore_types", npc, false, "", ""))
		for k, v in pairs (t) do
			st.ignore_types[v] = true
		end
	end
]]
	if danger_section and ini:section_exist(danger_section) then

		local get_number                 = utils.cfg_get_number

		st.ignore_distance               = get_number(ini, danger_section, "ignore_distance",               nil, false, def_ignore_distance)
		st.ignore_distance_grenade       = get_number(ini, danger_section, "ignore_distance_grenade",       nil, false, def_ignore_distance_grenade)
		st.ignore_distance_corpse        = get_number(ini, danger_section, "ignore_distance_corpse",        nil, false, def_ignore_distance_corpse)
		st.ignore_distance_hit           = get_number(ini, danger_section, "ignore_distance_hit",           nil, false, def_ignore_distance_hit)
		st.ignore_distance_sound         = get_number(ini, danger_section, "ignore_distance_sound",         nil, false, def_ignore_distance_sound)

		st.danger_inertion_time_grenade  = get_number(ini, danger_section, "danger_inertion_time_grenade",  nil, false, def_danger_inertion_time_grenade)
		st.danger_inertion_time_corpse   = get_number(ini, danger_section, "danger_inertion_time_corpse",   nil, false, def_danger_inertion_time_corpse)
		st.danger_inertion_time_hit      = get_number(ini, danger_section, "danger_inertion_time_hit",      nil, false, def_danger_inertion_time_hit)
		st.danger_inertion_time_sound    = get_number(ini, danger_section, "danger_inertion_time_sound",    nil, false, def_danger_inertion_time_sound)
		st.danger_inertion_time_ricochet = get_number(ini, danger_section, "danger_inertion_time_ricochet", nil, false, def_danger_inertion_time_ricochet)
	else
		st.ignore_distance               = def_ignore_distance
		st.ignore_distance_grenade       = def_ignore_distance_grenade
		st.ignore_distance_corpse        = def_ignore_distance_corpse
		st.ignore_distance_hit           = def_ignore_distance_hit
		st.ignore_distance_sound         = def_ignore_distance_sound

		st.danger_inertion_time_grenade  = def_danger_inertion_time_grenade
		st.danger_inertion_time_corpse   = def_danger_inertion_time_corpse
		st.danger_inertion_time_hit      = def_danger_inertion_time_hit
		st.danger_inertion_time_sound    = def_danger_inertion_time_sound
		st.danger_inertion_time_ricochet = def_danger_inertion_time_ricochet
	end
end

function check_danger_inertion_time(npc, danger, passed_time)

	local danger_settings = db.storage[npc:id()].danger
	local danger_type = danger:type()

	if danger_settings ~= nil then
		if danger_type == danger_type_grenade then
			if danger_settings.danger_inertion_time_grenade <= passed_time then
				return false
			end
		elseif danger_type == danger_type_entity_corpse then
			if danger_settings.danger_inertion_time_corpse <= passed_time then
				return false
			end
		elseif danger_type == danger_type_entity_attacked
		or danger_type == danger_type_attacked then
			if danger_settings.danger_inertion_time_hit <= passed_time then
				return false
			end
		elseif danger_type == danger_type_enemy_sound
		or danger_type == danger_type_attack_sound
		or danger_type == danger_type_entity_death then
			if danger_settings.danger_inertion_time_sound <= passed_time then
				return false
			end
		elseif danger_type == danger_type_bullet_ricochet then
			if danger_settings.danger_inertion_time_ricochet <= passed_time then
				return false
			end
		end
	else
		if danger_type == danger_type_grenade then
			if def_danger_inertion_time_grenade <= passed_time then
				return false
			end
		elseif danger_type == danger_type_entity_corpse then
			if def_danger_inertion_time_corpse <= passed_time then
				return false
			end
		elseif danger_type == danger_type_entity_attacked
		or danger_type == danger_type_attacked then
			if def_danger_inertion_time_hit <= passed_time then
				return false
			end
		elseif danger_type == danger_type_enemy_sound
		or danger_type == danger_type_attack_sound
		or danger_type == danger_type_entity_death then
			if def_danger_inertion_time_sound <= passed_time then
				return false
			end
		elseif danger_type == danger_type_bullet_ricochet then
			if def_danger_inertion_time_ricochet <= passed_time then
				return false
			end
		end
	end

	return true
end

function check_danger_distance(npc, danger)

	local danger_settings = db.storage[npc:id()].danger
--	local danger_distance_sqr = danger:position():distance_to_sqr(npc:position())
	local distance_to_danger = danger:position():distance_to(npc:position()) -- nv130412 also changed in reset_danger()

	if danger_settings ~= nil then
		if distance_to_danger >= danger_settings.ignore_distance then
			return false
		end
		local danger_type = danger:type()
		if danger_type == danger_type_grenade then
			if distance_to_danger >= danger_settings.ignore_distance_grenade then
				return false
			end
		elseif danger_type == danger_type_entity_corpse then
			if distance_to_danger >= danger_settings.ignore_distance_corpse then
				return false
			end
		elseif danger_type == danger_type_entity_attacked
		or danger_type == danger_type_attacked then
			if distance_to_danger >= danger_settings.ignore_distance_hit then
				return false
			end
		elseif danger_type == danger_type_enemy_sound
		or danger_type == danger_type_attack_sound
		or danger_type == danger_type_bullet_ricochet -- SRP addition
		or danger_type == danger_type_entity_death then
			if distance_to_danger >= danger_settings.ignore_distance_sound then
				return false
			end
		end
	else
		if distance_to_danger >= def_ignore_distance then
			return false
		end
		local danger_type = danger:type()
		if danger_type == danger_type_grenade then
			if distance_to_danger >= def_ignore_distance_grenade then
				return false
			end
		elseif danger_type == danger_type_entity_corpse then
			if distance_to_danger >= def_ignore_distance_corpse then
				return false
			end
		elseif danger_type == danger_type_entity_attacked
		or danger_type == danger_type_attacked then
			if distance_to_danger >= def_ignore_distance_hit then
				return false
			end
		elseif danger_type == danger_type_enemy_sound
		or danger_type == danger_type_attack_sound
		or danger_type == danger_type_bullet_ricochet -- SRP addition
		or danger_type == danger_type_entity_death then
			if distance_to_danger >= def_ignore_distance_sound then
				return false
			end
		end
	end

	return true
end