function allow_break_dialog(first_speaker, second_speaker)

	local npc = who_is_npc(first_speaker, second_speaker)

	if npc:clsid() == clsid.script_trader then
		return false
	end

	local st = db.storage[npc:id()].meet

	return st == nil or st.allow_break ~= false
end

function break_dialog(first_speaker, second_speaker)
	first_speaker:stop_talk()
	second_speaker:stop_talk()
end

function is_wounded(first_speaker, second_speaker)
	local npc = who_is_npc(first_speaker, second_speaker)
	local st_wounded = db.storage[npc:id()].wounded
	return (st_wounded == nil or st_wounded.wound_manager.can_use_medkit ~= true) and xr_wounded.is_wounded(npc)
end

function is_not_wounded(first_speaker, second_speaker)
	return not this.is_wounded(first_speaker, second_speaker)
end

function actor_have_medkit()
	local actor = db.actor
	return actor:object("medkit") ~= nil or actor:object("medkit_army") ~= nil or actor:object("medkit_scientic") ~= nil
end

function actor_hasnt_medkit()
	return actor_have_medkit() == false
end

function actor_have_bandage()
	return db.actor:object("bandage") ~= nil
end

function transfer_medkit(first_speaker, second_speaker)

	local actor = db.actor

	if actor:object("medkit") ~= nil then
		relocate_item_section_from_actor(first_speaker, second_speaker, "medkit")
	elseif actor:object("medkit_army") ~= nil then
		relocate_item_section_from_actor(first_speaker, second_speaker, "medkit_army")
	else
		relocate_item_section_from_actor(first_speaker, second_speaker, "medkit_scientic")
	end

	local npc = who_is_npc(first_speaker, second_speaker)

	xr_wounded.unlock_medkit(npc)

	if npc:relation(actor) ~= game_object.enemy then
		npc:set_relation(game_object.friend, actor)
	end

	actor:change_character_reputation(10)
end

function transfer_bandage(first_speaker, second_speaker)
	relocate_item_section_from_actor(first_speaker, second_speaker, "bandage")
	local npc = who_is_npc(first_speaker, second_speaker)
	npc:set_relation(game_object.friend, db.actor)
end

function relocate_item_section(npc, section, type, amount)
	local actor = db.actor
	if actor then
		if not amount then
			amount = 1
		end
		if type == "in" then
			local sim = _G.sim
			local vec = vector()
			for i = 1, amount do
				sim:create(section, vec, 0, 0, 0) -- 0 = actor ID
			end
		elseif npc and type == "out" then
			for i = 1, amount do
				actor:transfer_item(actor:object(section), npc)
			end
		end
		if ammo_section[section] == true then
			local box_size = system_ini():r_s32(section, "box_size")
			amount = amount * box_size
		end
		news_manager.relocate_item(actor, type, section, amount)
	end
end

function relocate_money(npc, num, type)
	local actor = db.actor
	if actor then
		if type == "in" then
			actor:give_money(num)
--			game_stats.money_quest_update(num)
			xr_statistic.inc_recieved_money_counter(num)
		elseif npc and type == "out" then
			actor:transfer_money(num, npc)
--			game_stats.money_quest_update(-num)
			xr_statistic.inc_spent_money_counter(num)
		end
		news_manager.relocate_money(actor, type, num)
	end
end

-----------------------------------------------------------------------------------
-- DIALOG ALLOWED
-----------------------------------------------------------------------------------

function allow_guide_dialog(first_speaker, second_speaker, id)
	local npc = who_is_npc(first_speaker, second_speaker)
	local section = db.storage[npc:id()].active_section
	return section ~= nil and string.find(section, "conductor", 1) ~= nil and not this.is_wounded(first_speaker, second_speaker, id)
end

-----------------------------------------------------------------------------------
-- Community
-----------------------------------------------------------------------------------

function actor_in_dolg()
	return db.actor:character_community() == "actor_dolg"
end

function actor_not_in_dolg()
	return db.actor:character_community() ~= "actor_dolg"
end

function actor_set_dolg()
	sim_board.get_sim_board():set_actor_community("dolg")
end

--------------------------------------------------------------------------------

function actor_in_freedom()
	return db.actor:character_community() == "actor_freedom"
end

function actor_not_in_freedom()
	return db.actor:character_community() ~= "actor_freedom"
end

function actor_set_freedom()
	sim_board.get_sim_board():set_actor_community("freedom")
end

--------------------------------------------------------------------------------

function actor_in_bandit()
	return db.actor:character_community() == "actor_bandit"
end

function actor_not_in_bandit()
	return db.actor:character_community() ~= "actor_bandit"
end

function actor_set_bandit()
	sim_board.get_sim_board():set_actor_community("bandit")
end

--------------------------------------------------------------------------------

function actor_in_stalker()
	return db.actor:character_community() == "actor_stalker"
end

function actor_not_in_stalker()
	return db.actor:character_community() ~= "actor_stalker"
end

function actor_set_stalker()
	sim_board.get_sim_board():set_actor_community("stalker")
end

----------------------------------------------------------------------------------
-- Transfer functions
----------------------------------------------------------------------------------

function relocate_item_section_to_actor(first_speaker, second_speaker, section, amount)

	if not amount then
		amount = 1
	end

	local sim = _G.sim
	local vec = vector()

	for i = 1, amount do
		sim:create(section, vec, 0, 0, 0) -- 0 = actor ID
	end

	if ammo_section[section] == true then
		local box_size = system_ini():r_s32(section, "box_size")
		amount = amount * box_size
	end

	news_manager.relocate_item(db.actor, "in", section, amount)
end

function relocate_item_section_from_actor(first_speaker, second_speaker, section)
	local npc = who_is_npc(first_speaker, second_speaker)
	local actor = db.actor
	actor:transfer_item(actor:object(section), npc)
	news_manager.relocate_item(actor, "out", section)
end

function who_is_npc(first_speaker, second_speaker)
	return 0 == second_speaker:id() and first_speaker or second_speaker -- 0 = actor ID
end

--------------------------------------------------------------------------------

local function is_pistol(t, item)

	if t.pistol then
		return
	end

	local item_clsid = item:clsid()

	if item_clsid == clsid.wpn_hpsa_s
	or item_clsid == clsid.wpn_pm_s
	or item_clsid == clsid.wpn_usp45_s
	or item_clsid == clsid.wpn_walther_s then
		t.pistol = item
	end
end

function transfer_any_pistol_from_actor(first_speaker, second_speaker)

	local actor = db.actor
	local t = {}

	actor:iterate_inventory(is_pistol, t)

	if t.pistol then
		local npc = who_is_npc(first_speaker, second_speaker)
		actor:transfer_item(t.pistol, npc)
		news_manager.relocate_item(actor, "out", t.pistol:section())
	end
end

function have_actor_any_pistol()
	local t = {}
	db.actor:iterate_inventory(is_pistol, t)
	return t.pistol ~= nil
end

--------------------------------------------------------------------------------

local function is_gun(t, item)

	if t.rifle then
		return
	end

	local item_clsid = item:clsid()

	if item_clsid == clsid.wpn_ak74_s
	or item_clsid == clsid.wpn_lr300_s
	or item_clsid == clsid.wpn_groza_s
	or item_clsid == clsid.wpn_svd_s
	or item_clsid == clsid.wpn_svu_s
	or item_clsid == clsid.wpn_val_s
	or item_clsid == clsid.wpn_vintorez_s then
		t.rifle = item
	end
end

function transfer_any_gun_from_actor(first_speaker, second_speaker)

	local actor = db.actor
	local t = {}

	actor:iterate_inventory(is_gun, t)

	if t.rifle then
		local npc = who_is_npc(first_speaker, second_speaker)
		actor:transfer_item(t.rifle, npc)
		news_manager.relocate_item(actor, "out", t.rifle:section())
	end
end

function have_actor_any_gun()
	local t = {}
	db.actor:iterate_inventory(is_gun, t)
	return t.rifle ~= nil
end

--------------------------------------------------------------------------------

local function is_shootgun(t, item)

	if t.shotgun then
		return
	end

	local item_clsid = item:clsid()

	if item_clsid == clsid.wpn_shotgun_s
	or item_clsid == clsid.wpn_bm16_s then
		t.shotgun = item
	end
end

function transfer_any_shootgun_from_actor(first_speaker, second_speaker)

	local actor = db.actor
	local t = {}

	actor:iterate_inventory(is_shootgun, t)

	if t.shotgun then
		local npc = who_is_npc(first_speaker, second_speaker)
		actor:transfer_item(t.shotgun, npc)
		news_manager.relocate_item(actor, "out", t.shotgun:section())
	end
end

function have_actor_any_shootgun()
	local t = {}
	db.actor:iterate_inventory(is_shootgun, t)
	return t.shotgun ~= nil
end

--------------------------------------------------------------------------------
-- ALIFE SUPPORT
--------------------------------------------------------------------------------

function is_csky_at_expansion_0()
	return sim_faction.get_current_expansion("csky") == "expansion_0"
end

function is_csky_at_expansion_1()
	return sim_faction.get_current_expansion("csky") == "expansion_1"
end

function is_csky_at_expansion_2()
	return sim_faction.get_current_expansion("csky") == "expansion_2"
end

function is_csky_at_expansion_3_or_higher()
	local cur_exp = sim_faction.get_current_expansion("csky")
	return cur_exp ~= "expansion_0" and cur_exp ~= "expansion_1" and cur_exp ~= "expansion_2"
end