-- File:         UI_MAIN_MENU.SCRIPT
-- Description:  Load Dialog for STALKER
-- Created:      28.10.2004
-- Lasd edit:    18.01.2006
-- Copyright:    2004 GSC Game World
-- Author:       Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
-- Version:      0.9

class "main_menu" (CUIScriptWnd)

function main_menu:__init() super()
	if _s ~= nil then
		_s.execute_user_settings()
	end
	self.mbox_mode = 0
	self:InitControls()
	self:InitCallBacks()
	xr_s.on_main_menu_on() --' Distemper 03.2008 --
end

function main_menu:__finalize()
end

local _ver_static = nil

function main_menu:InitControls()
	self:SetWndRect  (Frect():set(0,0,1024,768))
	local xml        = CScriptXmlInit()
	xml:ParseFile    ("ui_mm_main.xml")
	xml:InitStatic   ("background", self)
	self.shniaga     = xml:InitMMShniaga("shniaga_wnd", self)
	self.message_box = CUIMessageBoxEx()
	self:Register    (self.message_box, "msg_box")
	local _ver       = xml:InitStatic("static_version", self)
	local mm         = _G.main_menu.get_main_menu()
	self.version     = "v" .. mm:GetGSVer() .. " - SRP v1.1.3"
	_ver:SetText     (self.version)
	_ver_static      = _ver
end

function main_menu:Show(f)
	self.shniaga:SetVisibleMagnifier(f)
end

function main_menu:InitCallBacks()
	-- new game
	self:AddCallback("btn_novice",      ui_events.BUTTON_CLICKED,                self.OnButton_new_novice_game,     self)
	self:AddCallback("btn_stalker",     ui_events.BUTTON_CLICKED,                self.OnButton_new_stalker_game,    self)
	self:AddCallback("btn_veteran",     ui_events.BUTTON_CLICKED,                self.OnButton_new_veteran_game,    self)
	self:AddCallback("btn_master",      ui_events.BUTTON_CLICKED,                self.OnButton_new_master_game,     self)
	self:AddCallback("btn_spawn",       ui_events.BUTTON_CLICKED,                self.OnButton_load_spawn,          self)
	-- options
	self:AddCallback("btn_options",     ui_events.BUTTON_CLICKED,                self.OnButton_options_clicked,     self)
	-- load
	self:AddCallback("btn_load",        ui_events.BUTTON_CLICKED,                self.OnButton_load_clicked,        self)
	-- save
	self:AddCallback("btn_save",        ui_events.BUTTON_CLICKED,                self.OnButton_save_clicked,        self)
	-- multiplayer
	self:AddCallback("btn_multiplayer", ui_events.BUTTON_CLICKED,                self.OnButton_multiplayer_clicked, self)
	-- quit
	self:AddCallback("btn_quit",        ui_events.BUTTON_CLICKED,                self.OnButton_quit_clicked,        self)
	self:AddCallback("btn_quit_to_mm",  ui_events.BUTTON_CLICKED,                self.OnButton_disconnect_clicked,  self)
	self:AddCallback("btn_ret",         ui_events.BUTTON_CLICKED,                self.OnButton_return_game,         self)
	self:AddCallback("btn_lastsave",    ui_events.BUTTON_CLICKED,                self.OnButton_last_save,           self)
	self:AddCallback("btn_credits",     ui_events.BUTTON_CLICKED,                self.OnButton_credits_clicked,     self)
	-- message box
	self:AddCallback("msg_box",         ui_events.MESSAGE_BOX_OK_CLICKED,        self.OnMsgOk,                      self)
	self:AddCallback("msg_box",         ui_events.MESSAGE_BOX_CANCEL_CLICKED,    self.OnMsgCancel,                  self)
	self:AddCallback("msg_box",         ui_events.MESSAGE_BOX_YES_CLICKED,       self.OnMsgYes,                     self)
	self:AddCallback("msg_box",         ui_events.MESSAGE_BOX_NO_CLICKED,        self.OnMsgNo,                      self)
	self:AddCallback("msg_box",         ui_events.MESSAGE_BOX_QUIT_GAME_CLICKED, self.OnMessageQuitGame,            self)
	self:AddCallback("msg_box",         ui_events.MESSAGE_BOX_QUIT_WIN_CLICKED,  self.OnMessageQuitWin,             self)
end

function main_menu:OnMsgOk()
	self.mbox_mode = 0
end

function main_menu:OnMsgCancel()
	self.mbox_mode = 0
end

local function LoadLastSave()
	local console = get_console()
	console:execute("main_menu off")
	console:execute("load_last_save") -- returns nothing, can't programmatically tell if succeeds or fails
--[[
	-- The code below would always load the latest save. If the one tracked by the engine were deleted,
	-- the next one down would be loaded instead. Alas, always loading the most recent save would break
	-- loading the last loaded savegame if that isn't also the most recent.

	local flist = getFS():file_list_open_ex("$game_saves$", bit_or(FS.FS_ListFiles, FS.FS_RootOnly), "*.sav")
	if flist:Size() == 0 then
		dbglog("No save files found, can't load last save")
		return
	end
	flist:Sort(FS.FS_sort_by_modif_down)
	local newest = flist:GetAt(0)
	local fname = string.sub(newest:NameFull(), 1, -5)
	if valid_saved_game(fname) then
		bind_stalker.quitting_game = true
		console:execute("load " .. fname)
	else
		dbglog("Last save '%s' is invalid, can't load it", fname)
	end
]]
end

function main_menu:OnMsgYes()
	if self.mbox_mode == 1 then
		LoadLastSave()
	end
	self.mbox_mode = 0
end

function main_menu:OnMsgNo()
	self.mbox_mode = 0
end

function main_menu:OnButton_last_save()
	if alife() == nil then
		LoadLastSave()
		return
	end
	local actor = db.actor
	if actor ~= nil and actor:alive() == false then
		LoadLastSave()
		return
	end
	self.mbox_mode = 1
	self.message_box:InitMessageBox("message_box_confirm_load_save")
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnButton_credits_clicked()
	game.start_tutorial("credits_seq")
end

function main_menu:OnButton_quit_clicked()
	self.message_box:InitMessageBox("message_box_quit_windows")
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnButton_disconnect_clicked()
	self.message_box:InitMessageBox("message_box_quit_game")
	if level.game_id() ~= 1 then
		self.message_box:SetText("ui_mm_disconnect_message") -- MultiPlayer
	else
		self.message_box:SetText("ui_mm_quit_game_message") -- SinglePlayer
	end
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnMessageQuitGame()
	bind_stalker.quitting_game = true
	_ver_static:SetText("Disconnecting...")
	local console = get_console()
	console:execute("disconnect")
end

function main_menu:OnMessageQuitWin()
	bind_stalker.quitting_game = true
	_ver_static:SetText("Quitting...")
	local console = get_console()
	console:execute("quit")
end

function main_menu:OnButton_return_game()
--	log("333")
	local console = get_console()
	console:execute("main_menu off")
	xr_s.on_main_menu_off() --' Distemper 03.2008 --
end

function main_menu:OnButton_new_novice_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_novice")
	self:StartGame()
end

function main_menu:OnButton_new_stalker_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_stalker")
	self:StartGame()
end

function main_menu:OnButton_new_veteran_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_veteran")
	self:StartGame()
end

function main_menu:OnButton_new_master_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_master")
	self:StartGame()
end

function main_menu:StartGame()
	local console = get_console()
	if alife() ~= nil then
		console:execute("disconnect")
	end
	device():pause(false)
	console:execute("start server(all/single/alife/new) client(localhost)")
	console:execute("main_menu off")
end

function main_menu:OnButton_load_spawn()
	if self.spawn_dlg == nil then
		self.spawn_dlg = ui_spawn_dialog.spawn_dialog()
		self.spawn_dlg.owner = self
	end
	self:GetHolder():start_stop_menu(self.spawn_dlg, true)
	self:GetHolder():start_stop_menu(self, true)
	self:Show(false)
end

function main_menu:OnButton_save_clicked()
	if self.save_dlg == nil then
		self.save_dlg = ui_save_dialog.save_dialog()
		self.save_dlg.owner = self
	end
	self.save_dlg:FillList()
	self:GetHolder():start_stop_menu(self.save_dlg, true)
	self:GetHolder():start_stop_menu(self, true)
	self:Show(false)
end

function main_menu:OnButton_options_clicked()
	if self.opt_dlg == nil then
		self.opt_dlg = ui_mm_opt_main.options_dialog()
		self.opt_dlg.owner = self
	end
	self.opt_dlg:UpdateControls()
	self:GetHolder():start_stop_menu(self.opt_dlg, true)
	self:GetHolder():start_stop_menu(self, true)
	self:Show(false)
end

function main_menu:OnButton_load_clicked()
	if self.load_dlg == nil then
		self.load_dlg = ui_load_dialog.load_dialog()
		self.load_dlg.owner = self
	end
	self.load_dlg:FillList()
	self:GetHolder():start_stop_menu(self.load_dlg, true)
	self:GetHolder():start_stop_menu(self, true)
	self:Show(false)
end

function main_menu:OnButton_multiplayer_clicked()
	if self.mp_dlg == nil then
		self.mp_dlg = ui_mp_main.mp_main()
		self.mp_dlg.owner = self
	end
	self.mp_dlg:UpdateControls()
	self:GetHolder():start_stop_menu(self.mp_dlg, true)
	self:GetHolder():start_stop_menu(self, true)
	self.mp_dlg:on_show_script()
	self:Show(false)
--	self.mp_dlg:OnBtn_Refresh()
	local console = get_console()
	console:execute("check_for_updates 0")
	self.mp_dlg:OnRadio_NetChanged()
end

function main_menu:Dispatch(cmd, param) -- virtual function
	if cmd == 2 then
		self:OnButton_multiplayer_clicked()
	end
	return true
end

function main_menu:OnButton_save_level_clicked()

	local y, m, d, h, min, sec, ms = 0, 0, 0, 0, 0, 0, 0

	y, m, d, h, min, sec, ms = game.get_game_time():get(y, m, d, h, min, sec, ms)

	local date_time = string.format("_%d-%02d-%02d_%02d%02d", y, m, d, h, min)
	local console = get_console()

	console:execute("main_menu off")
	console:execute("save " .. level.name() .. date_time)
end

function main_menu:OnKeyboard(dik, keyboard_action) -- virtual function

	CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)

--	if bind_stalker.quitting_game then return end -- breaks keys after quit to main menu

	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		_ver_static:SetText(self.version)
		if dik == DIK_keys.DIK_ESCAPE then
			if level.present() then
				local actor = db.actor
				if (actor ~= nil and actor:alive()) or false == IsGameTypeSingle() then
					self.OnButton_return_game() --' xStream 02.2008
				end
			end
		elseif dik == DIK_keys.DIK_Q then
			self:OnMessageQuitWin()
		elseif dik == DIK_keys.DIK_R and _s ~= nil then
			if _s.execute_user_settings(true) == true then
				_ver_static:SetText("Known good user profile restored. Backup user.ltx created.")
			else
				_ver_static:SetText("Something went wrong restoring the known good user profile.")
			end
		else
			local alive_on_singleplayer_level = level.present() and db.actor ~= nil and db.actor:alive() and IsGameTypeSingle() == true
			if dik == DIK_keys.DIK_S and alive_on_singleplayer_level then
				self:OnButton_save_level_clicked()
			elseif dik == DIK_keys.DIK_F3 and alive_on_singleplayer_level then
				level.hide_indicators_safe()
				_ver_static:SetText("HUD hidden. Player invulnerable.")
			elseif dik == DIK_keys.DIK_F4 and alive_on_singleplayer_level then
				level.show_indicators()
				_ver_static:SetText("HUD restored. Player vulnerable.")
			end
		end
	end

	return true
end