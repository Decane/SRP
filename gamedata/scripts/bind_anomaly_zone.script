-- Pavlov ??.??.2008: Fixed the incorrect counting and saving of artifacts belonging to an anomalous zone.
-- Decane 31.01.2013: Removed some old code which could trigger a crash due to an undefined variable: 'se_pos'.
--        25.10.2014: Fixed the borked savegame persistence of the respawn timer.

artefact_ways_by_id = {}
parent_zones_by_artefact_id = {}

function bind(obj)
	obj:bind_object(anomaly_zone_binder(obj))
end

--------------------------------------------------------------------------------

class "anomaly_zone_binder" (object_binder)

function anomaly_zone_binder:__init(obj) super(obj)

	local get_string       = utils.cfg_get_string
	local get_number       = utils.cfg_get_number
	local ini              = obj:spawn_ini()

	self.artefact_count    = get_number(ini, "anomal_zone", "artefact_count",    nil, false, 1)
	self.idle_time         = get_number(ini, "anomal_zone", "idle_time",         nil, false, 14400) * level.get_time_factor() -- artifacts respawn after 14400 / 60 / 60 = 4 real hours
	self.applying_force_xz = get_number(ini, "anomal_zone", "applying_force_xz", nil, false, 200)
	self.applying_force_y  = get_number(ini, "anomal_zone", "applying_force_y",  nil, false, 400)

	self.path_table        = parse_names(get_string(ini, "anomal_zone", "artefact_ways", obj, true, "", nil))
	self.artefacts_table   = parse_names(get_string(ini, "anomal_zone", "artefacts",     obj, true, "", nil))
	self.spawned_count     = 0
	self.idle_time_start   = nil
end

function anomaly_zone_binder:net_spawn(se_abstract)
	if not object_binder.net_spawn(self, se_abstract) then
		return false
	end
	if self.spawned_count < self.artefact_count then
		if self.idle_time_start == nil or game.get_game_time():diffSec(self.idle_time_start) >= self.idle_time then
			for i = 1, self.artefact_count - self.spawned_count do
				self:spawn_artefact_randomly()
			end
		end
	end
	return true
end

function anomaly_zone_binder:net_destroy() -- missing in vanilla
	object_binder.net_destroy(self)
end

local object_binder_update = object_binder.update

function anomaly_zone_binder:update(delta)
	object_binder_update(self, delta)
	if self.spawned_count < self.artefact_count then
		if self.idle_time_start == nil or game.get_game_time():diffSec(self.idle_time_start) >= self.idle_time then
			self:spawn_artefact_randomly()
		end
	end
end

--------------------------------------------------------------------------------

function anomaly_zone_binder:on_artefact_take()
	self.spawned_count = self.spawned_count - 1
	self.idle_time_start = game.get_game_time()
end

function anomaly_zone_binder:spawn_artefact_randomly()

	local math_random = math.random
	local rnd_artefact = self.artefacts_table[math_random(1, #self.artefacts_table)]
	local rnd_path_name = self.path_table[math_random(1, #self.path_table)]
	local rnd_path = patrol(rnd_path_name)
	local rnd_path_point = math_random(0, rnd_path:count() - 1)
	local artefact_id = _G.sim:create(rnd_artefact, rnd_path:point(rnd_path_point), self.object:level_vertex_id(), self.object:game_vertex_id()).id

	artefact_ways_by_id[artefact_id] = rnd_path_name
	parent_zones_by_artefact_id[artefact_id] = self

	self.spawned_count = self.spawned_count + 1
	self.idle_time_start = nil -- set this to nil after respawning to reduce packet data burden
end

--------------------------------------------------------------------------------

function anomaly_zone_binder:net_save_relevant()
	return true
end

function anomaly_zone_binder:save(thread)

	set_save_marker(thread, "save", false, "anomaly_zone_binder")

	object_binder.save(self, thread)

	local count = 0

	for art_id in pairs (artefact_ways_by_id) do
		if parent_zones_by_artefact_id[art_id] ~= nil then
			if rawequal(parent_zones_by_artefact_id[art_id], self) then -- only count artefacts that belong to this anomal zone
				count = count + 1
			end
		end
	end

	thread:w_u8(count) -- was u16, but no anomaly zone will have more than 255 artifacts in it at once, so let's save a byte

	for art_id, path_name in pairs (artefact_ways_by_id) do
		if parent_zones_by_artefact_id[art_id] ~= nil then
			if rawequal(parent_zones_by_artefact_id[art_id], self) then -- only store artefacts that belong to this anomal zone
				thread:w_u16(art_id)
				thread:w_stringZ(path_name)
			end
		end
	end

	thread:w_u8(self.spawned_count)

	utils.w_CTime(thread, self.idle_time_start)

	set_save_marker(thread, "save", true, "anomaly_zone_binder")
end

function anomaly_zone_binder:load(thread)

	set_save_marker(thread, "load", false, "anomaly_zone_binder")

	object_binder.load(self, thread)

	local count = thread:r_u8()

	for i = 1, count do
		local art_id = thread:r_u16()
		artefact_ways_by_id[art_id] = thread:r_stringZ()
		parent_zones_by_artefact_id[art_id] = self
	end

	self.spawned_count = thread:r_u8()

	self.idle_time_start = utils.r_CTime(thread)

	set_save_marker(thread, "load", true, "anomaly_zone_binder")
end