-- This script controls the delayed release of non-permanent corpses exceeding the maximum permitted quantity in the Zone.
-- The moment there are x corpses in the Zone, where 15 < x <= 75, the game will try to release the min{10, (x - 15)} furthest-away-from-the-player corpses.
-- This attempt will be successful for and only for corpses that are at least 1 real hour old. (1 hour = 3600 seconds, hence the "3600" in the code.)
-- If ever x > 75, the game will force the immediate release of the (x - 75) furthest-away-from-the-player corpses.
-- This ensures that the number of corpses in the Zone never exceeds 75, capping corpse-related actor packet data writes and helping prevent savegame corruption.
-- Original script by Distemper. Re-designed and re-written by Decane for SRP v1.0.4.

local tracked_corpses = {}
local corpse_count_max = 75
local corpse_count_min = 15
local session_start_time = nil

function init()
	session_start_time = math.ceil(0.001 * time_global())
end

local function get_session_time()
	return math.ceil(0.001 * time_global()) - session_start_time
end

local function try_to_release(corpse_target_count, corpse_keep_age)

	local sim = _G.sim
	local session_time = get_session_time()
	local table_remove = table.remove
	local corpses_to_keep = {}
	local num_to_keep = 0

--	dbglog("Initiation time: "..session_time..". Corpses in release table: "..#tracked_corpses..".")

	for i = #tracked_corpses, 1, -1 do
		local corpse = tracked_corpses[i]
		local se_npc = sim:object(corpse.id)
		if se_npc and IsStalker(se_npc) and not se_npc:alive() then -- https://github.com/Decane/SRP/issues/120 explains why we must check these
			local corpse_age = corpse.death_time and (session_time - corpse.death_time) or (session_time + corpse.age) -- death_time non-nil iff corpse was created in this session
			if corpse_age < corpse_keep_age then
				num_to_keep = num_to_keep + 1
				corpses_to_keep[num_to_keep] = corpse
				table_remove(tracked_corpses, i)
--				dbglog("Moved corpse with ID "..corpse.id.." to temp table for safe-keeping.")
--				dbglog("Corpse with ID "..corpse.id.." is not releasable because it is too fresh.")
			end
		else
			table_remove(tracked_corpses, i)
--			dbglog("Corpse with ID "..corpse.id.." is not releasable because it does not exist or is not a stalker or is alive.")
		end
	end

	local num_to_release = #tracked_corpses

--	dbglog("Releasable corpses: "..num_to_release..". Corpses in total: "..num_to_release + num_to_keep..".")

	if num_to_release == 0 then
--		for i = 1, num_to_keep do
--			dbglog("Added back corpse with ID "..corpses_to_keep[i].id.." from temp table to release table since no releasable corpses.")
--		end
		tracked_corpses = corpses_to_keep
		return
	end

	local overflow_count = num_to_release + num_to_keep - corpse_target_count

	if overflow_count > 0 then

		local GG = game_graph()
		local act_game_pt = GG:vertex(sim:actor().m_game_vertex_id):game_point()
		local sort_by_dist_desc = function(a, b)
			return act_game_pt:distance_to(GG:vertex(sim:object(a.id).m_game_vertex_id):game_point()) >
			       act_game_pt:distance_to(GG:vertex(sim:object(b.id).m_game_vertex_id):game_point())
		end

		table.sort(tracked_corpses, sort_by_dist_desc) -- sort release table in descending order of distance between corpse and player (so furthest corpse first)

		if corpse_keep_age ~= 6 then
			overflow_count = 10 -- cap when release not forced, as releasing too many corpses at once can cause a slowdown
		end

		local release_count = overflow_count > num_to_release and num_to_release or overflow_count

		for i = 1, release_count do
			local npc_id = tracked_corpses[1].id
			sim:release(sim:object(npc_id), true)
			table_remove(tracked_corpses, 1)
--			dbglog("Released corpse with ID "..npc_id.." and removed it from release table.")
		end
	end

	local c = #tracked_corpses

	for i = 1, num_to_keep do
		c = c + 1
		tracked_corpses[c] = corpses_to_keep[i]
--		dbglog("Added back corpse with ID "..corpses_to_keep[i].id.." from temp table to release table.")
	end

--	dbglog("Corpses in total after release attempt: "..#tracked_corpses..".")
end

function moving_dead_body(npc, se_npc, npc_id)

	for section in pairs (death_manager.always_keep_item) do
		if npc:object(section) ~= nil then
			return
		end
	end

	if npc:story_id() < 65535 then
		return
	end

	if se_npc.has_known_info then
--		dbglog("Corpse with ID "..npc_id.." has known_info. Not adding it to release table.")
		return
	end

--	dbglog("Corpse with ID "..npc_id.." does not have known_info. Adding it to release table.")

	local corpse_count = #tracked_corpses + 1
	local corpse = {id = npc_id, death_time = get_session_time(), age = 0} -- death_time in seconds so reliably savable as u16

	tracked_corpses[corpse_count] = corpse

--	dbglog("Added corpse with ID "..npc_id.." and death_time "..corpse.death_time.." to release table.")

	if corpse_count > corpse_count_min then
		try_to_release(corpse_count_min, 3600)
		if #tracked_corpses > corpse_count_max then
			try_to_release(corpse_count_max, 6)
		end
	end
end

function save(packet)
	set_save_marker(packet, "save", false, "Crelease_body")
	packet:w_u16(#tracked_corpses)
	local session_time = get_session_time()
	for _, corpse in pairs (tracked_corpses) do
		local corpse_age = corpse.death_time and (session_time - corpse.death_time) or (session_time + corpse.age)
		packet:w_u16(corpse.id)
		packet:w_u16(corpse_age)
--		dbglog("Saved age "..corpse_age.." for corpse with ID "..corpse.id..".")
	end
	set_save_marker(packet, "save", true, "Crelease_body")
end

function load(reader)
	set_save_marker(reader, "load", false, "Crelease_body")
	local corpse_count = reader:r_u16()
	for i = 1, corpse_count do
		local corpse_id = reader:r_u16()
		local corpse_age = reader:r_u16()
		tracked_corpses[i] = {id = corpse_id, age = corpse_age}
--		dbglog("Loaded age "..corpse_age.." for corpse with ID "..corpse_id..".")
	end
	set_save_marker(reader, "load", true, "Crelease_body")
end