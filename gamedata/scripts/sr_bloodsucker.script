local db_storage = db.storage

class "bloodsucker_attack"

function bloodsucker_attack:__init(obj, st)
	self.object          = obj
	self.st              = st
	self.appear_snd      = sound_object("monsters\\bloodsucker\\swamp_appear_1")
	self.growl_snd       = sound_object("monsters\\bloodsucker\\swamp_growl_1")
	self.hit_snd         = sound_object("monsters\\bloodsucker\\heavy_hit_1")
	self.panic_snd       = sound_object("monsters\\bloodsucker\\human_panic_1")
	self.sound_count     = 4
end

function bloodsucker_attack:reset_scheme()
	self.victim          = nil
	self.victim_id       = nil
	self.victim_squad    = nil
	self.st.path         = nil
	self.st.signals      = {}
	self.snd_obj         = nil
	self.is_victim_taken = false
	self.path_name       = nil
	self.bloodsucker_obj = nil
	self.bloodsucker     = nil
	self.cur_point       = nil
	self.current         = nil
	self.target          = nil
	self.dir             = nil
	self.played_count    = 0
end

function bloodsucker_attack:net_destroy()
	self.appear_snd:stop()
	self.growl_snd:stop()
	self.hit_snd:stop()
	self.panic_snd:stop()
	db_storage[self.object:id()].reaction_manager = nil
end

function bloodsucker_attack:disable_reaction_final()
	local victim_squad = self.victim_squad
	if victim_squad ~= nil then
		for npc_id in pairs (victim_squad.squad_npc) do
			bloodsucker_reaction.disable_bloodsucker_reaction(db_storage[npc_id].object)
		end
	end
	self:net_destroy()
	self:reset_scheme()
end

local function death_hit(sucker, victim)
	local h     = hit()
	h.power     = 1000
	h.direction = victim:direction()
	h.draftsman = sucker
	h.impulse   = 0
	h.type      = hit.wound
	victim:hit(h)
end

function bloodsucker_attack:update(delta)

	local restr_obj = self.object
	local restr_id = restr_obj:id()
	local st = self.st
	local actor = db.actor

	-- If this restrictor's logic switches to another section, stop scheme:

	if xr_logic.try_switch_to_another_section(restr_obj, st, actor) then
		self:disable_reaction_final()
		return true
	end

	-- (1) If victim not picked and NPC in marsh creature zone and player nearby zone, make NPC the victim and enable his reaction and calculate target positions of NPC's squad members:

	if self.victim == nil then
		local victim = xr_motivator.bloodsucker_zone_enter[restr_id]
		if victim and restr_obj:position():distance_to_sqr(actor:position()) <= 50*50 then
			local victim_id = victim:id()
			self.victim_squad = db_storage[victim_id].squad_obj
			if not self.victim_squad then
				return
			end
			self.victim = victim
			self.victim_id = victim_id
			self:reset_path()
			self:set_positions()
			db_storage[restr_id].reaction_manager = reaction_manager(restr_id, self)
		else
			return
		end
	end

	-- (2) Given victim picked, enable victim's squad members' reaction once victim's reaction has finished:

	db_storage[restr_id].reaction_manager:update()

	-- (3) Given victim picked, if no server entity marsh creature, play scary sounds, fire into bushes, and create server entity marsh creature:

	if self.bloodsucker == nil then

		local is_spawned = false
		local target_pos = vector():set(self.current):mad(self.dir, st.sound_slide_vel * delta / 1000)

		if self.current:distance_to(target_pos) >= self.current:distance_to(self.target) then
			if self.played_count >= self.sound_count then
				self:spawn_sucker()
				is_spawned = true
			else
				self:reset_path()
			end
			self:set_positions()
			if self.played_count == 3 then
				db_storage[restr_id].reaction_manager:set_fire_state()
			end
			self.played_count = self.played_count + 1
		else
			self.current = target_pos
		end

		if is_spawned then
			if self.snd_obj and self.snd_obj:playing() then
				self.snd_obj:stop()
			end
		else
			self.snd_obj = xr_sound.set_sound_play(restr_id, st.snd_obj)
			if self.snd_obj and self.snd_obj:playing() then
				self.snd_obj:set_position(self.current)
			end
		end

		return
	end

	-- (6a) If victim taken and marsh creature not near vanishing spot and panic sounds playing, keep updating their position to track victim:
	-- (6b) If victim taken and marsh creature near vanishing spot or panic sounds over, delete marsh creature and victim and signal scene_end:

	if self.is_victim_taken then

		if self.panic_snd:playing() and self.bloodsucker_obj:position():distance_to(self.current) > 1 then
			self.panic_snd:set_position(self.victim:position())
		else
			xr_logic.mob_release(self.bloodsucker_obj)
			db.del_obj(self.bloodsucker_obj)
			bind_stalker.delayed_alife_release_objects[self.bloodsucker.id] = nil
			_G.sim:release(self.bloodsucker, true)
--[[
			local se_npc = _G.sim:object(self.victim_id)
			if se_npc.squad_id == nil then
				_G.sim:release(se_npc, true)
			else
				sim_board.get_sim_board().squads[se_npc.squad_id]:remove_npc(se_npc.id)
			end
]]
			xr_motivator.bloodsucker_zone_enter[restr_id] = nil
--			self:disable_reaction_final() -- only necessary if next line doesn't cause section switch
			st.signals["scene_end"] = true -- always causes section switch on next update in vanilla
		end

		return
	end

	-- (5) Given victim not taken, if marsh creature defined and near victim, play kill/growl sequence:

	if self.bloodsucker_obj then
		if self.bloodsucker_obj:position():distance_to(self.victim:position()) <= 3 and not self.bloodsucker_obj:action() then
			self.bloodsucker_obj:set_vis_state(1)
			xr_logic.mob_release(self.bloodsucker_obj)
			death_hit(self.bloodsucker_obj, self.victim)
			local sucker_pos = vector():set(self.bloodsucker_obj:position())
			sucker_pos.y = sucker_pos.y + 1
			self.growl_snd:play_at_pos(self.bloodsucker_obj, sucker_pos, 1, sound_object.s3d)
			self.hit_snd:play_at_pos(self.bloodsucker_obj, sucker_pos, 0, sound_object.s3d)
			self.panic_snd:play_at_pos(self.victim, sucker_pos, 2, sound_object.s3d)
			self:reset_path()
			self:set_positions()
			self.bloodsucker_obj:set_capture_anim(self.victim, "bip01_head", self.current, 1)
			self.is_victim_taken = true
		end
		return
	end

	-- (4) Given victim not taken and marsh creature not defined, define marsh creature (once online) and send it toward victim:

	if db_storage[self.bloodsucker.id] then
		local sucker = db_storage[self.bloodsucker.id].object
		if sucker then
			bind_stalker.delayed_alife_release_objects[self.bloodsucker.id] = true
			sucker:set_vis_state(-1)
			sucker:set_collision_off(true)
			xr_logic.mob_capture(sucker, true)
			action(sucker, move(move.run_fwd, self.victim, 2), cond(cond.move_end))
			if self.victim:alive() then
				self.victim:wounded(true) -- makes victim stay still when sucker appears
			end
			self.bloodsucker_obj = sucker
		end
	end
end

function bloodsucker_attack:reset_path()
	self.cur_point = 0
	local path_name_new = self.path_name
	local path_count = #self.st.path_table
	while self.path_name == path_name_new do
		path_name_new = self.st.path_table[math.random(1, path_count)]
	end
	self.path_name = path_name_new
	self.st.path = patrol(path_name_new)
end

function bloodsucker_attack:next_point()
	if self.cur_point + 1 < self.st.path:count() then
		return self.cur_point + 1
	else
		return 0
	end
end

function bloodsucker_attack:spawn_sucker()
	local path = self.st.path
	local path_index = self:next_point()
	local spawn_point = path:point(path_index)
	local spawn_lvid = path:level_vertex_id(path_index)
	local spawn_gvid = path:game_vertex_id(path_index)
	self.bloodsucker = _G.sim:create("bloodsucker_jumper", spawn_point, spawn_lvid, spawn_gvid)
	self.bloodsucker.sim_forced_online = true
	self.appear_snd:play_at_pos(db.actor, spawn_point, 0, sound_object.s3d)
	self.cur_point = path_index
end

function bloodsucker_attack:set_positions()
	self.current = self.st.path:point(self.cur_point)
	self.target  = self.st.path:point(self:next_point())
	self.dir     = vector():sub(self.target, self.current):normalize()
end

--------------------------------------------------------------------------------

function add_to_binder(npc, ini, scheme, section, st)
	xr_logic.subscribe_action_for_events(npc, st, bloodsucker_attack(npc, st))
end

function set_scheme(obj, ini, scheme, section)
	local st           = xr_logic.assign_storage_and_bind(obj, ini, scheme, section)
	st.logic           = xr_logic.cfg_get_switch_conditions(ini, section, obj)
	st.snd_obj         = utils.cfg_get_string(ini, section, "snd", obj, false, "", nil)
	st.path_table      = parse_names(utils.cfg_get_string(ini, section, "sound_path", obj, true, ""))
	st.sound_slide_vel = utils.cfg_get_number(ini, section, "slide_velocity", obj, false, 5)
end

--------------------------------------------------------------------------------

class "reaction_manager"

function reaction_manager:__init(restr_id, sr_blood)

	self.target_npc_id     = sr_blood.victim_id
	self.squad_npc_state   = {}
	self.squad             = {}
	self.squad_objs        = {}
	self.scene_manager     = sr_blood
	self.npc_position      = {}

	local target_npc       = sr_blood.victim
	local yaw              = yaw(vector():set(1, 0, 0), target_npc:direction())
	local positions        =
	{
		{dir = vector_rotate_y(vector():set(1,  0,  1), yaw), vertex = nil, position = nil},
		{dir = vector_rotate_y(vector():set(-1, 0,  1), yaw), vertex = nil, position = nil},
		{dir = vector_rotate_y(vector():set(-1, 0, -1), yaw), vertex = nil, position = nil},
		{dir = vector_rotate_y(vector():set(1,  0, -1), yaw), vertex = nil, position = nil},
	}

	local function calculate_positions(positions, base_point)
		for k, v in pairs (positions) do
			local base_vertex_id = level.vertex_in_direction(base_point, v.dir, 4)
			local random_position = level.vertex_position(base_vertex_id)
			v.vertex = base_vertex_id
			v.position = random_position
		end
	end

	calculate_positions(positions, target_npc:level_vertex_id())

	local squad = sr_blood.victim_squad -- guaranteed valid by bloodsucker_attack:update()

	for npc_id in pairs (squad.squad_npc) do
		if self.target_npc_id ~= npc_id then
			local npc = db_storage[npc_id].object
			self.squad[npc_id] = npc
			self.squad_objs[npc_id] = npc
		end
	end

	self:set_npc_positions(positions)

	for npc_id in pairs (squad.squad_npc) do
		if self.target_npc_id ~= npc_id then
			self.squad_npc_state[npc_id] = "walk_to_position"
		else
			self.squad_npc_state[npc_id] = "stand_search"
			bloodsucker_reaction.enabled_bloodsucker_reaction(target_npc)
		end
		db_storage[npc_id].bloodsucker_zone_id = restr_id
	end
end

function reaction_manager:set_npc_positions(positions)

	local function find_nearest_npc_on_position(squad, pos)
		local nearest_npc_id = nil
		local min_dist = 1000
		for npc_id, npc in pairs (squad) do
			local dist_to_pos = pos:distance_to(npc:position())
			if dist_to_pos < min_dist then
				min_dist = dist_to_pos
				nearest_npc_id = npc_id
			end
		end
		return nearest_npc_id
	end

	for k, v in pairs (positions) do
		local nearest_npc_id = find_nearest_npc_on_position(self.squad, v.position)
		if nearest_npc_id ~= nil then
			self.npc_position[nearest_npc_id] = {vertex = v.vertex, position = v.position}
			self.squad[nearest_npc_id] = nil
		end
	end
end

function reaction_manager:set_fire_state()
	local nearest_npc_id = nil
	local min_dist = 10000
	local pos = self.scene_manager.current
	for npc_id, npc in pairs (self.squad_objs) do
		local dist_to_pos = pos:distance_to(npc:position())
		if dist_to_pos < min_dist then
			min_dist = dist_to_pos
			nearest_npc_id = npc_id
		end
	end
	if nearest_npc_id ~= nil then
		self.squad_npc_state[nearest_npc_id] = "state_fire"
	end
end

function reaction_manager:update()
	if self.anim_end then
		for k, npc in pairs (self.squad_objs) do
			bloodsucker_reaction.enabled_bloodsucker_reaction(npc)
		end
		self.anim_end = false
	end
end

function set_anim_end(npc)
	db_storage[db_storage[npc:id()].bloodsucker_zone_id].reaction_manager.anim_end = true
end