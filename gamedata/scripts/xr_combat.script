class "evaluator_script_combat" (property_evaluator)

function evaluator_script_combat:__init(st) super()
	self.st = st
end

function evaluator_script_combat:evaluate()
	return self.st.script_combat_type ~= nil and self.object:best_enemy() ~= nil and db.actor ~= nil
end

--------------------------------------------------------------------------------
-- Binder
--------------------------------------------------------------------------------

local stalker_ids_action_combat_planner = stalker_ids.action_combat_planner
local prop_need_script_combat           = xr_evaluators_id.script_combat
local wp_script_combat_false            = world_property(prop_need_script_combat, false)

function add_to_binder(npc, _, _, _, st)

	local manager            = npc:motivation_action_manager()
	manager:add_evaluator    (prop_need_script_combat, evaluator_script_combat(st))

	local action             = manager:action(stalker_ids_action_combat_planner)
	action:add_precondition  (wp_script_combat_false)

	xr_combat_zombied.add_to_binder(st, manager)
end

function set_combat_checker(npc, ini, scheme, section)
--[[
	The 'section' here is e.g. 'combat@1' and can only come from on_combat
	under [logic] if initialized at all, e.g.

	[logic@work1]
	active = walker@1
	on_combat = combat@1
	...

	[combat@1]
	on_info = {+some_info} some_section %=some_func%
	combat_type = zombied
]]
	local is_zombied = npc:character_community() == "zombied"

	if section or is_zombied then
		local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
		st.logic = xr_logic.cfg_get_switch_conditions(ini, section, npc)
		st.script_combat_type = utils.cfg_get_string(ini, section, "combat_type", nil, false, "", is_zombied and "zombied" or nil)
		st.enabled = true
	end
end

function disable_scheme(st)
	if st then
		st.script_combat_type = nil
		st.enabled = false
	end
end