-- local SMART_SECTION_NAME = "smart_terrains"
local JOB_POSITION_THRESHOLD = 200
local DEATH_IDLE_TIME = 10*60

-- local smart_terrains_by_name = {}

local cse_alife_smart_zone_update = cse_alife_smart_zone.update

local path_fields = {"path_walk", "path_main", "path_home", "center_point"}
local valid_territory = {default = true, base = true, resource = true, territory = true}

local math_max = math.max
local table_sort = table.sort

local _sort_by_job_prior_asc = function(a, b) return a.job_prior < b.job_prior end
local _sort_by_prior_desc = function(a, b) return a._prior > b._prior end

local function sort_jobs(jobs)
	for i = 1, #jobs do
		local inner_jobs = jobs[i].jobs
		if inner_jobs ~= nil then
			sort_jobs(inner_jobs)
		end
	end
	table_sort(jobs, _sort_by_prior_desc)
end

local function job_avail_to_npc(npc_info, job, smart)

	if smart.dead_time[job.job_id] ~= nil then
		return false
	end

	if job._precondition_is_monster ~= nil and job._precondition_is_monster ~= npc_info.is_monster then
		return false
	end

	if job._current_squad_action ~= nil then

		local squad_id = npc_info.se_obj.squad_id

		if squad_id == nil then
			return false
		end

		local squad = smart.board.squads[squad_id]
		local squad_action = squad and squad.current_action

		if squad_action == nil then
			return false
		end

		if job._current_squad_action ~= squad_action.name then
			return false
		end

		if job._squad_attack_point ~= nil then
			if job._squad_attack_point ~= squad_action.dest_smrt_id then
				return false
			end
		end
	end

	if job._precondition_function ~= nil then
		if not job._precondition_function(npc_info.se_obj, smart, job._precondition_params, npc_info) then
			return false
		end
	end

	return true
end

local function job_iterator(jobs, npc_info, selected_job_prior, smart)
	local current_job_prior = selected_job_prior
	local selected_job_id = nil
	local selected_job = nil
	for k, v in pairs (jobs) do
		if current_job_prior > v._prior then
			return selected_job_id, current_job_prior, selected_job
		end
		if job_avail_to_npc(npc_info, v, smart) then
			if v.job_id == nil then
				selected_job_id, current_job_prior, selected_job = job_iterator(v.jobs, npc_info, selected_job_prior, smart)
			else
				if v.npc_id == nil or v.job_id == npc_info.job_id then
					return v.job_id, v._prior, v
				end
			end
		end
	end
	return selected_job_id, current_job_prior, selected_job
end

----------------------------------------------------------------------------------------------------------------------
-- Класс "se_smart_terrain". Обеспечивает поддержку smart terrain в ОФЛАЙНЕ.
----------------------------------------------------------------------------------------------------------------------

class "se_smart_terrain" (cse_alife_smart_zone)

function se_smart_terrain:__init(section) super(section)
	self.initialized = false
	self.b_registred = false
	self.npc_to_register = {}
	self.npc_by_job_section = {}
	self.dead_time = {}
	self.npc_info = {}
end

local squad_id = nil
local prev_level_id = nil

function se_smart_terrain:on_before_register()

	cse_alife_smart_zone.on_before_register(self)

	local board = sim_board.get_sim_board()

	self.board = board
	board:register_smart(self)

	local level_id = game_graph():vertex(self.m_game_vertex_id):level_id()

	if prev_level_id ~= level_id then
		squad_id = 0
		prev_level_id = level_id
	end

	squad_id = squad_id + 1

	self.squad_id = squad_id -- see change_team_sqaud_group()
	self.level_id = level_id
	self.smart_level = _G.sim:level_name(level_id)

--	dbglog("Smart Name [%s], Smart ID [%d], Smart Squad ID [%d], Smart Level ID [%d]", self:name(), self.id, squad_id, level_id)
end

function se_smart_terrain:on_register()

	cse_alife_smart_zone.on_register(self)

	local board = self.board

	board:build_cross_table(self)

--	self:show()

	if self.combat_manager == nil then
		self.combat_manager = sim_combat.CCombat_manager(self, board)
	end

--	smart_terrains_by_name[self:name()] = self

	self.b_registred = true

	self:load_jobs()

	board:init_smart(self)

	if self.need_init_npc == true then
		self.need_init_npc = false
		self:init_npc_after_load()
	end

	self:register_delayed_npc()

	self.check_time = -10000 -- time_global()
end

function se_smart_terrain:on_unregister()
	cse_alife_smart_zone.on_unregister(self)
	self.board:unregister_smart(self)
--	smart_terrains_by_name[self:name()] = nil
end

function se_smart_terrain:read_params()

	local ini = self:spawn_ini()
	local sect = "smart_terrain"

	if not ini:section_exist(sect) then
		abort("[se_smart_terrain:read_params]: Missing section '%s' for smart '%s'.", sect, self:name())
--		self.disabled = true
--		return
	end

	local get_string          = utils.cfg_get_string
	local get_bool            = utils.cfg_get_bool
	local get_number          = utils.cfg_get_number

	self.sim_type             = get_string(ini, sect, "sim_type", nil, false, "", "default")

	if valid_territory[self.sim_type] == nil then
		abort("[se_smart_terrain:read_params]: Invalid sim_type value '%s' for smart '%s'.", self.sim_type, self:name())
	end

	self.squad_capacity       = get_number(ini, sect, "squad_capacity", nil, false, 1)
	self.player_name          = "none"
--	self.squad_id             = get_number(ini, sect, "squad_id", nil, false, 0)
	self.respawn_radius       = get_number(ini, sect, "respawn_radius", nil, false, 150)

	local respawn_sector      = get_string(ini, sect, "respawn_sector", nil, false, "")

	if respawn_sector ~= nil then
--		if respawn_sector == "default" then
--			respawn_sector = "all"
--		end
		respawn_sector = xr_logic.parse_condlist(nil, nil, nil, respawn_sector)
	end

	self.respawn_sector       = respawn_sector
--	self.important_point      = get_bool(ini, sect, "important_point", nil, false)
--	self.mutant_lair          = get_bool(ini, sect, "mutant_lair", nil, false)
	self.no_mutant            = get_bool(ini, sect, "no_mutant", nil, false)
--	self.forbidden_point      = get_string(ini, sect, "forbidden_point", nil, false, "")
	self.def_restr            = get_string(ini, sect, "def_restr", nil, false, "", nil)
	self.att_restr            = get_string(ini, sect, "att_restr", nil, false, "", nil)
	self.spawn_point          = get_string(ini, sect, "spawn_point", nil, false, "")

	local sim_avail           = get_string(ini, sect, "sim_avail", nil, false, "")

	if sim_avail ~= nil then
		sim_avail = xr_logic.parse_condlist(nil, nil, nil, sim_avail)
	end

	self.sim_avail            = sim_avail
--	self.respawn              = get_string(ini, sect, "respawn", nil, false, "", nil)
	self.surge_hide_avaliable = get_bool(ini, sect, "surge_hide_avaliable", nil, false, false)

	local hides               = get_string(ini, sect, "actor_hides", nil, false, "")

	if hides ~= nil then
		self.actor_hides = utils.parse_names(hides)
	end
end

local function fill_npc_info(se_npc)

	local is_stalker = IsStalker(se_npc)

	return
	{
		se_obj     = se_npc,
		is_monster = not is_stalker,
		need_job   = "nil",
		job_prior  = -1,
		job_id     = -1,
		begin_job  = false,
		stype      = is_stalker and modules.stype_stalker or modules.stype_mobile,
	}
end

function se_smart_terrain:register_npc(se_npc)

	if self.b_registred == false then
		self.npc_to_register[#self.npc_to_register + 1] = se_npc
		return
	end

	self.npc_info[se_npc.id] = fill_npc_info(se_npc)

	se_npc.m_smart_terrain_id = self.id

	self.dead_time = {}

	self:update_jobs(se_npc)
end

function se_smart_terrain:register_delayed_npc()
	for i = 1, #self.npc_to_register do
		self:register_npc(self.npc_to_register[i])
	end
	self.npc_to_register = {}
end

function se_smart_terrain:unregister_npc(se_npc)

	local npc_info = self.npc_info[se_npc.id]

	if npc_info == nil then
		abort("[se_smart_terrain:unregister_npc]: NPC with ID '%d' is already unregistered from smart '%s'.", se_npc.id, self:name())
	end

	npc_info.job.npc_id = nil
	self.npc_info[se_npc.id] = nil

	se_npc:clear_smart_terrain()
end

function se_smart_terrain:clear_dead(se_npc)

	local npc_info = self.npc_info[se_npc.id]

	if npc_info == nil then
		abort("[se_smart_terrain:clear_dead]: NPC with ID '%d' is not registered to smart '%s'.", se_npc.id, self:name())
	end

	self.dead_time[npc_info.job_id] = game.get_game_time()

	npc_info.job.npc_id = nil
	self.npc_info[se_npc.id] = nil

	se_npc:clear_smart_terrain()
end

function se_smart_terrain:task(se_npc)

	local job = self.job_data[self.npc_info[se_npc.id].job_id]

	if not job then
		abort("[se_smart_terrain:task]: [smart_terrain %s] task: se_npc = %s job_path = nil, CLEARING. job_id = %s", self:name(), se_npc:name(), tostring(self.npc_info[se_npc.id].job_id))
--		self:unregister_npc(se_npc)
--		return CALifeSmartTerrainTask("simulation_default_path", 0)
	end

	se_npc.attack_position = job.attack_position

	return CALifeSmartTerrainTask(job.alife_path, job.alife_point)
end

--*******************************************************
-- Функции для работы с работами
--*******************************************************

function se_smart_terrain:load_jobs()

	self.jobs = gulag_general.load_job(self)

	self.ltx, self.ltx_name = xr_gulag.loadLtx(self:name())

	sort_jobs(self.jobs)

	local id = 0
	local self_job_data = {}

	self.job_data = self_job_data

	local function get_jobs_data(jobs)
		for i = 1, #jobs do
			local job = jobs[i]
			local inner_jobs = job.jobs
			if inner_jobs ~= nil then
				get_jobs_data(inner_jobs)
			else
				if job.job_id == nil then
					abort("[se_smart_terrain:load_jobs]: Incorrect job table.")
				end
				self_job_data[id] = job.job_id
--				if job._attack_job then
--					self_job_data[id].attack_position = true
--				end
				self_job_data[id]._prior = job._prior
				job.job_id = id
				id = id + 1
			end
		end
	end

	get_jobs_data(self.jobs)

	local GG = game_graph()

	for k, job in pairs (self_job_data) do

		local section = job.section
		local ltx = job.ini_file or self.ltx

		if not ltx:line_exist(section, "active") then
			abort("[se_smart_terrain:load_jobs]: gulag: ltx = '%s' no 'active' in section '%s'.", self.ltx_name, section)
		end

		local active_section = ltx:r_string(section, "active")
		local path_field

		for i, vv in pairs (path_fields) do
			if ltx:line_exist(active_section, vv) then
				path_field = vv
				break
			end
		end

		if not path_field then
			abort("[se_smart_terrain:load_jobs]: gulag: ltx = '%s', there is no path in section '%s'.", self.ltx_name, active_section)
		end

		if path_field == "center_point" then

			local path_name = "_" .. ltx:r_string(active_section, path_field)

			if job.prefix_name ~= nil then
				path_name = job.prefix_name .. path_name
			else
				path_name = self:name() .. path_name
			end

			if level.patrol_path_exists(path_name .. "_task") then
				job.alife_path = path_name .. "_task"
			else
				job.alife_path = path_name
			end
		else
			if job.prefix_name ~= nil then
				job.alife_path = job.prefix_name .. "_" .. ltx:r_string(active_section, path_field)
			else
				job.alife_path = self:name() .. "_" .. ltx:r_string(active_section, path_field)
			end
		end

		local patrol = patrol(job.alife_path)

		job.game_vertex_id = patrol:game_vertex_id(0)
		job.level_id       = GG:vertex(job.game_vertex_id):level_id()
		job.position       = patrol:point(0)

		local parsed_path = utils.path_parse_waypoints(job.alife_path)
		job.alife_point = 0

		for kk, vv in pairs (parsed_path) do
			if vv.sig == "arrive_to_wait" then
				job.alife_point = kk
				break
			end
		end

		if job.attack_position == true then
			job.attack_position = patrol:point(job.alife_point)
		end
	end
end

local function distance_to_job_location(se_npc, job)

	local npc_st = db.storage[se_npc.id]
	local GG = game_graph()
	local npc_gv, npc_pos

	if npc_st == nil then
		npc_gv, npc_pos = GG:vertex(se_npc.m_game_vertex_id), se_npc.position
	else
		local npc = npc_st.object
		npc_gv, npc_pos = GG:vertex(npc:game_vertex_id()), npc:position()
	end

	local job_gv = GG:vertex(job.game_vertex_id)

	if npc_gv:level_id() == job_gv:level_id() then
		return npc_pos:distance_to(job.position)
	else
		return 10000
	end
end

function se_smart_terrain:update_npc_jobs(npc_id, npc_info)

	local selected_job_id, selected_job_prior, selected_job = job_iterator(self.jobs, npc_info, 0, self)

	if selected_job_id == nil then
--		print_table(self.jobs)
		abort("[se_smart_terrain:update_npc_jobs]: Insufficient smart_terrain jobs for smart with name '%s'.", self:name())
	end

	if selected_job_id ~= npc_info.job_id then -- and selected_job ~= nil -- never nil if selected_job_id isn't

		if npc_info.job ~= nil then
			self.npc_by_job_section[self.job_data[npc_info.job.job_id].section] = nil
			npc_info.job.npc_id = nil
		end

		selected_job.npc_id = npc_id
		self.npc_by_job_section[self.job_data[selected_job.job_id].section] = npc_id

		npc_info.job_id = selected_job.job_id
		npc_info.job_prior = selected_job._prior
		npc_info.begin_job = false
		npc_info.job = selected_job

		local npc_st = db.storage[npc_id]

		if npc_st ~= nil then
			xr_logic.switch_to_section(npc_st.object, self.ltx, "nil")
		end
	end

	if npc_info.begin_job ~= true then

		if distance_to_job_location(npc_info.se_obj, self.job_data[npc_info.job_id]) < JOB_POSITION_THRESHOLD then

			npc_info.begin_job = true

			if npc_info.is_monster then
				npc_info.se_obj:smart_terrain_task_activate()
			end

			local npc_st = db.storage[npc_id]

			if npc_st ~= nil then
				self:setup_logic(npc_st.object)
			end
		end
	end
end

function se_smart_terrain:update_jobs(se_npc)
	if se_npc then
		self:update_npc_jobs(se_npc.id, self.npc_info[se_npc.id])
	else
		table_sort(self.npc_info, _sort_by_job_prior_asc)
		for npc_id, npc_info in pairs (self.npc_info) do
			self:update_npc_jobs(npc_id, npc_info)
		end
	end
end

function se_smart_terrain:setup_logic(npc)

	local npc_info = self.npc_info[npc:id()]
	local job = self.job_data[npc_info.job_id]
	local ltx = job.ini_file or self.ltx

	xr_logic.configure_schemes(npc, ltx, job.ini_path or self.ltx_name, npc_info.stype, job.section, job.prefix_name or self:name())

	local sect = xr_logic.determine_section_to_activate(npc, ltx, job.section) -- never returns nil

	if sect == "nil" then -- utils.get_scheme_by_section(job.section)
		abort("[se_smart_terrain:setup_logic]: Attempted to switch to section 'nil' in section '%s' of NPC '%s' on smart terrain '%s'. Don't use section 'nil' in NPC logic!", job.section, npc:name(), self:name())
	end

	xr_logic.activate_by_section(npc, ltx, sect, false)
end

function se_smart_terrain:getJob(npc_id)
	return self.job_data[self.npc_info[npc_id].job_id]
end

function se_smart_terrain:idNPCOnJob(job_name)
	return self.npc_by_job_section[job_name]
end

function se_smart_terrain:switch_to_desired_job(npc)

	local npc_id = npc:id()
	local npc_info = self.npc_info[npc_id]
	local changing_npc_id = self.npc_by_job_section[npc_info.need_job]

	if changing_npc_id == nil then
		npc_info.job = nil
		npc_info.job_id = -1
		npc_info.job_prior = -1
		self:update_jobs(npc_info.se_obj)
		return
	end

	local changing_npc_info = self.npc_info[changing_npc_id]

	if changing_npc_info == nil then
		npc_info.job = nil
		npc_info.job_id = -1
		npc_info.job_prior = -1
		self:update_jobs(npc_info.se_obj)
		return
	end

--	local desired_job = changing_npc_info.job_id

	if npc_info.job ~= nil then
		self.npc_by_job_section[self.job_data[npc_info.job.job_id].section] = nil
		npc_info.job.npc_id = nil
	end

	local selected_job = changing_npc_info.job

	selected_job.npc_id = npc_id
	self.npc_by_job_section[self.job_data[selected_job.job_id].section] = npc_id

	npc_info.job_id = selected_job.job_id
	npc_info.job_prior = selected_job._prior
	npc_info.begin_job = true
	npc_info.job = selected_job
	npc_info.need_job = "nil"

	local npc_st = db.storage[npc_id]

	if npc_st ~= nil then
--		dbglog(tostring(npc_st.object == nil))
		self:setup_logic(npc_st.object) -- might npc_st.object be nil here?
	end

	changing_npc_info.job = nil
	changing_npc_info.job_id = -1
	changing_npc_info.job_prior = -1

	self:update_jobs(changing_npc_info.se_obj)
end

--*******************************************************
-- СЕЙВ/ЛОАД
--*******************************************************

function se_smart_terrain:STATE_Write(packet)

	cse_alife_smart_zone.STATE_Write(self, packet)

	set_save_marker(packet, "save", false, "se_smart_terrain")

	if self.combat_manager == nil then
		self.combat_manager = sim_combat.CCombat_manager(self, sim_board.get_sim_board())
	end

	self.combat_manager:save(packet)

	local n = 0
	for k in pairs (self.npc_info) do
		n = n + 1
	end

	packet:w_u8(n)

	for k, v in pairs (self.npc_info) do
		packet:w_u16(k)
		packet:w_u8(v.job_prior)
		packet:w_u8(v.job_id)
		packet:w_bool(v.begin_job)
		packet:w_stringZ(v.need_job)
	end

	n = 0
	for k in pairs (self.dead_time) do
		n = n + 1
	end

	packet:w_u8(n)

	for k, v in pairs (self.dead_time) do
		packet:w_u8(k)
		utils.w_CTime(packet, v)
	end

	set_save_marker(packet, "save", true, "se_smart_terrain")
end

function se_smart_terrain:STATE_Read(packet, size)

	cse_alife_smart_zone.STATE_Read(self, packet, size)

	if editor() then
		return
	end

	set_save_marker(packet, "load", false, "se_smart_terrain")

	self:read_params()

	if self.combat_manager == nil then
		self.combat_manager = sim_combat.CCombat_manager(self, sim_board.get_sim_board())
	end

	self.combat_manager:load(packet)

	local n = packet:r_u8()
	local T = {}

	self.npc_info = T

	for i = 1, n do

		local id = packet:r_u16()

		T[id] = {}

		local npc_info = T[id]

		npc_info.job_prior = packet:r_u8()
		if npc_info.job_prior == 255 then
			npc_info.job_prior = -1
		end

		npc_info.job_id = packet:r_u8()
		if npc_info.job_id == 255 then
			npc_info.job_id = -1
		end

		npc_info.begin_job = packet:r_bool()
		npc_info.need_job = packet:r_stringZ()
	end

	n = packet:r_u8()
	T = {}

	self.dead_time = T

	for i = 1, n do
		local job_id = packet:r_u8()
		local dead_time = utils.r_CTime(packet)
		T[job_id] = dead_time
	end

	self.need_init_npc = true

	set_save_marker(packet, "load", true, "se_smart_terrain")
end

function se_smart_terrain:init_npc_after_load()

	local function find_job(jobs, npc_info)
		for k, v in pairs (jobs) do
			if v.jobs ~= nil then
				find_job(v.jobs, npc_info)
			else
				if v.job_id == npc_info.job_id then
					npc_info.job = v
					v.npc_id = npc_info.se_obj.id
					return
				end
			end
		end
	end

	local sim = _G.sim
	local self_npc_info = self.npc_info

	for npc_id, loaded_info in pairs (self_npc_info) do
		local se_npc = sim:object(npc_id)
		if se_npc ~= nil then
			local npc_info = fill_npc_info(se_npc)
			npc_info.job_prior = loaded_info.job_prior
			npc_info.job_id = loaded_info.job_id
			npc_info.begin_job = loaded_info.begin_job
			npc_info.need_job = loaded_info.need_job
			find_job(self.jobs, npc_info)
			self_npc_info[npc_id] = npc_info
			if npc_info.job ~= nil then
				self.npc_by_job_section[self.job_data[npc_info.job_id].section] = npc_id
			end
		else
			self_npc_info[npc_id] = nil
		end
	end
end

function se_smart_terrain:call_respawn()
end
--[[
function se_smart_terrain:get_smart_props()
	local props = smart_names.get_smart_terrain_name(self)
	if (props == nil) or (_G.dev_debug) then
		props = self:name().."["..self.id.."]\\n"..
		"player = "..self.player_name.."\\n"..
		self.sim_type.." : "..tostring(self.sim_value).."\\n"..
		"squad_id = "..tostring(self.squad_id).."\\n"..
		"capacity = "..tostring(self.squad_capacity).." ("..
		sim_board.get_sim_board():get_smart_population(self)..")\\n"

		if self.respawn_sector ~= nil then
			props = props.."\\nrespawn_sector: "..tostring(self.respawn_sector).."\\n"
		end

		for k, v in pairs (sim_board.get_sim_board().smarts[self.id].squads) do
			power = tostring(v.squad_power)
			props = props .. tostring(v.squad_id) .. " : " .. power .. "\\n"
		end
	end
	return props
end

function se_smart_terrain:show()

	local time = time_global()

	if self.showtime ~= nil and self.showtime + 200 >= time then
		return
	end

	self.showtime = time

	local player = self.player_name
	local spot = "none"

	if player ~= "none" then

		local relation = 0
		if db.actor then
			relation = db.actor:community_goodwill(player) + game_relations.get_factions_community(player, alife():actor():community())
		else
			relation = game_relations.get_factions_community(player, alife():actor():community())
		end

		if relation == self.relation then
			return
		else
			if relation >= 1000 then
				spot = "friend"
			elseif relation <= -1000 then
				spot = "enemy"
			else
				spot = "neutral"
			end
		end

		self.relation = relation
	end

	if self.smrt_showed_spot == spot then
		level.map_change_spot_hint(self.id, "alife_presentation_smart_"..self.sim_type.."_"..self.smrt_showed_spot, self:get_smart_props())
		return
	end

	if _G.dev_debug then
		if self.smrt_showed_spot ~= nil then
			level.map_remove_object_spot(self.id, "alife_presentation_smart_"..self.sim_type.."_"..self.smrt_showed_spot)
		end
		level.map_add_object_spot(self.id, "alife_presentation_smart_"..self.sim_type.."_"..spot, self:get_smart_props())
		self.smrt_showed_spot = spot
	else
		if (self.smrt_showed_spot ~= nil) and (level.map_has_object_spot(self.id, "alife_presentation_smart_"..self.sim_type.."_"..self.smrt_showed_spot) ~= 0) then
			level.map_remove_object_spot(self.id, "alife_presentation_smart_base_"..self.smrt_showed_spot)
		end
	end
end

function se_smart_terrain:refresh()
--	self:show()
end

function se_smart_terrain:hide()
	if self.smrt_showed_spot == nil then
		return
	end
	level.map_remove_object_spot(self.id, "alife_presentation_smart_"..self.sim_type.."_"..self.smrt_showed_spot)
end
]]
function se_smart_terrain:update()

	cse_alife_smart_zone_update(self)

	self.combat_manager:update()

	local current_time = time_global()

	if current_time < self.check_time then
		return
	end

	local actor = db.actor

	if actor ~= nil then
		local distance = actor:position():distance_to_sqr(self.position)
		local idle_time = math_max(60, 0.003 * distance)
		self.check_time = current_time + idle_time
	else
		self.check_time = current_time + 10
	end

	current_time = nil

	local self_dead_time = self.dead_time

	for job_id, death_time in pairs (self_dead_time) do
		current_time = current_time or game.get_game_time()
		if current_time:diffSec(death_time) >= DEATH_IDLE_TIME then
			self_dead_time[job_id] = nil
		end
	end

	self:update_jobs()
end

function setup_gulag_and_logic_on_spawn(npc, npc_st, se_npc, stype, loaded)
	if not loaded then
		local strn_id = se_npc.m_smart_terrain_id
		if strn_id ~= nil and strn_id ~= 65535 then
			local strn = _G.sim:object(strn_id)
			if strn.npc_info[npc:id()].begin_job == true then
				strn:setup_logic(npc)
				return
			end
		end
	end
	xr_logic.initialize_obj(npc, npc_st, loaded, stype)
end

function on_death(se_npc)
	local sim = _G.sim
	if sim then
--		local se_npc = sim:object(se_npc.id) -- se_npc is already a server object
--		if se_npc == nil then return end -- not possible here
		local strn_id = se_npc:smart_terrain_id()
		if strn_id ~= 65535 then
			sim:object(strn_id):clear_dead(se_npc)
		end
	end
end
--[[
function read_smart_terrain_conditions(self)
	local ini = self.ini
	if ini and ini:section_exist("smart_terrains") then
		local n = ini:line_count("smart_terrains")
		if n > 0 then
			local conds = {}
			local result, field, str
			for i = 0, n - 1 do
				result, field, str = ini:r_line("smart_terrains", i, "", "")
				conds[field] = xr_logic.parse_condlist(nil, nil, nil, str)
			end
			return conds
		end
	end
	return nil
end
]]