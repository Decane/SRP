local money_for_relation = 1000
local money_for_support = 500

function transfer_money_for_relation(first_speaker, second_speaker)
	local npc = dialogs.who_is_npc(first_speaker, second_speaker)
	dialogs.relocate_money(npc, money_for_relation, "out")
end

function has_money_for_relation()
	return db.actor:money() >= money_for_relation
end

function not_has_money_for_relation()
	return not has_money_for_relation()
end

function show_money_for_relation()
	local news_caption = game.translate_string("st_upgr_cost")..": "
	local news_text = tostring(money_for_relation).." "..game.translate_string("st_rubles")
	db.actor:give_talk_message2(news_caption, news_text, "ui_iconsTotal_found_money", "iconed_answer_item")
end

function transfer_detector_advanced()
	if not has_alife_info("esc_joined_stalkers") then
		local give_actor = dialogs.relocate_item_section_to_actor
		give_actor(nil, nil, "detector_advanced")
		give_actor(nil, nil, "antirad", 5)
		db.actor:give_info_portion("esc_joined_stalkers")
	end
end

function is_smart_captured_by_bandits()
	return xr_conditions.smart_captured_by_faction(nil, nil, {"esc_smart_terrain_6_6", "bandit"})
end

function is_smart_not_captured_by_bandits()
	return not xr_conditions.smart_captured_by_faction(nil, nil, {"esc_smart_terrain_6_6", "bandit"})
end

function actor_has_habar()
	return db.actor:object("esc_trader_habar") ~= nil
end

function actor_hasnt_habar()
	return not actor_has_habar()
end

function transfer_habar(first_speaker, second_speaker)
	dialogs.relocate_item_section_from_actor(first_speaker, second_speaker, "esc_trader_habar")
end

function transfer_device_pda_driver(first_speaker, second_speaker)
	dialogs.relocate_item_section_from_actor(first_speaker, second_speaker, "esc_device_pda_driver")
end

function actor_has_device_pda_driver()
	return db.actor:object("esc_device_pda_driver") ~= nil
end

function actor_hasnt_device_pda_driver()
	return not actor_has_device_pda_driver()
end

function has_money_for_support()
	return db.actor:money() >= money_for_support
end

function give_money_for_support(first_speaker, second_speaker)
	local npc = dialogs.who_is_npc(first_speaker, second_speaker)
	dialogs.relocate_money(npc, money_for_support, "out")
end

function army_controls_vehicle_station()
	return xr_conditions.smart_captured_by_faction(nil, nil, {"esc_smart_terrain_7_11", "army"})
end

function update_trade_manager(first_speaker, second_speaker)
	local npc = dialogs.who_is_npc(first_speaker, second_speaker)
	trade_manager.update(npc)
end