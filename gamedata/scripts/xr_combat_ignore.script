function is_enemy(npc, enemy, st, not_check_sim)

	if not npc:alive() then
		return false
	end

	if npc:critically_wounded() then
		return true
	end

	if st.enabled == false then
		return true
	end

	local npc_id = npc:id()
	local npc_st = db.storage[npc_id]

	if npc_st == nil then
		return true
	end

--	npc_st.enemy_id = enemy:id() -- previously used only in xr_conditions.check_fighting() used only in gar_conc_camp_bandits.ltx

	local active_sector = npc_st.active_sector

	if active_sector ~= nil then
		if sr_danger.check_danger_position(enemy:position(), active_sector) == false then
			return false
		end
	end

	local overrides = st.overrides

	if overrides and overrides.combat_ignore then
		if xr_logic.pick_section_from_condlist(enemy, npc, overrides.combat_ignore) ~= nil then
			npc:enable_memory_object(enemy, false)
			return false
		end
		return true
	end

	local se_npc = _G.sim:object(npc_id)

	if se_npc == nil then
		return false
	end

	local board = se_npc.board
	local my_squad = board.squads[se_npc.squad_id]

	if my_squad == nil then
		return true
	end

	local my_squad_src_smart = my_squad.smart_id

	if my_squad_src_smart == nil then
		npc:enable_memory_object(enemy, false)
		return false
	end

	if enemy.id == nil then
		abort("COMBAT_IGNORE. Enemy ID is nil")
	end

	local enemy_id = enemy:id()

	if _G.sim:object(enemy_id) == nil then
		npc:enable_memory_object(enemy, false)
		return false
	end

	if enemy_id == 0 then -- 0 = actor ID
		if not_check_sim ~= true then
			local combat_smart_manager = board.smarts[my_squad.current_action and my_squad.current_action.dest_smrt_id or my_squad_src_smart].smrt.combat_manager
			combat_smart_manager:enemy_actor_callback(my_squad)
			if combat_smart_manager:get_squad_stage(my_squad) ~= "combat" then
				npc:enable_memory_object(enemy, false)
				return false
			end
		end
		return true
	end

	local enemy_squad = db.storage[enemy_id].squad_obj

	if enemy_squad == nil then
		return true
	end

	local enemy_squad_src_smart = enemy_squad.smart_id

	if enemy_squad_src_smart == nil then
		npc:enable_memory_object(enemy, false)
		return false
	end

	local my_squad_dest_smart = my_squad.current_action and my_squad.current_action.dest_smrt_id
	local enemy_squad_dest_smart = enemy_squad.current_action and enemy_squad.current_action.dest_smrt_id
	local combat_smart = nil

	if my_squad_dest_smart ~= nil and my_squad_dest_smart == enemy_squad_dest_smart then
		combat_smart = my_squad_dest_smart
	elseif my_squad_dest_smart ~= nil and enemy_squad_dest_smart == nil and my_squad_dest_smart == enemy_squad_src_smart then
		combat_smart = my_squad_dest_smart
	elseif enemy_squad_dest_smart ~= nil and my_squad_dest_smart == nil and enemy_squad_dest_smart == my_squad_src_smart then
		combat_smart = my_squad_src_smart
	elseif my_squad_dest_smart ~= nil and my_squad_dest_smart == enemy_squad_src_smart and enemy_squad_dest_smart ~= nil and enemy_squad_dest_smart == my_squad_src_smart then
		return true
	elseif my_squad_src_smart == enemy_squad_src_smart then
		return true
	else
		npc:enable_memory_object(enemy, false)
		return false
	end

	local combat_smart_manager = board.smarts[combat_smart].smrt.combat_manager -- combat_smart not nil if we reached here

	combat_smart_manager:enemy_callback(my_squad, enemy_squad)

	if combat_smart_manager:get_squad_stage(my_squad) ~= "combat" then
		npc:enable_memory_object(enemy, false)
		return false
	end

	return true
end

----------------------------------------------------------------------------------------------------------------------

class "action_process_enemy"

function action_process_enemy:__init(obj, storage)
	self.object = obj
	self.st	= storage
end

function action_process_enemy:enemy_callback(obj, enemy)
	return is_enemy(obj, enemy, self.st, false)
end

function action_process_enemy:hit_callback(obj, amount, local_direction, who, bone_index)

	if who == nil or amount == 0 then
		return
	end

	if who:id() == 0 then -- 0 = actor ID
		local overrides = self.st.overrides
		if not overrides or not overrides.combat_ignore_keep_when_attacked then
			self.st.enabled = false
		end
	end
end

----------------------------------------------------------------------------------------------------------------------
-- binder
----------------------------------------------------------------------------------------------------------------------

function add_to_binder(npc, ini, scheme, section, storage)
	storage.action = this.action_process_enemy(npc, storage)
end

function reset_combat_ignore_checker(npc, scheme, npc_st) --, section)
	local storage = npc_st.combat_ignore
	npc:set_enemy_callback(storage.action.enemy_callback, storage.action)
	xr_logic.subscribe_action_for_events(npc, storage, storage.action)
	storage.overrides = npc_st.overrides
	storage.enabled = true
end

function disable_scheme(npc, scheme)
	npc:set_enemy_callback()
	local st = db.storage[npc:id()][scheme]
	if st and st.actions then
		st.actions[st.action] = nil
	end
end