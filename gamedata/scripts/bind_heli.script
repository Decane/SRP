local object_binder_update = object_binder.update

function bind(obj)
	local ini = obj:spawn_ini()
	if ini and ini:section_exist("logic") then
		obj:bind_object(heli_binder(obj, ini))
	end
end

---------------------------------------------------------------------------------------------

class "heli_binder" (object_binder)

function heli_binder:__init(obj, ini) super(obj)
	self.ini = ini
	self.initialized = false
	self.loaded = false
	self.heli_fire = heli_fire.get_heli_firer(obj)
end

function heli_binder:reload(section)
	object_binder.reload(self, section)
end

function heli_binder:reinit()

	object_binder.reinit(self)

	local sobj = self.object
	local sobj_id = sobj:id()

	local t = {}

	db.storage[sobj_id] = t

	self.st = t

	self.heliObject = sobj:get_helicopter()

	sobj:set_callback(callback.helicopter_on_point, self.on_point, self)
	sobj:set_callback(callback.helicopter_on_hit, self.on_hit, self)

	local self_st = self.st

	self_st.combat = heli_combat.heli_combat(sobj, self.heliObject)

	self.last_hit_snd_timeout = 0

	local ltx = system_ini()

	self.flame_start_health	= utils.cfg_get_number(ltx, "helicopter", "flame_start_health", sobj, true)

	local object_ini = sobj:spawn_ini()

	self.snd_hit = utils.cfg_get_string(object_ini, "helicopter", "snd_hit", sobj, false, "", "heli_hit")
	self.snd_damage = utils.cfg_get_string(object_ini, "helicopter", "snd_damage", sobj, false, "", "heli_damaged")
	self.snd_down = utils.cfg_get_string(object_ini, "helicopter", "snd_down", sobj, false, "", "heli_down")

	self_st.last_alt = self.heliObject:GetRealAltitude()
	self_st.alt_check_time = time_global() + 1000
end

function heli_binder:update(delta)

	object_binder_update(self, delta)

	local sobj = self.object
	local self_st = self.st

	if not self.initialized and db.actor then
		self.initialized = true
		xr_logic.initialize_obj(sobj, self_st, self.loaded, modules.stype_heli)
	end

	if self_st.active_section ~= nil then
		xr_logic.issue_event(nil, self_st[self_st.active_scheme], "update", delta)
	end

	self:check_health()

	xr_sound.update(sobj:id())
end

function heli_binder:net_spawn(data)

	if not object_binder.net_spawn(self, data) then
		return false
	end

	local sobj = self.object

	db.add_obj(sobj)
	db.add_heli(sobj)

	return true
end

function heli_binder:net_destroy()

	local sobj = self.object

	sobj:set_callback(callback.helicopter_on_point, nil)	-- SRP
	sobj:set_callback(callback.helicopter_on_hit, nil)	-- SRP

	db.del_obj(sobj)
	db.del_heli(sobj)

	object_binder.net_destroy(self)
end

function heli_binder:net_save_relevant()
	return true
end

function heli_binder:save(packet)
	object_binder.save(self, packet)
	set_save_marker(packet, "save", false, "heli_binder")
	xr_logic.save_obj(self.object, packet)
	set_save_marker(packet, "save", true, "heli_binder")
	self.st.combat:save(packet)
end

function heli_binder:load(packet)
	self.loaded = true
	set_save_marker(packet, "load", false, "heli_binder")
	object_binder.load(self, packet)
	xr_logic.load_obj(self.object, packet)
	set_save_marker(packet, "load", true, "heli_binder")
	self.st.combat:load(packet)
end

function heli_binder:check_health()

	local heli = self.heliObject

	if not heli.m_dead then

		local health = get_heli_health(self.heliObject, self.st)
		local sobj = self.object
		local sobj_id = sobj:id()

		if health < self.flame_start_health and not heli.m_flame_started then
			heli_start_flame(sobj)
			xr_sound.set_sound_play(sobj_id, self.snd_damage)
		end

		if health <= 0.005 and not self.st.immortal then
			heli_die(sobj)
			xr_sound.set_sound_play(sobj_id, self.snd_down)
		end
	end
end

---------------------------------------- callbacks ------------------------------------------

function heli_binder:on_hit(power, impulse, hit_type, enemy_id)

	local enemy = level.object_by_id(enemy_id)
	local enemy_cls_id = get_clsid(enemy)

	self.heli_fire.enemy = enemy
	self.heli_fire:update_hit()

	if enemy_cls_id == clsid.actor or enemy_cls_id == clsid.script_stalker then
		if self.st.hit then
			xr_logic.issue_event(nil, self.st.hit, "hit_callback", self.object, power, nil, enemy, nil)
		end
	end

	local global_time = time_global()

	if self.last_hit_snd_timeout < global_time then
		xr_sound.set_sound_play(self.object:id(), self.snd_hit)
		self.last_hit_snd_timeout = global_time + math.random(4000, 8000)
	end
end

function heli_binder:on_point(distance, position, path_idx)
	if self.st.active_section ~= nil then
		xr_logic.issue_event(nil, self.st[self.st.active_scheme], "waypoint_callback", self.object, nil, path_idx)
	end
end

---------------------------------------------------------------------------------------------

function get_heli_health(heli, st)

	local health

	if st.invulnerable then
		health = 1
		heli:SetfHealth(health)
	else
		health = heli:GetfHealth()
		if health < 0 then
			heli:SetfHealth(0)
			health = 0
		end
	end

	return health
end

function is_heli_alive(obj)
	return get_heli_health(obj:get_helicopter(), db.storage[obj:id()]) > 0.005
end

function heli_start_flame(obj)
	obj:get_helicopter():StartFlame()
end

function heli_die(obj)

	local heli = obj:get_helicopter()
	local st = db.storage[obj:id()]

	obj:set_callback(callback.helicopter_on_point, nil)	-- SRP
	obj:set_callback(callback.helicopter_on_hit, nil)	-- SRP

	heli:Die()

	db.del_heli(obj)

	st.last_alt = heli:GetRealAltitude()
	st.alt_check_time = time_global() + 1000
end