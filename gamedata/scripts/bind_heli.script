function bind(obj) -- called 1st
	obj:bind_object(heli_binder(obj))
end

--------------------------------------------------------------------------------

class "heli_binder" (object_binder)

function heli_binder:__init(obj) super(obj) -- called 2nd
	self.initialized          = false
	self.loaded               = false
	self.heli_fire            = heli_fire.get_heli_firer(obj)
	self.heliObject           = obj:get_helicopter()
	self.st                   = {combat = heli_combat.heli_combat(obj, self.heliObject)}
	self.last_hit_snd_timeout = 0
	self.flame_start_health	  = utils.cfg_get_number(system_ini(), "helicopter", "flame_start_health", obj, true)
	self.snd_hit              = "heli_hit"
	self.snd_damage           = "heli_damaged"
	self.snd_down             = "heli_down"
end

function heli_binder:reload(section) -- called 3rd
	object_binder.reload(self, section)
end

function heli_binder:reinit() -- called 4th
	object_binder.reinit(self)
	db.storage[self.object:id()] = self.st
end

function heli_binder:net_spawn(se_abstract) -- called 5th

	if not object_binder.net_spawn(self, se_abstract) then
		return false
	end

	local obj = self.object

	db.add_obj(obj)

	obj:set_callback(callback.helicopter_on_point, self.on_point, self)
	obj:set_callback(callback.helicopter_on_hit, self.on_hit, self)

	return true
end

function heli_binder:net_destroy()

	local obj = self.object

	obj:set_callback(callback.helicopter_on_point, nil)
	obj:set_callback(callback.helicopter_on_hit, nil)

	db.del_obj(obj)

	object_binder.net_destroy(self)
end

local object_binder_update = object_binder.update

function heli_binder:update(delta) -- called 6th

	object_binder_update(self, delta)

	local obj_st = self.st

	if not self.initialized then
		self.initialized = true
		xr_logic.initialize_obj(self.object, obj_st, self.loaded, modules.stype_heli)
	end

	if obj_st.active_scheme then
		xr_logic.issue_event(nil, obj_st[obj_st.active_scheme], "update", delta)
	end

	self:check_health()

	xr_sound.update(self.object:id())
end

--------------------------------------------------------------------------------

function heli_binder:check_health()

	local heli = self.heliObject

	if not heli.m_dead then

		local health = get_heli_health(heli, self.st)
		local obj = self.object
		local obj_id = obj:id()

		if health < self.flame_start_health and not heli.m_flame_started then
			heli:StartFlame()
			xr_sound.set_sound_play(obj_id, self.snd_damage)
		end

		if health <= 0.005 and not self.st.immortal then
			heli_die(obj)
			xr_sound.set_sound_play(obj_id, self.snd_down)
		end
	end
end

function heli_binder:on_hit(power, impulse, hit_type, enemy_id)

	local enemy = level.object_by_id(enemy_id)
	local enemy_cls_id = get_clsid(enemy)

	self.heli_fire.enemy = enemy
	self.heli_fire:update_hit()

	if enemy_cls_id == clsid.actor or enemy_cls_id == clsid.script_stalker then
		if self.st.hit then
			xr_logic.issue_event(nil, self.st.hit, "hit_callback", self.object, power, nil, enemy, nil)
		end
	end

	local global_time = time_global()

	if self.last_hit_snd_timeout < global_time then
		xr_sound.set_sound_play(self.object:id(), self.snd_hit)
		self.last_hit_snd_timeout = global_time + math.random(4000, 8000)
	end
end

function heli_binder:on_point(distance, position, path_idx)
	if self.st.active_scheme then
		xr_logic.issue_event(nil, self.st[self.st.active_scheme], "waypoint_callback", self.object, nil, path_idx)
	end
end

--------------------------------------------------------------------------------

function heli_binder:net_save_relevant()
	return true
end

function heli_binder:save(packet)
	set_save_marker(packet, "save", false, "heli_binder")
	object_binder.save(self, packet)
	xr_logic.save_obj(self.object, packet)
	set_save_marker(packet, "save", true, "heli_binder")
	self.st.combat:save(packet)
end

function heli_binder:load(packet) -- called 4.5th (only on load)
	set_save_marker(packet, "load", false, "heli_binder")
	object_binder.load(self, packet)
	xr_logic.load_obj(self.object, packet)
	set_save_marker(packet, "load", true, "heli_binder")
	self.st.combat:load(packet)
	self.loaded = true
end

--------------------------------------------------------------------------------

function get_heli_health(heli, st)

	local health

	if st.invulnerable then
		health = 1
		heli:SetfHealth(health)
	else
		health = heli:GetfHealth()
		if health < 0 then
			heli:SetfHealth(0)
			health = 0
		end
	end

	return health
end

function heli_die(obj)
	obj:set_callback(callback.helicopter_on_point, nil)
	obj:set_callback(callback.helicopter_on_hit, nil)
	obj:get_helicopter():Die()
end