function AddToMotivator(npc) -- called 1st
	npc:bind_object(this.motivator_binder(npc))
end

bloodsucker_zone_enter = {}
local bloodsuckers_restr = {}

function register_bloodsucker_restr(obj)
	bloodsuckers_restr[obj:id()] = obj
end

local function clear_npc_from_bloodsucker_zones(npc_id)
	for restr_id in pairs (bloodsuckers_restr) do
		if bloodsucker_zone_enter[restr_id] and bloodsucker_zone_enter[restr_id]:id() == npc_id then
			bloodsucker_zone_enter[restr_id] = nil
		end
	end
end

local function init_corpse_known_info(npc)
	local spawn_ini = npc:spawn_ini()
	local filename = nil
	if spawn_ini then
		filename = utils.cfg_get_string(spawn_ini, "logic", "cfg", nil, false, "")
	end
	local char_ini = nil
	if filename ~= nil then
		char_ini = ini_file(filename)
	else
		char_ini = spawn_ini
	end
	if char_ini and char_ini:section_exist("known_info") then
		for i = 0, char_ini:line_count("known_info") - 1 do
			local found, info = char_ini:r_line("known_info", i, "", "")
			npc:give_info_portion(info)
		end
--		dbglog("Dead NPC with ID "..npc:id().." has known info.")
	end
end

--------------------------------------------------------------------------------

class "motivator_binder" (object_binder)

function motivator_binder:__init(npc) super(npc) -- called 2nd
	self.loaded = false
	self.update_time = -10000
	self.first_update_done = false
	self.death_recorded = false
	self.is_strelok = npc:profile_name() == "stc_strelok"
	self.st = {}
end

function motivator_binder:reload(section) -- called 3rd
	object_binder.reload(self, section)
end

function motivator_binder:reinit() -- called 4th
	object_binder.reinit(self)
	local npc = self.object
	local npc_st = self.st
	db.storage[npc:id()] = npc_st
	if npc:alive() then
		npc_st.state_mgr = state_mgr.bind_manager(npc)
		npc_st.move_mgr = move_mgr.move_mgr(npc)
		npc_st.move_mgr:initialize()
	end
end

function motivator_binder:net_spawn(se_abstract) -- called 5th

	if not object_binder.net_spawn(self, se_abstract) then
		return false
	end

	local npc = self.object

	npc:set_callback(callback.use_object, motivator_binder.use_callback, self)

	if not npc:alive() then
		if not self.loaded then
			init_corpse_known_info(npc)
		end
		return true
	end

	-- DC20230306: It's possible for motivator_binder:net_spawn() to be called before
	-- actor_binder:net_spawn() or even actor_binder:__init(). Several function calls
	-- originating from motivator_binder:net_spawn() assume that db.actor has been
	-- initialized, and a few corrupt the NPC if db.actor = nil, e.g. npc:see(db.actor)
	-- in xr_wounded.script and npc:set_goodwill(goodwill, db.actor) here.

	if db.actor then
		self:finish_net_spawn()
	else
		bind_stalker.defer_net_spawn(self)
	end

	return true
end

function motivator_binder:finish_net_spawn()

	local npc = self.object
	local npc_id = npc:id()
	local se_npc = _G.sim:object(npc_id)
	local npc_st = self.st

	xrs_dyn_music.add_object(npc)

	npc_st.squad_obj = sim_board.get_sim_board().squads[se_npc.squad_id]

	db.add_obj(npc)

	npc:set_patrol_extrapolate_callback(motivator_binder.extrapolate_callback, self)
	npc:set_callback(callback.hit, motivator_binder.hit_callback, self)
	npc:set_callback(callback.death, motivator_binder.death_callback, self)
	npc:apply_loophole_direction_distance(1)

	local goodwill = db.goodwill.relations[npc_id]
	if goodwill then
		npc:set_goodwill(goodwill, db.actor)
	end

	local sympathy = db.goodwill.sympathy[npc_id]
	if sympathy then
		npc:set_sympathy(sympathy)
	end

	db.add_enemy(npc)

	self.e_index = db.heli_enemy_count - 1

	sound_theme.init_npc_sound(npc)

	local manager = npc:motivation_action_manager()
	manager:remove_evaluator(stalker_ids.property_anomaly)
	manager:add_evaluator(stalker_ids.property_anomaly, property_evaluator_const(false))

	xr_smartcover.init_global_evaluators(npc)

	smart_terrain.setup_gulag_and_logic_on_spawn(npc, npc_st, se_npc, modules.stype_stalker, self.loaded)

	local char_ini = npc_st.ini
	if char_ini:section_exist("known_info") then
		for i = 0, char_ini:line_count("known_info") - 1 do
			local found, info = char_ini:r_line("known_info", i, "", "")
			npc:give_info_portion(info)
		end
		se_npc.has_known_info = true
--		dbglog("NPC with ID "..npc_id.." has known info.")
	end

	bloodsucker_reaction.add_bloodsucker_reactions(npc)
	actor_reaction.add_actor_reactions(npc)

	if npc:character_community() ~= "zombied" then
		post_combat_idle.add_post_combat_idle(npc)
	end

	npc:group_throw_time_interval(2000)

	if self.is_strelok then
		stc_strelok_health_manager.cs_strelok_health(npc)
	end
end

function motivator_binder:net_destroy()

	local npc = self.object

	npc:set_callback(callback.use_object, nil) -- SRP
	self:clear_callbacks()

	local npc_id = npc:id()

	clear_npc_from_bloodsucker_zones(npc_id)

	xrs_dyn_music.remove_object(npc_id)
	xr_sound.stop_sounds_by_id(npc_id)

	local npc_st = self.st

	if npc_st.active_scheme then
		xr_logic.issue_event(nil, npc_st[npc_st.active_scheme], "net_destroy", npc)
	end

	if self.e_index ~= nil then
		db.delete_enemy(self.e_index)
	end

	if self.is_strelok then
		stc_strelok_health_manager.remove_health_bar()
	end

	db.del_obj(npc)

	object_binder.net_destroy(self)
end

local stalker_ids_action_combat_planner = stalker_ids.action_combat_planner
local object_binder_update = object_binder.update

function motivator_binder:update(delta) -- called 6th

	object_binder_update(self, delta)

	if self.death_recorded then
		return
	end

	local npc = self.object
	local npc_alive = npc:alive()

	if not self.first_update_done then
		if npc_alive then
			-- We update the NPC's trade supplies on the first update to prevent
			-- e.g. his walkie-talkie (Suslov) or pistol (flea market night
			-- trader) vanishing from his hands if the first time the NPC is
			-- "used" after loading is with the item equipped:
			trade_manager.update(npc)
			if self.is_strelok then
				npc:start_particles("monsters\\polter_idle", "bip01_head")
			end
		else
			local npc_id = npc:id()
			local se_npc = _G.sim:object(npc_id)
			if se_npc.death_droped ~= true then
				-- We create drop items for perma-corpses if we haven't already;
				-- they don't get a death_callback() call:
				death_manager.drop_manager(npc):create_release_item(se_npc, npc_id)
				level.map_add_object_spot_ser(npc_id, "deadbody_location", "") -- see DC20190408
				level.map_add_object_spot_ser(npc_id, "deadbody_location", "")
			end
		end
		self.first_update_done = true
	end

	local global_time = time_global()

	if global_time > self.update_time then
		sr_light.check_light(npc)
		if npc_alive then
			local npc_pos = npc:position()
			for restr_id, restr in pairs (bloodsuckers_restr) do
				if restr:inside(npc_pos) then
					if bloodsucker_zone_enter[restr_id] == nil then
						bloodsucker_zone_enter[restr_id] = npc
					end
				else
					if bloodsucker_zone_enter[restr_id] and bloodsucker_zone_enter[restr_id]:id() == npc:id() then
						bloodsucker_zone_enter[restr_id] = nil
					end
				end
			end
			self.update_time = global_time + 1000
		end
	end

	local npc_st = self.st

	if npc_alive then

		if npc_st.active_scheme then
			local need_switch = true
			local manager = npc:motivation_action_manager()
			if manager:initialized() and manager:current_action_id() == stalker_ids_action_combat_planner then
--				local overrides = npc_st.overrides
--				if overrides.on_combat then -- overrides guaranteed valid given npc_st.active_scheme is; see xr_logic.activate_by_section()
--					xr_logic.pick_section_from_condlist(db.actor, npc, overrides.on_combat) -- no on_combat lines outside of [logic] in vanilla
--				end
				local st_combat = npc_st.combat
				if st_combat and st_combat.enabled then
					if xr_logic.try_switch_to_another_section(npc, st_combat, db.actor) then
						need_switch = false
					end
				end
			end
			if need_switch then
				xr_logic.try_switch_to_another_section(npc, npc_st[npc_st.active_scheme], db.actor)
			end
		end

		npc_st.active_sector = sr_danger.select_active_sectors(npc)
		npc_st.state_mgr:update()

		local npc_id = npc:id()

		xr_sound.update(npc_id)

		local squad = npc_st.squad_obj

		if squad and squad.commander_id == npc_id then
			squad:update()
		end
	else
		npc_st.state_mgr = nil
		npc_st.move_mgr = nil -- SRP
		self.death_recorded = true
	end
end

--------------------------------------------------------------------------------

function motivator_binder:clear_callbacks()
	local npc = self.object
	npc:set_patrol_extrapolate_callback(nil)
	npc:set_callback(callback.hit, nil)
	npc:set_callback(callback.death, nil)
end

function motivator_binder:extrapolate_callback(current_point_index)

	local npc = self.object
	local npc_st = self.st

	if npc_st.active_scheme then
		xr_logic.issue_event(nil, npc_st[npc_st.active_scheme], "extrapolate_callback")
		npc_st.move_mgr:extrapolate_callback(npc)
	end

	return patrol(npc:patrol()):flags(current_point_index):get() == 0
end

function motivator_binder:hit_callback(victim, amount, local_direction, hitter, bone_index)

	if self.is_strelok then
		stc_strelok_health_manager.hit_callback(victim, hitter, amount)
	end

	local npc_st = self.st

	if npc_st.active_scheme then
		xr_logic.issue_event(nil, npc_st[npc_st.active_scheme], "hit_callback", victim, amount, local_direction, hitter, bone_index)
	end

	if npc_st.combat_ignore then
		xr_logic.issue_event(nil, npc_st.combat_ignore, "hit_callback", victim, amount, local_direction, hitter, bone_index)
	end

	if npc_st.combat then
		xr_logic.issue_event(nil, npc_st.combat, "hit_callback", victim, amount, local_direction, hitter, bone_index)
	end

	if npc_st.hit then
		xr_logic.issue_event(nil, npc_st.hit, "hit_callback", victim, amount, local_direction, hitter, bone_index)
	end

	if amount > 0 then
		local victim_id = victim:id()
		xr_wounded.hit_callback(victim_id)
		if hitter:id() == 0 then -- 0 = actor ID
			sim_combat.hit_callback(victim_id)
		end
	end
end

function motivator_binder:death_callback(victim, culprit)

	self:clear_callbacks()

	local npc_id = victim:id()
	local npc_st = self.st

	clear_npc_from_bloodsucker_zones(npc_id)

	xrs_dyn_music.remove_object(npc_id)

	stalker_generic.remove_level_spot(victim, npc_st)

	-- DC20190408: Hack per Shoker to add a corpse map spot in case the engine fails to.
	-- The spot needs to be added twice to guarantee that the engine's interference will
	-- not prevent it from being rendered on the minimap.

	level.map_add_object_spot_ser(npc_id, "deadbody_location", "")
	level.map_add_object_spot_ser(npc_id, "deadbody_location", "")

	if culprit:id() == 0 then -- 0 = actor ID
		xr_statistic.addKillCount(victim)
		xr_statistic.inc_killed_stalkers_counter()
	end

	if npc_st.death then
		xr_logic.issue_event(nil, npc_st.death, "death_callback", victim, culprit)
	end

	if npc_st.active_scheme then
		xr_logic.issue_event(nil, npc_st[npc_st.active_scheme], "death_callback", victim, culprit)
	end

	sr_light.check_light(victim)

	local se_npc = _G.sim:object(npc_id)

	death_manager.drop_manager(victim):create_release_item(se_npc, npc_id)

	db.delete_enemy(self.e_index)

	bloodsucker_reaction.disable_bloodsucker_reaction(victim)

	release_body_manager.moving_dead_body(victim, se_npc, npc_id) --' Distemper 11.02.2008
end

function motivator_binder:use_callback(used_npc, user)
	if used_npc:alive() then
		trade_manager.update(used_npc)
		dialog_manager.restore_certain_disabled_phrases(used_npc)
		xr_use.notify_on_use(used_npc, user)
		local npc_st = self.st
		if npc_st.active_scheme then
			xr_logic.issue_event(nil, npc_st[npc_st.active_scheme], "use_callback", used_npc, user)
		end
	else
		local se_npc = _G.sim:object(used_npc:id())
		if se_npc.treasure_processed ~= 1 then
			treasure_manager.use(used_npc)
			se_npc.treasure_processed = 1
		end
	end
end

--------------------------------------------------------------------------------

function motivator_binder:net_save_relevant()
	return true
end

function motivator_binder:save(packet)

	set_save_marker(packet, "save", false, "motivator_binder")

	object_binder.save(self, packet)

	if self.is_strelok then
		stc_strelok_health_manager.save(packet)
	end

	local npc = self.object

	xr_logic.save_obj(npc, packet)
	xr_sound.save_npc(packet, npc:id())

	set_save_marker(packet, "save", true, "motivator_binder")
end

function motivator_binder:load(reader) -- called 4.5th (only on load)

	set_save_marker(reader, "load", false, "motivator_binder")

	object_binder.load(self, reader)

	if self.is_strelok then
		stc_strelok_health_manager.load(reader)
	end

	local npc = self.object

	xr_logic.load_obj(npc, reader)
	xr_sound.load_npc(reader, npc:id())

	set_save_marker(reader, "load", true, "motivator_binder")

	self.loaded = true
end

--------------------------------------------------------------------------------

local wp_meet_false       = world_property(xr_evaluators_id.stohe_meet_base + 1, false)
local wp_wounded_false    = world_property(xr_evaluators_id.sidor_wounded_base, false)
local wp_abuse_false      = world_property(xr_evaluators_id.abuse_base, false)

local wp_alive_true       = world_property(stalker_ids.property_alive, true)
local wp_danger_false     = world_property(stalker_ids.property_danger, false)
local wp_enemy_false      = world_property(stalker_ids.property_enemy, false)
local wp_anomaly_false    = world_property(stalker_ids.property_anomaly, false)
local wp_smartcover_false = world_property(xr_evaluators_id.smartcover_action + 3, false)

function addCommonPrecondition(action)
	action:add_precondition(wp_meet_false)
	action:add_precondition(wp_wounded_false)
	action:add_precondition(wp_abuse_false)
end

function addPrecondAliveNoDangerNoEnemyNoAnomalyNoSmartcover(action)
	action:add_precondition(wp_alive_true)
	action:add_precondition(wp_danger_false)
	action:add_precondition(wp_enemy_false)
	action:add_precondition(wp_anomaly_false)
	action:add_precondition(wp_smartcover_false)
end