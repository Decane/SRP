----------------------------------------------------------------------------------------------------------------------
-- STALKER NPC INFO
----------------------------------------------------------------------------------------------------------------------
--[[
function set_npc_info(npc, ini, scheme, section)

	local in_info	= get_infos_from_data(npc, utils.cfg_get_string(ini, section, "in", npc, false, ""))
	local out_info	= get_infos_from_data(npc, utils.cfg_get_string(ini, section, "out", npc, false, ""))

	for k, v in pairs (in_info) do
		npc:give_info_portion(v)
	end

	for k, v in pairs (out_info) do
		npc:disable_info_portion(v)
	end
end

function get_infos_from_data(npc, s)
	local t = {}
	if s then
		for name in string.gfind(s, "(%|*[^%|]+%|*)%p*") do
			local condlist = xr_logic.parse_condlist(nil, nil, nil, name)
			if condlist then
				table.insert(t, xr_logic.pick_section_from_condlist(db.actor, npc, condlist))
			end
		end
	end
	return t
end
]]
----------------------------------------------------------------------------------------------------------------------
-- STALKER IGNORE MONSTER THRESHOLD
----------------------------------------------------------------------------------------------------------------------

function reset_threshold(npc, scheme, st, section)

	local threshold_section
	if scheme == nil or scheme == "nil" then
		threshold_section = utils.cfg_get_string(st.ini, st.section_logic, "threshold", npc, false, "")
	else
		threshold_section = utils.cfg_get_string(st.ini, section, "threshold", npc, false, "")
	end

	if threshold_section then

		local max_ignore_distance = utils.cfg_get_number(st.ini, threshold_section, "max_ignore_distance", npc, false)
		if max_ignore_distance then
			npc:max_ignore_monster_distance(max_ignore_distance)
		else
			npc:restore_max_ignore_monster_distance()
		end

		local ignore_monster = utils.cfg_get_number(st.ini, threshold_section, "ignore_monster", npc, false)
		if ignore_monster then
			npc:ignore_monster_threshold(ignore_monster)
		else
			npc:restore_ignore_monster_threshold()
		end
	end
end


----------------------------------------------------------------------------------------------------------------------
-- STALKER MAP SHOW
----------------------------------------------------------------------------------------------------------------------

function reset_show_spot(npc, scheme, st, section)

	local sim = _G.sim
	if not sim then
		return
	end

	local spot_section
	if scheme == nil or scheme == "nil" then
		spot_section = utils.cfg_get_string(st.ini, st.section_logic, "show_spot", npc, false, "")
	else
		spot_section = utils.cfg_get_string(st.ini, section, "show_spot", npc, false, "")
	end

	local map_spot = utils.cfg_get_string(st.ini, st.section_logic, "level_spot", npc, false, "")
	if map_spot == nil then
		map_spot = utils.cfg_get_string(st.ini, section, "level_spot", npc, false, "")
	end

	local act = db.actor

	if map_spot ~= nil then
		map_spot = xr_logic.parse_condlist(nil, nil, nil, map_spot)
		map_spot = xr_logic.pick_section_from_condlist(act, npc, map_spot)
	end

	if spot_section == nil then
		spot_section = "true"
	end

	local spot_condlist = xr_logic.parse_condlist(nil, nil, nil, spot_section)
	local spot = xr_logic.pick_section_from_condlist(act, npc, spot_condlist)

	local npc_id = npc:id()
	local obj = sim:object(npc_id)

	if obj and obj.online then

		if spot == "false" then
			obj:visible_for_map(false)
		else
			obj:visible_for_map(true)
		end

		if map_spot ~= nil and not xr_surge_hide.surge_activated then

			local map_location = ""
			local hint = ""

			if map_spot == "trader" then
				map_location = "ui_pda2_trader_location"
				hint = "st_ui_pda_legend_trader"
			elseif map_spot == "mechanic" then
				map_location = "ui_pda2_mechanic_location"
				hint = game.translate_string("st_ui_pda_legend_mechanic").."\\n"..inventory_upgrades.get_technic_specialization(npc:profile_name())	-- not npc:section()
			elseif map_spot == "guider" then
				map_location = "ui_pda2_scout_location"
				hint = "st_ui_pda_legend_scout"
				local smarts_tbl = sim_board.get_sim_board().smarts
				local npc_smrt_id = obj.m_smart_terrain_id
				if npc_smrt_id ~= 65535 and npc_smrt_id ~= nil then
					local npc_smart = smarts_tbl[npc_smrt_id].smrt
					if npc_smart then
						local smart_name = smart_names.get_smart_terrain_name(npc_smart)
						hint = game.translate_string(hint).."\\n"..game.translate_string("st_location").." "..smart_name
					end
				end
			elseif map_spot == "quest_npc" then
				map_location = "ui_pda2_quest_npc_location"
				hint = "st_ui_pda_legend_vip"
			end

			if level.map_has_object_spot(npc_id, map_location) ~= 0 then
				level.map_remove_object_spot(npc_id, map_location)
			end

			if act and npc and npc:general_goodwill(act) > -1000 then
				level.map_add_object_spot(npc_id, map_location, hint)
			end
		else
			local map_has_object_spot = level.map_has_object_spot
			if map_has_object_spot(npc_id, "ui_pda2_trader_location") ~= 0 then
				level.map_remove_object_spot(npc_id, "ui_pda2_trader_location")
			elseif map_has_object_spot(npc_id, "ui_pda2_mechanic_location") ~= 0 then
				level.map_remove_object_spot(npc_id, "ui_pda2_mechanic_location")
			elseif map_has_object_spot(npc_id, "ui_pda2_scout_location") ~= 0 then
				level.map_remove_object_spot(npc_id, "ui_pda2_scout_location")
			elseif map_has_object_spot(npc_id, "ui_pda2_quest_npc_location") ~= 0 then
				level.map_remove_object_spot(npc_id, "ui_pda2_quest_npc_location")
			end
		end
	end
end

function remove_level_spot(npc, st)

	local sim = _G.sim
	if not sim then
		return
	end

	local map_spot = utils.cfg_get_string(st.ini, st.section_logic, "level_spot", npc, false, "")
	if map_spot == nil then
		map_spot = utils.cfg_get_string(st.ini, st.active_section, "level_spot", npc, false, "")
	end

	if map_spot ~= nil then
		map_spot = xr_logic.parse_condlist(nil, nil, nil, map_spot)
		map_spot = xr_logic.pick_section_from_condlist(db.actor, npc, map_spot)
	end

	local npc_id = npc:id()
	local obj = sim:object(npc_id)

	if obj then
		if map_spot ~= "" and map_spot ~= nil then
			local map_location = ""
			if map_spot == "trader" then
				map_location = "ui_pda2_trader_location"
			elseif map_spot == "mechanic" then
				map_location = "ui_pda2_mechanic_location"
			elseif map_spot == "guider" then
				map_location = "ui_pda2_scout_location"
			elseif map_spot == "quest_npc" then
				map_location = "ui_pda2_quest_npc_location"
			end
			if level.map_has_object_spot(npc_id, map_location) ~= 0 then
				level.map_remove_object_spot(npc_id, map_location)
			end
		end
	end
end

--'--------------------------------------------------------------------------------------------------------------------
--' INVULNERABILITY
--'--------------------------------------------------------------------------------------------------------------------

function reset_invulnerability(npc, ini, section)
	local invulnerability = utils.cfg_get_bool(ini, section, "invulnerable", npc, false, false)
--[[
	Uncomment the if-statement below and self.invulnerability in sim_squad_scripted:init_squad() to enable
	invulnerability for any NPC whose squad's 'invulnerability' param has condlist value evaluating to 'true'. Note: Per
	the (broken) code in sim_squad_scripted:check_invulnerability(), GSC seems to have intended for the squad-specific
	'invulnerability' param to be overridden by the NPC section logic -specific 'invulnerable' param if the latter is
	set. To achieve this, we would have to edit utils.cfg_get_bool() to tolerate a non-boolean default value, but this
	is unsafe without also explicitly specifying "false" as the default in any call to that function which lacks an
	explicit default (and whose sixth argument hence evaluates to nil).

	if not invulnerability then
		local squad = sim_board.get_sim_board().squads[_G.sim:object(npc:id()).squad_id]
		if squad and squad.invulnerability then
			invulnerability = xr_logic.pick_section_from_condlist(db.actor, squad, squad.invulnerability) == "true"
		end
	end
]]
	if npc:invulnerable() ~= invulnerability then
		npc:invulnerable(invulnerability)
	end
end
--[[
function disable_invulnerability(npc) -- now inlined in xr_logic.disable_generic_schemes()
	npc:invulnerable(false)
end
]]
--'--------------------------------------------------------------------------------------------------------------------
--' TEAM SQUAD GROUP
--'--------------------------------------------------------------------------------------------------------------------

function reset_group(npc, ini, section)
	local group = utils.cfg_get_number(ini, section, "group", npc, false, -1)
	if group ~= -1 then
		npc:change_team(npc:team(), npc:squad(), group)
	end
end

function take_items_enabled(npc, scheme, st, section)
	local take_items = nil
	if st.ini:line_exist(section, "take_items") then
		take_items = utils.cfg_get_bool(st.ini, section, "take_items", npc, false, true)
	else
		take_items = utils.cfg_get_bool(st.ini, st.section_logic, "take_items", npc, false, true)
	end
	npc:take_items_enabled(take_items)
end