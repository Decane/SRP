-- DC170429: Fixed the incorrect parsing of hyphenated item names appearing as requisites for ammo in section [item_dependence] in death_generic.ltx.

local sim = _G.sim
local item_dependence = {}  -- example key-value pair: ["ammo_vog-25p"] = {wpn_groza = true, wpn_rg-6 = true}
local limits_by_item  = nil -- example key-value pair: ["ammo_9x18_fmj"] = {min = 20, max = 60}

item_by_community     = {}  -- example key-value pair: ["stalker"] = {af_cristall = 0.001, ammo_9x18_fmj = 1}
count_by_level        = {}  -- example key-value pair: ["marsh"] = {["ammo_9x18_fmj"] = {min = 20, max = 60}}
always_keep_item      = {}  -- example key-value pair: ["flesh_up_ac_ak74u"] = true

function init_drop_settings()
	local ini = ini_file("misc\\death_generic.ltx")
	if not ini:section_exist("factions") then
		abort("[death_manager.init_drop_settings]: There is no section [factions] in misc\\death_generic.ltx or any of its includes.")
	end
	for i = 0, ini:line_count("factions") - 1 do
		local _, faction_name = ini:r_line("factions", i, "", "")
		if not ini:section_exist(faction_name) then
			abort("[death_manager.init_drop_settings]: There is no section [%s] in misc\\death_generic.ltx or any of its includes, despite being listed under section [factions].", faction_name)
		end
		local prob_by_item = {}
--		dbglog("item_by_community['%s'] = {}", faction_name)
		item_by_community[faction_name] = prob_by_item
		for i = 0, ini:line_count(faction_name) - 1 do
			local _, item_name, prob = ini:r_line(faction_name, i, "", "")
			prob = tonumber(prob)
--			dbglog("item_by_community['%s']['%s'] = %g", faction_name, item_name, prob)
			prob_by_item[item_name] = prob
		end
	end
	if not ini:section_exist("item_dependence") then
		abort("[death_manager.init_drop_settings]: There is no section [item_dependence] in misc\\death_generic.ltx or any of its includes.")
	end
	for i = 0, ini:line_count("item_dependence") - 1 do
		local _, ammo_name, weapon_names = ini:r_line("item_dependence", i, "", "") -- example 'weapon_names' value: "wpn_pm, wpn_fort_up"
		item_dependence[ammo_name] = parse_names_to_hash(weapon_names) -- DC170429
--		dbglog("item_dependence['%s'] = {}", ammo_name)
--		for weapon_name in pairs (item_dependence[ammo_name]) do
--			dbglog("item_dependence['%s']['%s'] = true", ammo_name, weapon_name)
--		end
	end
	if not ini:section_exist("levels") then
		abort("[death_manager.init_drop_settings]: There is no section [levels] in misc\\death_generic.ltx or any of its includes.")
	end
	local multiplier_by_item_by_level = {} -- example key-value pair: ["marsh"] = {["ammo_11.43x23_fmj"] = 0, ["ammo_9x18_fmj"] = 1}
	for i = 0, ini:line_count("levels") - 1 do
		local _, level_name = ini:r_line("levels", i, "", "")
		if not ini:section_exist(level_name) then
			abort("[death_manager.init_drop_settings]: There is no section [%s] in misc\\death_generic.ltx or any of its includes, despite being listed under section [levels].", level_name)
		end
		local multiplier_by_item = {}
--		dbglog("multiplier_by_item_by_level['%s'] = {}", level_name)
		multiplier_by_item_by_level[level_name] = multiplier_by_item
--		dbglog("count_by_level['%s'] = {}", level_name)
		count_by_level[level_name] = {}
		for i = 0, ini:line_count(level_name) - 1 do
			local _, item_name, multiplier = ini:r_line(level_name, i, "", "")
--			dbglog("multiplier_by_item_by_level['%s']['%s'] = %s", level_name, item_name, multiplier)
			multiplier_by_item[item_name] = tonumber(multiplier)
		end
	end
	local item_count_section = "item_count_"..level.get_game_difficulty()
	if not ini:section_exist(item_count_section) then
		abort("[death_manager.init_drop_settings]: There is no section [%s] in misc\\death_generic.ltx or any of its includes.", item_count_section)
	end
	for level_name, multiplier_by_item in pairs (multiplier_by_item_by_level) do
		local item_limits = count_by_level[level_name]
		for i = 0, ini:line_count(item_count_section) - 1 do
			local _, item_name, counts = ini:r_line(item_count_section, i, "", "") -- example 'counts' values: "20, 100", "1"
			local t = parse_nums(counts)
			local min = t[1] or abort("[death_manager.init_drop_settings]: Missing value for parameter '%s' in section '%s' in misc\\death_generic.ltx or one of its includes.", item_name, item_count_section)
			local max = t[2] or min
			local multiplier = multiplier_by_item[item_name] or 0
--			dbglog("count_by_level['%s']['%s'] = {min = %d, max = %d}", level_name, item_name, min * multiplier, max * multiplier)
			item_limits[item_name] = {min = min * multiplier, max = max * multiplier} -- 'min' and 'max' coerced into numbers in parse_nums()
		end
	end
	if not ini:section_exist("keep_items") then
		abort("[death_manager.init_drop_settings]: There is no section [keep_items] in misc\\death_generic.ltx or any of its includes.")
	end
	for i = 0, ini:line_count("keep_items") - 1 do
		local _, item_name = ini:r_line("keep_items", i, "", "")
--		dbglog("always_keep_item['%s'] = true", item_name)
		always_keep_item[item_name] = true
	end
end

function init_level_drop_settings(actor_level)
	limits_by_item = count_by_level[actor_level] or count_by_level["default"]
end

class "drop_manager"

function drop_manager:__init(npc)
	self.npc = npc
end

function drop_manager:create_release_item(se_npc, npc_id)
	local npc = self.npc
	se_npc.death_droped = true
	npc:iterate_inventory(keep_item, npc)
	local ini = se_npc.ini -- npc:spawn_ini()
	if ini and ini:section_exist("dont_spawn_loot") then
		return
	end
	local spawn_items = item_by_community[npc:character_community()]
	if spawn_items == nil then
		return
	end
	local check_item_dependence, limits_by_item, ammo_section, math_ceil, math_random
	    = check_item_dependence, limits_by_item, ammo_section, math.ceil, math.random
	local vec = vector()
	for item_name, spawn_prob in pairs (spawn_items) do
		if check_item_dependence(npc, item_name) then
			local units = math_ceil(math_random(limits_by_item[item_name].min, limits_by_item[item_name].max))
			if units > 0 then
				if ammo_section[item_name] then
					se_respawn.create_ammo(item_name, vec, 0, 0, npc_id, units)
				else
					for i = 1, units do
						if math_random() <= spawn_prob then
							sim:create(item_name, vec, 0, 0, npc_id)
						end
					end
				end
			end
		end
	end
end

function keep_item(npc, item)
	local section = item:section()
	if section == "bolt" then
		return
	end
	if always_keep_item[section] then
		return
	end
	local item_id = item:id()
	local slot_item = npc:item_in_slot(1)
	if slot_item and slot_item:id() == item_id then
		item:set_condition((math.random(15) + 65) / 100)
--		npc:transfer_item(item, npc)
		return
	end
	slot_item = npc:item_in_slot(2)
	if slot_item and slot_item:id() == item_id then
		item:set_condition((math.random(15) + 65) / 100)
--		npc:transfer_item(item, npc)
		return
	end
	slot_item = npc:item_in_slot(3)
	if slot_item and slot_item:id() == item_id then
		return
	end
	if not npc:marked_dropped(item) then
		sim:release(sim:object(item_id), true)
	end
end

function check_item_dependence(npc, section)
	if item_dependence[section] == nil then
		return true
	end
	for requisite in pairs (item_dependence[section]) do
		local owned_requisite = npc:object(requisite)
		if owned_requisite and not npc:marked_dropped(owned_requisite) then
			return true
		end
	end
	return false
end