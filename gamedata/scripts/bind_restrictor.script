function bind(obj)
	obj:bind_object(restrictor_binder(obj))
end

----------------------------------------------------------------------------------------------------

class "restrictor_binder" (object_binder)

function restrictor_binder:__init(obj, char_ini) super(obj)
	self.initialized = false
	self.loaded = false
end

function restrictor_binder:reload(section)
	object_binder.reload(self, section)
end

function restrictor_binder:reinit()
	object_binder.reinit(self)
	self.st = {}
	db.storage[self.object:id()] = self.st
end

function restrictor_binder:net_spawn(data)

	if not object_binder.net_spawn(self, data) then
		return false
	end

	local obj = self.object

	db.add_zone(obj)
	db.add_obj(obj)

	local obj_id = obj:id()

	if xr_sound.looped_sound[obj_id] then
		for k in pairs (xr_sound.looped_sound[obj_id]) do
			xr_sound.play_sound_looped(obj_id, k)
		end
	end

	local ini = obj:spawn_ini()

	if not ini then
		return true
	end

	if ini:section_exist("information_sector") then
		sr_danger.register_new_sector(obj)
	end

	if ini:section_exist("apply_on_combat") then
		combat_restrictor.register_combat_restrictor(obj)
	end

	if ini:section_exist("logic") and ini:line_exist("logic", "active") then
		local section = ini:r_string("logic", "active")
		if section ~= nil then
			local scheme = string.gsub(section, "[%d@].*", "") -- utils.get_scheme_by_section(section)
			if scheme == "sr_bloodsucker" or scheme == "sr_monster" then
				xr_motivator.register_bloodsucker_restr(obj)
			end
		end
	end

	return true
end

function restrictor_binder:net_destroy()
	local obj = self.object
	local obj_st = self.st
	local obj_id = obj:id()
	xr_sound.stop_sounds_by_id(obj_id)
	if obj_st.active_scheme then
		xr_logic.issue_event(nil, obj_st[obj_st.active_scheme], "net_destroy")
	end
	db.del_zone(obj)
	db.del_obj(obj)
	db.storage[obj_id] = nil
	object_binder.net_destroy(self)
end

function restrictor_binder:update(delta)
	if not self.initialized and db.actor then
		self.initialized = true
		xr_logic.initialize_obj(self.object, self.st, self.loaded, modules.stype_restrictor)
	end
	if self.st.active_section ~= nil then
		xr_logic.issue_event(nil, self.st[self.st.active_scheme], "update", delta)
	end
	xr_sound.update(self.object:id())
end

function restrictor_binder:net_save_relevant()
	return true
end

function restrictor_binder:save(packet)
	set_save_marker(packet, "save", false, "restrictor_binder")
	object_binder.save(self, packet)
	xr_logic.save_obj(self.object, packet)
	set_save_marker(packet, "save", true, "restrictor_binder")
end

function restrictor_binder:load(reader)
	set_save_marker(reader, "load", false, "restrictor_binder")
	self.loaded = true
	object_binder.load(self, reader)
	xr_logic.load_obj(self.object, reader)
	set_save_marker(reader, "load", true, "restrictor_binder")
end