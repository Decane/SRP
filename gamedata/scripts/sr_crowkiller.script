class "crowkiller"

function crowkiller:__init(obj, storage)
	self.object = obj
	self.st = storage
	self.spawn_time_constant = 120000
	self.time_for_spawn = time_global()
	self.spawn_points_idle = {}
--	self.spawned_count = nil
	self.idle_time = 0
	self.new_highscore_set = storage.new_highscore_time == 0
end

function crowkiller:reset_scheme()
	local TG = time_global()
	local spawn_points_idle = self.spawn_points_idle
	for k, v in pairs (self.st.path_table) do
		spawn_points_idle[v] = TG
	end
end

function crowkiller:update(delta)

	local TG = time_global()
	if self.time_for_spawn < TG then
		if bind_crow.crow_counter < self.st.max_crows_on_level then
			self:check_for_spawn_new_crow()
		else
			self.time_for_spawn = TG + self.spawn_time_constant	-- check again after 2 minutes
		end
	end

	local self_st = self.st

	if xr_logic.try_switch_to_another_section(self.object, self_st, db.actor) then
		return
	end

	local MGM = minigames_manager.get_minigames_manager()
	local state = MGM:get_minigame_state(self_st.game_name)

	if state ~= "valiable" then
		if state == "enabled" then
			MGM:start(self_st.game_name, self.object)
		elseif state == "disabled" then
			self:reset_scheme()
			local hud = get_hud()
			hud:RemoveCustomStatic("crow_timer")
			hud:RemoveCustomStatic("crow_timer_text")
			local game_name = self_st.game_name
			MGM:set_minigame_state(game_name, "valiable")
			if MGM:get_minigame_param(game_name, "win") then
				self.new_highscore_set = false
				xr_logic.switch_to_section(self.object, self_st.ini, self_st.on_win)
				return
			end
		else
			MGM:update(self_st.game_name, self.object)
		end
		self.idle_time = 0
	else
		if self.idle_time == 0 then
			self.idle_time = TG
		else
			if (self.idle_time <= TG - self_st.new_highscore_time) and not self.new_highscore_set then
				local game_name = self_st.game_name
				MGM:set_minigame_param(game_name, "highscore", MGM:get_minigame_param(game_name, "highscore") + 1)
				self.new_highscore_set = true
			end
		end
	end
end

function crowkiller:check_for_spawn_new_crow()
	local path_table = {}
	utils.copy_table(path_table, self.st.path_table)
	local rand = math.random
	local rem = table.remove
	local TG = time_global()
	for i = 1, #self.st.path_table do
		local idx = rand(#path_table)
		local selected_path = path_table[idx]
		rem(path_table, idx)
		if self.spawn_points_idle[selected_path] <= TG then
			local ptr = patrol(selected_path)
			local obj = _G.sim:create("m_crow", ptr:point(0), ptr:level_vertex_id(0), ptr:game_vertex_id(0))
			self.spawn_points_idle[selected_path] = TG + 10000
			return
		end
	end
end

--------------------------------------------------------------------------------
-- Standart functions
--------------------------------------------------------------------------------

function add_to_binder(npc, ini, scheme, section, storage)
	xr_logic.subscribe_action_for_events(npc, storage, crowkiller(npc, storage))
end

function set_scheme(obj, ini, scheme, section) --, gulag_name)

	local get_string       = utils.cfg_get_string
	local get_number       = utils.cfg_get_number

	local st               = xr_logic.assign_storage_and_bind(obj, ini, scheme, section)

	st.logic               = xr_logic.cfg_get_switch_conditions(ini, section, obj)
	st.max_crows_on_level  = get_number(ini, section, "max_crows_on_level", nil, false, 16)
	st.path_table          = parse_names(get_string(ini, section, "spawn_path", obj, true, ""))
	st.on_win              = get_string(ini, section, "on_win", nil, false, "", nil)

	local m                = minigames_manager.get_minigames_manager()
	local game_name        = get_string(ini, section, "game_name", nil, false, "", "test_crowkiller")

	st.game_name           = game_name

	m:set_current_crowkiller(game_name)

	st.highscore           = get_number(ini, section, "highscore", nil, false, 0)
	st.timer               = get_number(ini, section, "timer", nil, false, 90)
	st.crows_to_kill       = parse_nums(get_string(ini, section, "crows_to_kill", nil, false, "", "{0,0,0,0}"))

	st.money_multiplier    = get_number(ini, section, "money_multiplier", nil, false, 10)
	st.champion_multiplier = get_number(ini, section, "champion_multiplier", nil, false, 100)
	st.new_highscore_time  = get_number(ini, section, "new_highscore_time", nil, false, 100) * 1000

	if not m:params_exist(game_name) then
		m:create_new_minigame_parameter_list(game_name, minigame_crowkiller.CMGCrowKiller())
		m:set_minigame_param(game_name, "highscore", st.highscore)
		m:set_minigame_param(game_name, "timer", st.timer)
		m:set_minigame_param(game_name, "win", false)
		m:set_minigame_param(game_name, "crows_to_kill", st.crows_to_kill)
		m:set_minigame_param(game_name, "money_multiplier", st.money_multiplier)
		m:set_minigame_param(game_name, "champion_multiplier", st.champion_multiplier)
		m:set_minigame_param(game_name, "selected", 0)
		m:set_minigame_param(game_name, "game_type", "")
	end
end