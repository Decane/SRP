local kamps = {}
kamp_stalkers = {}

--------------------------------------------------------------------------------
-- Evaluators
--------------------------------------------------------------------------------

class "evaluator_kamp_end" (property_evaluator)

function evaluator_kamp_end:__init(st) super()
	self.st = st
	self.npc_st = db.storage[st.npc:id()]
end

function evaluator_kamp_end:evaluate()
	return self.st.section ~= self.npc_st.active_section
end

--------------------------------------------------------------------------------

class "evaluator_on_position" (property_evaluator)

function evaluator_on_position:__init(st) super()
	self.st = st
end

function evaluator_on_position:evaluate()
	return self.object:level_vertex_id() == self.st.pos_vertex
end

--------------------------------------------------------------------------------
-- Actions
--------------------------------------------------------------------------------

class "action_go_position" (action_base)

function action_go_position:__init(st) super()
	self.st = st
end

function action_go_position:initialize()
	action_base.initialize(self)
	self.object:set_desired_position()
	self.object:set_desired_direction()
	self.update_time = -10000
	self.st.signals = {}
end

function action_go_position:update_movement()

	local npc = self.object
	local st = self.st

	st.pos_vertex = kamps[st.center_point]:getDestVertex(npc, st.radius)

	npc:set_path_type(game_object.level_path)
	npc:set_dest_level_vertex_id(st.pos_vertex)

	local desired_direction = vector():sub(st.pp, level.vertex_position(st.pos_vertex))

	if desired_direction ~= nil and not utils.vector_cmp(desired_direction, vector():set(0,0,0)) then
		desired_direction:normalize()
		npc:set_desired_direction(desired_direction)
	end

	state_mgr.set_state(npc, st.def_state_moving)
end

function action_go_position:execute()
	action_base.execute(self)
	local global_time = time_global()
	if global_time > self.update_time then
		self:update_movement()
		self.update_time = global_time + 3000
	end
end

function action_go_position:finalize()
	action_base.finalize(self)
end

--------------------------------------------------------------------------------

class "action_wait" (action_base)

function action_wait:__init(st) super()
	self.st = st
end

function action_wait:activate_scheme()
	self.kamp = kamps[self.st.center_point]
	self.st.signals = {}
end

function action_wait:initialize()
	action_base.initialize(self)
	local npc = self.object
	npc:set_desired_position()
	npc:set_desired_direction()
	self.kamp:increasePops()
	self.extrakeys = {}
	local npc_community = npc:character_community()
	if npc_community ~= "monolith" and npc_community ~= "zombied" then
		self.kamp:checkNpcAbility(npc) -- TODO: What if player buys item off NPC?
	end
end

function action_wait:execute()
	action_base.execute(self)
	local npc = self.object
	local state, sound, substate = self.kamp:updateNpc(npc)
	self.extrakeys.subanim = substate
	state_mgr.set_state(npc, state, nil, nil, self.st.target, nil, nil, self.extrakeys)
	if sound ~= "" then
		xr_sound.set_sound_play(npc:id(), sound)
	end
end

function action_wait:finalize()
	self.kamp:decreasePops()
	action_base.finalize(self)
end

function action_wait:deactivate(npc)
	self.kamp:removeNpc(npc)
end

function action_wait:death_callback(npc)
	self.kamp:removeNpc(npc)
end

function action_wait:net_destroy(npc)
	self.kamp:removeNpc(npc)
end

--------------------------------------------------------------------------------

local standard_states =
{
	"sit",
	"sit_ass",
	"sit_knee",
	"eat_kolbasa",
	"eat_vodka",
	"eat_energy",
	"eat_bread",
	"trans",
}

local avail_state =
{
	idle                = {directed = standard_states},
--	pre_harmonica       = {directed = {"wait_harmonica"}, undirected = standard_states},
--	harmonica           = {directed = {"play_harmonica"}, undirected = standard_states},
--	post_harmonica      = {directed = {"wait_harmonica"}, undirected = standard_states},
	pre_guitar          = {directed = {"wait_guitar"},    undirected = standard_states},
	guitar              = {directed = {"play_guitar"},    undirected = standard_states},
	post_guitar         = {directed = {"wait_guitar"},    undirected = standard_states},
	story               = {directed = {"declarate"},      undirected = standard_states},
}

local avail_sound =
{
	idle                = {directed = "idle"},
--	pre_harmonica       = {directed = "pre_harmonica",    undirected = ""},
--	harmonica           = {directed = "",                 undirected = ""},
--	post_harmonica      = {directed = "",                 undirected = "reac_harmonica"},
	pre_guitar          = {directed = "pre_guitar",       undirected = ""},
	guitar              = {directed = "",                 undirected = ""},
	post_guitar         = {directed = "",                 undirected = "reac_guitar"},
	story               = {directed = "",                 undirected = ""},
}

local timeout =
{
	idle                = {min = 30000},
--	pre_harmonica       = {min = 3000},
--	harmonica           = {min = 5000, soundstart = true},
--	post_harmonica      = {min = 3000},
	pre_guitar          = {min = 3000},
	guitar              = {min = 5000, soundstart = true},
	post_guitar         = {min = 3000},
	story               = {min = 1000, soundstart = true},
}

local target_states =
{
	idle                = {idle = 0, pre_harmonica = 0, pre_guitar = 50, story = 50},
--	pre_harmonica       = {harmonica = 100},
--	harmonica           = {post_harmonica = 100},
--	post_harmonica      = {idle = 70, harmonica = 30},
	pre_guitar          = {guitar = 100},
	guitar              = {post_guitar = 100},
	post_guitar         = {idle = 70, guitar = 30},
	story               = {idle = 100},
}

--[[

The 8 vectors in table 'position_vectors' correspond to the '+' points around the 'X' center point in the 9-point formation below.
The center point represents the campfire.
The vectors are normalized into a circular formation with some randomized variation in distance from the center.

	+	+	+

	+	X	+

	+	+	+

]]

local position_vectors =
{
	vector():set(0, 0, 1),
	vector():set(1, 0, 0),
	vector():set(1, 0, 1),
	vector():set(0, 0, -1),
	vector():set(-1, 0, 0),
	vector():set(-1, 0, -1),
	vector():set(-1, 0, 1),
	vector():set(1, 0, -1),
}

class "CKampManager"

function CKampManager:__init(path)
	self.kamp_name = path
	self.patrol_point = patrol(path):point(0)
	self.free = {1, 2, 3, 4, 5, 6, 7, 8}
	self.npc = {}
	self.population = 0
	self.kamp_state = "idle"
	self.begin = nil
	self.director = nil
	self.sound_manager = sound_manager.get_sound_manager("kamp_"..path)
end

function CKampManager:selectPosition(npc_id)
	if #self.free == 0 then
		abort("[xr_kamp.CKampManager:selectPosition]: No space for NPC %d in kamp '%s'", npc_id, self.kamp_name)
	end
	self.npc[npc_id].position_idx = table.remove(self.free, math.random(#self.free))
end

function CKampManager:getDestVertex(npc, radius)

	local dir = position_vectors[self.npc[npc:id()].position_idx]

	dir:normalize()

	radius = radius + 0.3

	local ideal_radius = radius
	local pp = self.patrol_point
	local dest_pos = vector():set(pp.x + dir.x * ideal_radius, pp.y, pp.z + dir.z * ideal_radius)
	local dest_vertex = level.vertex_id(dest_pos)

	while dest_vertex == 4294967296 and radius > 1 do
		radius = radius - 0.1
		dest_pos.x = pp.x + dir.x * radius
		dest_pos.z = pp.z + dir.z * radius
		dest_vertex = level.vertex_id(dest_pos)
	end

	if not npc:accessible(dest_vertex) then
		dest_pos.x = pp.x + dir.x * ideal_radius
		dest_pos.z = pp.z + dir.z * ideal_radius
		dest_vertex = npc:accessible_nearest(dest_pos, vector())
	end

	return dest_vertex
end

function CKampManager:proceedState(npc)

	local npc_id = npc:id()
	local camp_npc = self.npc[npc_id]
	local active_sound_count = npc:active_sound_count()

	if camp_npc.need_sound_begin then
		if active_sound_count == 0 then
			return
		end
		camp_npc.need_sound_begin = false
	end

	if active_sound_count > 0 then
		return
	end

	if self.begin ~= nil and time_global() - self.begin < timeout[self.kamp_state].min then
		return
	end

	if not self.sound_manager:is_finished() then
		self.sound_manager:update()
		return
	end

	local avail_states = {}
	local max_rnd = 0
	local kamp_states = camp_npc.kamp_states

	for state_name, prob in pairs (target_states[self.kamp_state]) do
		if kamp_states[state_name] then
			avail_states[state_name] = prob
			max_rnd = max_rnd + prob
		end
	end

	if max_rnd == 0 then
		avail_states["idle"] = 100
		max_rnd = 100
	end

	local p = math.random(0, max_rnd)

	for state_name, prob in pairs (avail_states) do
		p = p - prob
		if p <= 0 then
			if state_name == "idle" then
				self.director = nil
				if self.kamp_state ~= "idle" then
					camp_npc.begin = nil
				end
			elseif state_name == "story" then
				self.sound_manager:set_story("test_story")
				self.director = npc_id
			else
				camp_npc.begin = nil
				if timeout[state_name].soundstart then
					camp_npc.need_sound_begin = true
				end
				self.director = npc_id
			end
			self.kamp_state = state_name
			self.begin = time_global()
			for _, npc_data in pairs (self.npc) do
				npc_data.is_new = true
			end
			return
		end
	end
end

function CKampManager:proceedRole(npc_id, is_director)

	local state, sound
	local camp_npc = self.npc[npc_id]

	if camp_npc.begin == nil or time_global() - camp_npc.begin >= camp_npc.state_idle then

		local states = avail_state[self.kamp_state][is_director and "directed" or "undirected"]
		local avail_states = {}
		local camp_npc_states = camp_npc.states
		local c = 0

		for _, state_name in pairs (states) do
			if camp_npc_states[state_name] then
				c = c + 1
				avail_states[c] = state_name
			end
		end

		state = (c > 0) and avail_states[math.random(c)] or "sleep_sit"

		camp_npc.begin = time_global()
		camp_npc.state_selected = state
		camp_npc.state_idle = math.random(15000, 20000)
	else
		state = camp_npc.state_selected
	end

	if self.kamp_state == "story" then
		sound = ""
	else
		sound = avail_sound[self.kamp_state][is_director and "directed" or "undirected"]
	end

	return state, sound
end

function CKampManager:updateNpc(npc)

	local npc_id = npc:id()
	local is_director = self.director == nil or self.director == npc_id

	if is_director then
		self:proceedState(npc)
	end

	local state, sound = self:proceedRole(npc_id, is_director)
	local substate = nil

	if state == "wait_guitar" then

		local camp_npc = self.npc[npc_id]

		if sound == "pre_guitar" and camp_npc.is_new then
			xr_sound.set_sound_play(npc_id, "intro_music")
			camp_npc.is_new = false
		end
		state = "guitar"
		xr_kamp.kamp_stalkers[npc_id] = false

	elseif state == "play_guitar" then

		state = "guitar"
		substate = 1
		xr_kamp.kamp_stalkers[npc_id] = false

	elseif state == "declarate" then

		local camp_npc = self.npc[npc_id]

		if camp_npc.is_new then
			camp_npc.is_new = false
		end

		if camp_npc.trance_state then
			state = camp_npc.trance_state
		else
			local t = math.mod(npc_id, 3)
			if t == 0 then
				state = "sit"
			elseif t == 1 then
				state = "sit_ass"
			else
				state = "sit_knee"
			end
		end

		xr_kamp.kamp_stalkers[npc_id] = false

	elseif state == "trans" then

		local trance_state = self.npc[npc_id].trance_state

		if trance_state then
			state = trance_state
		end

		xr_kamp.kamp_stalkers[npc_id] = false
--[[
	elseif state == "wait_harmonica" then

		local camp_npc = self.npc[npc_id]

		if sound == "pre_harmonica" and camp_npc.is_new then
			xr_sound.set_sound_play(npc_id, "intro_music")
			camp_npc.is_new = false
		end
		state = "harmonica"
		xr_kamp.kamp_stalkers[npc_id] = false

	elseif state == "play_harmonica" then

		state = "harmonica"
		substate = 1
		xr_kamp.kamp_stalkers[npc_id] = false
]]
	else
		xr_kamp.kamp_stalkers[npc_id] = true
	end

	if sound == "idle" then
		sound = "state"
	elseif sound == "reac_guitar" then
		sound = "reac_music"
--	elseif sound == "reac_harmonica" then
--		sound = "reac_music"
	else
		sound = ""
	end

	return state, sound, substate
end

function CKampManager:checkNpcAbility(npc)

	local camp_npc = self.npc[npc:id()]
	local sns = camp_npc.states
	local sks = camp_npc.kamp_states

	if npc:object("kolbasa") then
		sns["eat_kolbasa"] = true
	end

	if npc:object("vodka") then
		sns["eat_vodka"] = true
	end

	if npc:object("energy_drink") then
		sns["eat_energy"] = true
	end

	if npc:object("bread") then
		sns["eat_bread"] = true
	end
--[[
	if npc:object("harmonica_a") then
		sns["play_harmonica"] = true
		sns["wait_harmonica"] = true
		sks["pre_harmonica"] = true
		sks["harmonica"] = true
		sks["post_harmonica"] = true
	end
]]
	if npc:object("guitar_a") then
		sns["play_guitar"] = true
		sns["wait_guitar"] = true
		sks["pre_guitar"] = true
		sks["guitar"] = true
		sks["post_guitar"] = true
	end
end

function CKampManager:addNpc(npc)

	local npc_id = npc:id()

	if self.npc[npc_id] ~= nil then
		abort("[xr_kamp.CKampManager:addNpc]: NPC '%s' already added to camp '%s'", npc:name(), self.kamp_name)
	end

	local trance_state = nil
	local npc_community = npc:character_community()

	if npc_community == "monolith" then
		local t = math.mod(npc_id, 2)
		trance_state = t == 0 and "trans_0" or "trans_1"
	elseif npc_community == "zombied" then
		trance_state = "trans_zombied"
	end

	if trance_state == nil then
		self.npc[npc_id] =
		{
			position_idx = nil,
			trance_state = nil,
			is_new = false,
			need_sound_begin = false,
			states = {declarate = true, sit = true, sit_ass = true, sit_knee = true},
			kamp_states = {idle = true, story = true},
		}
	else
		self.npc[npc_id] =
		{
			position_idx = nil,
			trance_state = trance_state,
			is_new = false,
			need_sound_begin = false,
			states = {declarate = true, trans = true},
			kamp_states = {idle = true, story = true},
		}
	end

	self:selectPosition(npc_id)
	self.sound_manager:register_npc(npc_id)
end

function CKampManager:removeNpc(npc)
	local npc_id = npc:id()
	local snpc = self.npc
	if snpc[npc_id] ~= nil then -- not guaranteed
		self.sound_manager:unregister_npc(npc_id)
		if self.director == npc_id then
			self.director = nil
			self.kamp_state = "idle"
			self.begin = time_global()
			for _, camp_npc in pairs (snpc) do
				camp_npc.is_new = true
			end
			stop_play_sound(npc)
		end
		table.insert(self.free, snpc[npc_id].position_idx) -- return spot to pool
		snpc[npc_id] = nil
	end
end

function CKampManager:increasePops()
	self.population = self.population + 1
	local campfire = bind_campfire.campfire_table[self.kamp_name.."_campfire"]
	if self.population > 0 and campfire ~= nil and not campfire:is_on() then
		campfire:turn_on()
	end
end

function CKampManager:decreasePops()
	self.population = self.population - 1
	local campfire = bind_campfire.campfire_table[self.kamp_name.."_campfire"]
	if self.population < 1 and campfire ~= nil and campfire:is_on() then
		campfire:turn_off()
	end
end

--------------------------------------------------------------------------------
-- Binder
--------------------------------------------------------------------------------

local op_alife                  = xr_actions_id.alife
local op_go_position            = xr_actions_id.stohe_kamp_base + 1
local op_wait                   = xr_actions_id.stohe_kamp_base + 3

local prop_kamp_end             = xr_evaluators_id.stohe_kamp_base + 1
local prop_on_position          = xr_evaluators_id.stohe_kamp_base + 2

local wp_on_position_true       = world_property(prop_on_position, true)
local wp_on_position_false      = world_property(prop_on_position, false)
local wp_switched_section_true  = world_property(prop_kamp_end, true)

function add_to_binder(npc, ini, scheme, section, st)

	local manager               = npc:motivation_action_manager()

	manager:add_evaluator       (prop_kamp_end, evaluator_kamp_end(st))
	manager:add_evaluator       (prop_on_position, evaluator_on_position(st))

	-------------------------

	local action                = action_wait(st)

	xr_motivator.addPrecondAliveNoDangerNoEnemyNoAnomalyNoSmartcover(action)
	xr_motivator.addCommonPrecondition(action)

	action:add_precondition     (wp_on_position_true)
	action:add_effect           (wp_switched_section_true)
	manager:add_action          (op_wait, action)

	xr_logic.subscribe_action_for_events(nil, st, action)

	-------------------------

	action                      = action_go_position(st)

	xr_motivator.addPrecondAliveNoDangerNoEnemyNoAnomalyNoSmartcover(action)
	xr_motivator.addCommonPrecondition(action)

	action:add_precondition     (wp_on_position_false)
	action:add_effect           (wp_on_position_true)
	manager:add_action          (op_go_position, action)

	-------------------------

	action                      = manager:action(op_alife)
	action:add_precondition     (wp_switched_section_true)
end

local function get_look_position(center_point)

	local pp = patrol(center_point):point(0)
	local delta_dist = math.random(0, 0.5)
	local dir = vector():set(math.random(-1, 1), 0, math.random(-1, 1))

	dir:normalize()

	pp.x = pp.x + dir.x * delta_dist
	pp.z = pp.z + dir.z * delta_dist

	return pp
end

function set_scheme(npc, ini, scheme, section, gulag_name)

	local st            = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	st.logic            = xr_logic.cfg_get_switch_conditions(ini, section, npc)
	local center_point  = utils.cfg_get_string(ini, section, "center_point", npc, true, gulag_name)
	st.center_point     = center_point
	st.radius           = utils.cfg_get_number(ini, section, "radius", nil, false, 2)

	if kamps[center_point] == nil then
		kamps[center_point] = CKampManager(center_point)
	end
	kamps[center_point]:addNpc(npc)

	st.pos_vertex       = nil
	st.pp               = get_look_position(center_point)
	st.target           = {look_position = st.pp}
	st.def_state_moving = utils.cfg_get_string(ini, section, "def_state_moving", nil, false, "", "walk")
end