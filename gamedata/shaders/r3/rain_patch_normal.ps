#include "common.h"
#include "lmodel.h"
#include "shadow.h"

// These vars are initialized from within the engine (r3_rendertarget_draw_rain.cpp):

float3x4  m_sunmask; // ortho-projection
Texture3D s_water;
Texture2D s_waterFall;
float4    RainDensity;
float4    RainFallof;
float4    WorldX;
float4    WorldZ;

float3 GetNVNMap(Texture3D s_texture, float2 tc, float time)
{
	// Unpack NVidia normal map
	float4 water = s_texture.SampleBias(smp_base, float3(tc, time), -3.) - 0.5;

	// Swizzle
	water.x = water.w;

	// Renormalize (*2) and scale (*3)
	water.xz *= 6;
	water.y = 0;

	return water.xyz;
}

float3 GetWaterNMap(Texture2D s_texture, float2 tc)
{
	// Unpack normal map
	float4 water = s_texture.Sample(smp_base, tc);

	water.xz = (water.xy - 0.5) * 0.6;
	water.y = 0;

	return water.xyz;
}

#ifndef ISAMPLE
#define ISAMPLE 0
#endif

#ifdef GBUFFER_OPTIMIZATION
#ifdef MSAA_OPTIMIZATION
float4 main(float2 tc : TEXCOORD0, float2 tcJ : TEXCOORD1, float4 Color : COLOR, float4 pos2d : SV_Position, uint iSample : SV_SAMPLEINDEX) : SV_Target
#else
float4 main(float2 tc : TEXCOORD0, float2 tcJ : TEXCOORD1, float4 Color : COLOR, float4 pos2d : SV_Position) : SV_Target
#endif
#else
#ifdef MSAA_OPTIMIZATION
float4 main(float2 tc : TEXCOORD0, float2 tcJ : TEXCOORD1, uint iSample : SV_SAMPLEINDEX) : SV_Target
#else
float4 main(float2 tc : TEXCOORD0, float2 tcJ : TEXCOORD1) : SV_Target
#endif
#endif
{
#ifdef GBUFFER_OPTIMIZATION
#ifdef MSAA_OPTIMIZATION
	gbuffer_data gbd = gbuffer_load_data(tc, pos2d, iSample);
#else
	gbuffer_data gbd = gbuffer_load_data(tc, pos2d, ISAMPLE);
#endif
#else
#ifdef MSAA_OPTIMIZATION
	gbuffer_data gbd = gbuffer_load_data(tc, iSample);
#else
	gbuffer_data gbd = gbuffer_load_data(tc, ISAMPLE);
#endif
#endif
	float4 _P = float4(gbd.P, 1.0);
	float3 _N = gbd.N;
	float3  D = gbd.C; // rgb // .gloss

	_N.xyz = normalize(_N.xyz);

	float4 PS = mul(m_shadow, _P);

	float3 WorldP = mul(m_sunmask, _P);
	float3 WorldN = mul(m_sunmask, _N.xyz);

	// Read rain projection with some jetter. Also adding pixel normal
	// factor to jitter to make rain strips more realistic.
	// float s = shadow_rain(PS, WorldP.xz * 1.1 - WorldN.xz * 0.035);
	// float s = shadow_rain(PS, WorldP.xz * 2);
	// float s = shadow_rain(PS, float2(0, 0));
	float s = shadow_rain(PS, WorldP.xz - WorldN.xz);

	// Fade the wet surface effect out of view as the camera (float16 depth coordinate position)
	// moves away from it. The fade begins when the camera is r3_dynamic_wet_surfaces_near meters
	// away and quadratically decreases with distance until the camera is
	// r3_dynamic_wet_surfaces_far meters away, at which point the effect is completely invisible.
	float fAtten = 1 - smoothstep(RainFallof.x, RainFallof.y, _P.z);
	s *= fAtten * fAtten;

	// Apply rain density
	s *= RainDensity.x;

	float fIsUp = -dot(Ldynamic_dir.xyz, _N.xyz);
	s *= saturate(fIsUp * 10 + 5.5);
	fIsUp = max(0, fIsUp);

	// The larger the multiplier on WorldP.xz, the smaller the water splashes.
	// The larger the multiplier on timers.x, the more frequent the water splashes.
	float3 waterSplash = GetNVNMap(s_water, WorldP.xz * 2, timers.x * 3.0);
	float3 tc1 = WorldP / 2;

	float fAngleFactor = 1 - fIsUp;

	// The lower the multiplier, the slower the downpour effect.
	fAngleFactor = 0.03 * ceil(10 * fAngleFactor);
	fAngleFactor = tc1.y + timers.x * fAngleFactor;

	float3 waterFallX = GetWaterNMap(s_waterFall, float2(tc1.z, fAngleFactor));
	float3 waterFallZ = GetWaterNMap(s_waterFall, float2(tc1.x, fAngleFactor));

	float WeaponAttenuation = smoothstep(0.8, 0.9, _P.z);
	float ApplyNormalCoeff = s * WeaponAttenuation;

	float3 water = waterSplash * (fIsUp * ApplyNormalCoeff);

	water += waterFallX.yxz * (abs(WorldN.x) * ApplyNormalCoeff);
	water += waterFallZ.zxy * (abs(WorldN.z) * ApplyNormalCoeff);

	// Translate NM to view space
	water.xyz = mul(m_V, water.xyz);

	_N += water.xyz;
	_N = normalize(_N);

	s *= dot(D.xyz, float3(0.05, 0.05, 0.05)); // 0.33, 0.33, 0.33

	return float4(_N, s);
}