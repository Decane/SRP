function init(npc)
	xr_motivator.AddToMotivator(npc)
end

function actor_init(actor)
	actor:bind_object(actor_binder(actor))
end

local deferred_spawns = {}

function defer_net_spawn(binder)
	deferred_spawns[#deferred_spawns + 1] = binder
end

delayed_alife_release_objects = {}

local game_difficulty_by_num =
{
	[0] = "gd_novice",
	[1] = "gd_stalker",
	[2] = "gd_veteran",
	[3] = "gd_master"
}

local object_binder_update      = object_binder.update
local xr_sound_update           = xr_sound.update
local dyn_music_update          = xrs_dyn_music.on_actor_update
local dunin_ammo_on_update      = nil
local tm                        = nil
local actor                     = nil
local weather_manager           = nil
local last_level_name           = nil
local next_update_time          = -10000
local need_actor_model_update   = true
local first_update_done         = false
local weapon_needs_hiding       = false
local weapon_hidden             = false
local zones_needing_weapon_hide = 0
--------------------------------------------------------------------------------
class "actor_binder" (object_binder)
--------------------------------------------------------------------------------
function actor_binder:__init(obj) super(obj)
	weather_manager = level_weathers.get_weather_manager()
end
--------------------------------------------------------------------------------
function actor_binder:reinit()

	object_binder.reinit(self)

	self.st = {}

	db.storage[0] = self.st -- actor ID is hard-coded to 0 in-engine

	actor = self.object

	actor:set_callback(callback.on_item_take, self.on_item_take, self)
	actor:set_callback(callback.on_item_drop, self.on_item_drop, self)
	actor:set_callback(callback.trade_sell_buy_item, self.on_trade, self)
	actor:set_callback(callback.task_state, self.task_callback, self)
	actor:set_callback(callback.take_item_from_box, self.take_item_from_box, self)
	actor:set_callback(callback.use_object, self.on_use_item, self) -- SRP
end
--------------------------------------------------------------------------------
function actor_binder:net_spawn(se_abstract)

	if not object_binder.net_spawn(self, se_abstract) then
		return false
	end

	level.show_indicators()

	db.add_actor(actor)

	for i = 1, #deferred_spawns do
		local binder = deferred_spawns[i]
		binder:finish_net_spawn() -- DC20230306
	end

	deferred_spawns = nil

	if not has_alife_info("has_sleeping_bag") then
		actor:give_info_portion("has_sleeping_bag")
		_G.sim:create("sleepingbag", vector(), 0, 0, 0)
	end

	dunin_ammo_on_update = dunin_ammo.on_update -- SRP

	if self.st.disable_input_time == nil then
		level.enable_input()
	end

	xr_s.on_game_load()					--' Distemper 03.2008 --

	local level_name = level.name()

	if last_level_name ~= level_name then
		weather_manager:reset()
	end

	death_manager.init_level_drop_settings(level_name) -- SRP

	tm = task_manager.get_task_manager()

	if level_name ~= "marsh" then
		sim_board.get_sim_board():start_sim()
	end

	benchmark.main()					--' Distemper 06.2008 --

	return true
end
--------------------------------------------------------------------------------
function actor_binder:net_destroy()

	xr_sound.stop_sounds_by_id(0) -- actor ID is hard-coded to 0 in-engine

	for _, faction in pairs (sim_board.get_sim_board().players) do
		xr_sound.stop_sounds_by_id(faction.id)
	end

	xr_effects.stc_stop_particle_sounds()

	level.show_indicators()
	level.show_weapon(true)

	actor:set_callback(callback.on_item_take, nil)
	actor:set_callback(callback.on_item_drop, nil)
	actor:set_callback(callback.trade_sell_buy_item, nil) -- SRP
	actor:set_callback(callback.task_state, nil)
	actor:set_callback(callback.take_item_from_box, nil)
	actor:set_callback(callback.use_object, nil) -- SRP

	db.del_actor()

	if sr_psy_antenna.psy_antenna then
		sr_psy_antenna.psy_antenna:destroy()
		sr_psy_antenna.psy_antenna = false
	end

	xrs_dyn_music.stop_sound()
	object_binder.net_destroy(self)
	xr_s.on_actor_destroy()					--' Distemper 03.2008 --
end
--------------------------------------------------------------------------------
function actor_binder:take_item_from_box(box, item)
	treasure_manager.take_item_from_box(box)
end
--------------------------------------------------------------------------------
function actor_binder:on_trade(item, sell_bye, money)
	if sell_bye == true then
		xr_statistic.inc_recieved_money_counter(money)
	else
		xr_statistic.inc_spent_money_counter(money)
	end
end
--------------------------------------------------------------------------------
local function update_actor_model(outfit_id)
	local actor_outfit = actor:item_in_slot(6)
	if actor_outfit and actor_outfit:id() ~= outfit_id then -- 2nd conjunct prevents loop
		actor:transfer_item(actor_outfit, actor)
	end
end
--------------------------------------------------------------------------------
function actor_binder:on_item_take(obj)
	if device().precache_frame > 1 then return end -- per NatVac: don't check existing inventory during synchronizing
	if isArtefact(obj) then
		local obj_id = obj:id()
		bind_anomaly_zone.artefact_ways_by_id[obj_id] = nil
		local artefact = obj:get_artefact()
		artefact:FollowByPath("NULL", 0, vector():set(500, 500, 500))
		if bind_anomaly_zone.parent_zones_by_artefact_id[obj_id] ~= nil then
			bind_anomaly_zone.parent_zones_by_artefact_id[obj_id]:on_artefact_take()
			bind_anomaly_zone.parent_zones_by_artefact_id[obj_id] = nil -- SRP
		end
	end
	for _, task in pairs (tm.task_info) do
		if task.type == "bring_item" and task.state ~= "finished" then
			task:on_item_take(obj)
		end
	end
	if obj:clsid() == clsid.wpn_ammo then
		dunin_ammo.on_take(obj)
	elseif obj:clsid() == clsid.equ_stalker_s then
		if level.main_input_receiver() then
			need_actor_model_update = true
		else
			update_actor_model(obj:id())
		end
	end
end
--------------------------------------------------------------------------------
function actor_binder:on_item_drop(obj)
	for _, task in pairs (tm.task_info) do
		if task.type == "bring_item" and task.state ~= "finished" then
			task:on_item_drop(obj)
		end
	end
end
--------------------------------------------------------------------------------
function actor_binder:on_use_item(obj)
	if obj:section() == "sleepingbag" then
		_G.sim:create("sleepingbag", vector(), 0, 0, 0)
		level.start_stop_menu(atmsleep.UISleep(), true)
	end
end
--------------------------------------------------------------------------------
function actor_binder:task_callback(_task, _state)
	local states = task -- global C++ enum
	local task_id = _task:get_id()
	local task = tm.task_info[task_id]
	if _state == states.completed then
		xr_logic.pick_section_from_condlist(actor, actor, task.on_complete)
		news_manager.send_task(actor, "complete", _task)
		tm:task_callback(task_id, true)
	elseif _state == states.fail then
		if task.last_check_task == "fail" then
			xr_logic.pick_section_from_condlist(actor, actor, task.on_fail) -- missing by default but referenced in tm_military.ltx
			news_manager.send_task(actor, "fail", _task)
		elseif task.last_check_task == "reversed" then
			xr_logic.pick_section_from_condlist(actor, actor, task.on_reversed)
			news_manager.send_task(actor, "reversed", _task)
		end
		tm:task_callback(task_id, false)
	else
		local state = task.is_task_update and "update" or "new"
		news_manager.send_task(actor, state, _task)
	end
end
--------------------------------------------------------------------------------
-- nv111103/nv130223: level-specific autosaves
-- Decane 18.08.2014: adapted for CS with minor tweaks
--        21.06.2015: unique autosaves for freeplay
local function manage_autosaves()
	local fs = getFS()
	local autosave = string.lower(user_name()).."_autosave"
	if not fs:exist("$game_saves$", autosave..".sav") then
		return
	end
	local level_name = level.name()
	if level_name ~= CSavedGameWrapper(autosave):level_name() then
		return
	end
	local level_prefix = string.sub(level_name, 1, 3)
	if level_name == "agroprom_underground" then
		level_prefix = "agru" -- agroprom_underground has same prefix as agroprom, so use "agru" instead of "agr" for it
	end
	if has_alife_info("stc_final_movie") then
		level_prefix = "fp_"..level_prefix -- prefix saves made in freeplay mode with "fp_"
	end
	local lvl_autosave = level_prefix.."_autosave"
	local lvl_autosave_start = lvl_autosave.."_start"
	local savedir = fs:update_path("$game_saves$", "")
	if fs:exist("$game_saves$", lvl_autosave_start..".sav")
	or fs:exist("$game_saves$", lvl_autosave..".sav") then
		fs:file_rename(savedir..autosave..".sav", savedir..lvl_autosave..".sav", true)
		get_console():execute("load_last_save "..lvl_autosave)
	else
		fs:file_rename(savedir..autosave..".sav", savedir..lvl_autosave_start..".sav", true)
		get_console():execute("load_last_save "..lvl_autosave_start)
	end
end
--------------------------------------------------------------------------------
-- Decane 07.10.2014: stash filler support function
local function give_level_stash_info()
	local actor_level = level.name()
	if actor_level == "marsh" and not has_alife_info("mar_stashes_filled") then
		actor:give_info_portion("mar_stashes_filled")
	elseif actor_level == "escape" and not has_alife_info("esc_stashes_filled") then
		actor:give_info_portion("esc_stashes_filled")
	elseif actor_level == "garbage" and not has_alife_info("gar_stashes_filled") then
		actor:give_info_portion("gar_stashes_filled")
	elseif actor_level == "darkvalley" and not has_alife_info("val_stashes_filled") then
		actor:give_info_portion("val_stashes_filled")
	elseif actor_level == "agroprom" and not has_alife_info("agr_stashes_filled") then
		actor:give_info_portion("agr_stashes_filled")
	elseif actor_level == "agroprom_underground" and not has_alife_info("agru_stashes_filled") then
		actor:give_info_portion("agru_stashes_filled")
	elseif actor_level == "yantar" and not has_alife_info("yan_stashes_filled") then
		actor:give_info_portion("yan_stashes_filled")
	elseif actor_level == "red_forest" and not has_alife_info("red_stashes_filled") then
		actor:give_info_portion("red_stashes_filled")
	elseif actor_level == "military" and not has_alife_info("mil_stashes_filled") then
		actor:give_info_portion("mil_stashes_filled")
	elseif actor_level == "limansk" and not has_alife_info("lim_stashes_filled") then
		actor:give_info_portion("lim_stashes_filled")
	elseif actor_level == "hospital" and not has_alife_info("kat_stashes_filled") then
		actor:give_info_portion("kat_stashes_filled")
	end
end
--------------------------------------------------------------------------------
function actor_binder:update(delta)

	object_binder_update(self, delta)

	xr_sound_update(0) -- actor ID is hard-coded to 0 in-engine

	if weapon_needs_hiding or actor:is_talking() then
		if not weapon_hidden then
			actor:hide_weapon()
			weapon_hidden = true
		end
	else
		if weapon_hidden then
			actor:restore_weapon()
			weapon_hidden = false
		end
	end

	dunin_ammo_on_update()

	local time = time_global()

	if next_update_time < time then

		next_update_time = time + 200

		weather_manager:update() -- moved from above, no need to run this every update

		if self.st.disable_input_time ~= nil then -- moved this block here - no need to run it every update
			if game.get_game_time():diffSec(self.st.disable_input_time) >= self.st.disable_input_idle then
				level.enable_input()
				self.st.disable_input_time = nil
			end
		end

		local hud = get_hud()
		local custom_static = hud:GetCustomStatic("cs_radiation_danger")

		if actor.radiation >= 0.7 then
			if custom_static == nil then
				custom_static = hud:AddCustomStatic("cs_radiation_danger", true)
				custom_static:wnd():SetTextST("st_radiation_danger")
			end
		else
			if custom_static ~= nil then
				hud:RemoveCustomStatic("cs_radiation_danger")
			end
		end

		if xr_surge_hide.start_surge then -- moved this block here - no need to run it every update

			if not xr_surge_hide.weather_surge then
				xr_surge_hide.weather_surge = true
				level.set_weather("default_cloudy", true)
			end

			local diff_sec = math.ceil(game.get_game_time():diffSec(xr_surge_hide.initialization_time) / level.get_time_factor())
			local time_before_lag_noosphere = 0
			local time_before_give_task = 0

			if level.name() == "marsh" then
				time_before_lag_noosphere = 12
				time_before_give_task = 15
			else
				time_before_lag_noosphere = 17
				time_before_give_task = 27
			end

			local hide_phase = xr_surge_hide.phase

			if diff_sec >= time_before_lag_noosphere and hide_phase == 1 then
				xr_surge_hide.activate_surge()
			elseif diff_sec >= time_before_give_task and hide_phase == 2 then
				xr_surge_hide.activate_surge(xr_surge_hide.time_before_surge)
			end
		end
	end

	if sr_psy_antenna.psy_antenna then
		sr_psy_antenna.psy_antenna:update(delta)
	end

	if not first_update_done then

		if not has_alife_info("global_dialogs") then
			actor:give_info_portion("global_dialogs")
		end

		if treasure_manager.enable_stash_filler == true then
			give_level_stash_info()
		end

		manage_autosaves()

		level_tasks.add_lchanger_location()

		for _, task in pairs (tm.task_info) do
			if task.type == "bring_item" and task.state ~= "finished" then
				task:on_load(actor)
			end
		end

		if last_level_name == nil then
			last_level_name = level.name()
		else
			local level_name = level.name()
			if level_name ~= last_level_name then
				last_level_name = level_name
				time = xr_surge_hide.surge_can_be_started(level_name)
				if time then
					xr_surge_hide.activate_surge(time)
				end
			end
		end

		first_update_done = true
	end

	if need_actor_model_update and not level.main_input_receiver() then
		update_actor_model()
		need_actor_model_update = false
	end

	dyn_music_update()

	if guiders.teleported_to_another_level then
		if not guiders.level_changed then
			guiders.action_teleport_to_point()
		end
	end
end
--------------------------------------------------------------------------------
function actor_binder:save(packet)

	set_save_marker(packet, "save", false, "actor_binder")

	object_binder.save(self, packet)

	packet:w_u8(level.get_game_difficulty())

	if self.st.disable_input_time == nil then
		packet:w_bool(false)
	else
		packet:w_bool(true)
		utils.w_CTime(packet, self.st.disable_input_time)
	end

	xr_logic.pstor_save_all(actor, packet)

	weather_manager:save(packet)

	release_body_manager.save(packet) --' Distemper 12.02.2008

	xr_surge_hide.save(packet)

	sr_psy_antenna.save(packet)

	local board = sim_board.get_sim_board()

	packet:w_bool(board.simulation_started)

	local n = 0
	for smart_id, squad_id in pairs (sim_combat.wait_for_combat) do
		local squad = board.squads[squad_id]
		if squad then
			local combat = board.smarts[squad.sim_combat_id].smrt.combat_manager
			if combat then
				local stage = combat:get_squad_stage(squad)
				if stage == "prepare" or stage == "wait" then
					n = n + 1
				else
					sim_combat.wait_for_combat[smart_id] = nil
				end
			else
				sim_combat.wait_for_combat[smart_id] = nil
			end
		else
			sim_combat.wait_for_combat[smart_id] = nil
		end
	end

	packet:w_u8(n)

	for smart_id, squad_id in pairs (sim_combat.wait_for_combat) do
		packet:w_u16(smart_id)
		packet:w_stringZ(squad_id)
	end

	xr_sound.actor_save(packet)

	packet:w_stringZ(tostring(last_level_name))

	xr_statistic.save(packet)

	guiders.save(packet)

	treasure_manager.save(packet)

	n = 0
	for npc_id in pairs (delayed_alife_release_objects) do
		n = n + 1
	end

	packet:w_u8(n)

	for npc_id in pairs (delayed_alife_release_objects) do
		packet:w_u16(npc_id)
	end

	n = 0
	for npc_id in pairs (db.script_ids) do
		n = n + 1
	end

	packet:w_u8(n)

	for npc_id, zone_name in pairs (db.script_ids) do
		packet:w_u16(npc_id)
		packet:w_stringZ(zone_name)
	end

	set_save_marker(packet, "save", true, "actor_binder")
end
--------------------------------------------------------------------------------
function actor_binder:load(reader)

	set_save_marker(reader, "load", false, "actor_binder")

	object_binder.load(self, reader)

	local game_difficulty = reader:r_u8()
	get_console():execute("g_game_difficulty "..game_difficulty_by_num[game_difficulty])

	local stored_input_time = reader:r_bool() -- reader:r_u8()
	if stored_input_time == true then
		self.st.disable_input_time = utils.r_CTime(reader)
	end

	xr_logic.pstor_load_all(actor, reader)

	weather_manager:load(reader)

	release_body_manager.load(reader) --' Distemper 12.02.2008

	xr_surge_hide.load(reader)

	sr_psy_antenna.load(reader)

	sim_board.get_sim_board().simulation_started = reader:r_bool()

	sim_combat.wait_for_combat = {}

	for i = 1, reader:r_u8() do
		local smart_id = reader:r_u16()
		local squad_id = reader:r_stringZ()
		sim_combat.wait_for_combat[smart_id] = squad_id
	end

	xr_sound.actor_load(reader)

	local loaded_level_name = reader:r_stringZ()
	if loaded_level_name ~= "nil" then
		last_level_name = loaded_level_name
	end

	xr_statistic.load(reader)

	guiders.load(reader)

	treasure_manager.load(reader)

	for i = 1, reader:r_u8() do
		delayed_alife_release_objects[reader:r_u16()] = true
	end

	for i = 1, reader:r_u8() do
		db.script_ids[reader:r_u16()] = reader:r_stringZ()
	end

	set_save_marker(reader, "load", true, "actor_binder")
end
--------------------------------------------------------------------------------
function hide_weapon()
	zones_needing_weapon_hide = zones_needing_weapon_hide + 1
	weapon_needs_hiding = true
end

function restore_weapon()
	zones_needing_weapon_hide = zones_needing_weapon_hide - 1
	weapon_needs_hiding = zones_needing_weapon_hide > 0
end