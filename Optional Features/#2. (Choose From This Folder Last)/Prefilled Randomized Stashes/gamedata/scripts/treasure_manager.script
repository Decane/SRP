--[[

The variable self.flag can take a value of:

0:	coordinates not given, treasure not spawned, treasure not emptied
1:	coordinates given,     treasure not spawned, treasure not emptied
2:	coordinates not given, treasure spawned,     treasure not emptied
3:	coordinates given,     treasure spawned,     treasure not emptied
4:	treasure emptied

]]

enable_stash_filler = true -- do not change this

local math_random = math.random
local trans = game.translate_string

local get_bool = utils.cfg_get_bool
local get_number = utils.cfg_get_number
local get_string = utils.cfg_get_string
local parse_spawns = utils.parse_spawns

local treasures = {}
local treasure_by_target = {}
local treasure_on_level = nil
local rank_table = {["novice"] = 0, ["stalker"] = 300, ["veteran"] = 600, ["master"] = 900}

class "CTreasure"

function CTreasure:__init(ini, section)

	self.section            = section
	local target            = get_string(ini, section, "target", nil, true, "")
	self.target             = target
	self.name               = get_string(ini, section, "name", nil, true, "")
	self.description        = get_string(ini, section, "description", nil, true, "")
	self.items              = parse_spawns(get_string(ini, section, "items", nil, true, ""))

	self.rank               = get_string(ini, section, "rank", nil, false, "", "novice")
	self.treasure_cost      = get_number(ini, section, "treasure_cost", nil, false, 0)
	self.say_item_name      = get_bool(ini, section, "say_item_name", nil, false, true)
	self.on_empty           = xr_logic.parse_condlist(nil, nil, nil, get_string(ini, section, "on_empty", nil, false, "", "false"))
	self.community          = parse_names_to_hash(get_string(ini, section, "community", nil, false, "", "stalker, bandit, dolg, freedom, csky, renegade"))

	local tbt = treasure_by_target[target]

	if tbt == nil then
		tbt = {}
		treasure_by_target[target] = tbt
	end

	tbt[#tbt + 1] = self

	self.condlist           = xr_logic.parse_condlist(nil, nil, nil, get_string(ini, section, "condlist", nil, false, "", "false"))
	self.flag               = 0
end

function CTreasure:give_location_only()

	local obj = _G.sim:object(self.target)
	local treasure_name = self.name

	if obj == nil then
		abort("[treasure_manager.give_location_only]: Treasure target '%s' for treasure '%s' does not exist.", self.target, treasure_name)
	end
--[[
	-- If the treasure name or description is not set in the XML file then abort.

	if treasure_name == trans(treasure_name) then
		abort("[treasure_manager.give_location_only]: Treasure name '%s' is not set in the XML file.", tostring(treasure_name))
	end

	if self.description == trans(self.description) then
		abort("[treasure_manager.give_location_only]: Treasure description '%s' is not set in the XML file.", tostring(self.description))
	end
]]
	-- Give the treasure news, info, and map spot.

	news_manager.send_treasure(treasure_name)

	local text = "%c[255,238,155,23]"..trans(treasure_name).."\\n".."%c[default]"..trans(self.description)
	level.map_add_object_spot_ser(obj.id, "treasure", text)

	-- Set the treasure coordinate status to "given".

	self.flag = self.flag + 1
end

function CTreasure:populate_stash(box_name)

	local sim = _G.sim
	local obj = sim:object(box_name or self.target)

	if obj == nil then
		abort("[treasure_manager.populate_stash]: Treasure target '%s' for treasure '%s' does not exist.", box_name or self.target, self.name)
	end
--[[
	-- If the treasure name or description is not set in the XML file then abort.

	local treasure_name = self.name

	if treasure_name == trans(treasure_name) then
		abort("[treasure_manager.populate_stash]: Treasure name '%s' is not set in the XML file.", tostring(treasure_name))
	end

	local treasure_descr = self.description

	if treasure_descr == trans(treasure_descr) then
		abort("[treasure_manager.populate_stash]: Treasure description '%s' is not set in the XML file.", tostring(treasure_descr))
	end

	-- Give the treasure info and map spot. (Debug code!)

	local text = "%c[255,238,155,23]"..trans(treasure_name).."\\n".."%c[default]"..trans(treasure_descr)
	level.map_add_object_spot_ser(obj.id, "treasure", text)
]]
	-- Spawn the treasure.

	local obj_id = obj.id
	local ammo_sections = ammo_section
	local vec = vector()

	for kk, vv in pairs (self.items) do
		local section = vv.section
		if ammo_sections[section] == true then
			se_respawn.create_ammo(section, vec, 0, 0, obj_id, vv.prob)
		else
			for i = 1, vv.prob do
				sim:create(section, vec, 0, 0, obj_id)
			end
		end
	end

	self.flag = self.flag + 2
end

function CTreasure:check_rank_and_community(npc)
	return npc:character_rank() > rank_table[self.rank] and self.community[npc:character_community()] == true
end

function use_box(box_name)

	-- If this is not a treasure target box then do nothing.

	if treasure_by_target[box_name] == nil then
		return
	end

	-- Populate table of treasures on current map if not done already.

	if treasure_on_level == nil then
		treasure_on_level = {}
		local level_name = level.name()
		local sim = _G.sim
		local GG = game_graph()
		local c = 0
		for k, treasure in pairs (treasures) do
			local target = treasure.target
			local target_obj = sim:object(target)
			if target_obj then
				local treasure_level = sim:level_name(GG:vertex(target_obj.m_game_vertex_id):level_id())
				if treasure_level == level_name then
					c = c + 1
					treasure_on_level[c] = treasure
				end
			end
		end
	end

	-- Only populate a box with stashes meant for the same level.

	local c = 0
	local available_treasures = {}

	for i, treasure in pairs (treasure_on_level) do
		if treasure.flag <= 1 then
			local target = treasure.target
			if target ~= "gar_treasure_quest_reward_in_anomaly" and target ~= "gar_treasure_quest_old_pda" then
				c = c + 1
				available_treasures[c] = treasure
			end
		end
	end

	local num_avail = #available_treasures

	if num_avail == 0 then
		abort("[treasure_manager.use_box]: Not enough treasures to populate box "..box_name)
		return
	end

	-- Populate the box with one of the available treasures chosen at random.

	available_treasures[math_random(1, num_avail)]:populate_stash(box_name)
--[[
	-- Debug code (requires passing in 'box'):

	local t = available_treasures[math_random(1, num_avail)]

	t:populate_stash(box_name)

	local info = treasure_by_target[box_name][1]
	local name = trans(info.name)
	local text = "%c[255,255,0,23]"..name.."\\n".."%c[default]"..trans(info.description)

	level.map_add_object_spot_ser(box:id(), "treasure", text)

	dbglog("Populated box "..box_name.." ("..name..") with treasure "..t.section.." ("..trans(t.name)..")")
]]
end

local function treasure_empty(box)

	-- If this is not a treasure box then do nothing.

	local box_name = box:name()
	local treasures = treasure_by_target[box_name]

	if treasures == nil then
		return
	end

	-- Handle the two exceptions in the Garbage.

	if (box_name == "gar_treasure_quest_reward_in_anomaly" and not has_alife_info("gar_treasure_quest_reward_in_anomaly") and not has_alife_info("gar_quest_talk_with_captive_leader_done"))
	or (box_name == "gar_treasure_quest_old_pda" and not has_alife_info("gar_treasure_quest_old_pda")) then
		return
	end

	-- For all treasures suitable for this box, if the treasure hasn't already been emptied then:

	local act, num = db.actor, 0

	for k, v in pairs (treasures) do

		if v.flag ~= 4 then

			-- Execute on_empty effect(s) if any.

			xr_logic.pick_section_from_condlist(act, box, v.on_empty)

			-- Set the treasure status to "emptied".

			v.flag = 4

			-- Remove its map spot.

			local id = box:id()
			if level.map_has_object_spot(id, "treasure") ~= 0 then
				level.map_remove_object_spot(id, "treasure")
			end

			-- For just the first suitable treasure:

			num = num + 1

			if num == 1 then

				-- Increase the 'stashes found' counter by 1.

				xr_statistic.inc_founded_secrets_counter()

				-- Give the actor a 'stash emptied' news update.

				act:give_game_news(trans("st_stash_emptied"), trans(level.name())..": "..trans(v.name), "ui_iconsTotal_found_thing", 0, 3000)

--				dbglog("Emptied box with name "..box_name.." and ID "..id..".")
			end
		end
	end
end

function take_item_from_box(box)
	if box:is_inv_box_empty() == true then
		treasure_empty(box)
	end
end

function use(npc)

	if math_random(100) > 20 then
		return
	end

	local act = db.actor
	local c = 0
	local available_treasures = {}

	for k, v in pairs (treasures) do
		if xr_logic.pick_section_from_condlist(act, npc, v.condlist) == "true" then
			if v:check_rank_and_community(npc) == true then
				local flag = v.flag
				if flag == 0 or flag == 2 then -- makes available even coordinates for treasures that haven't (yet) spawned
					if v.treasure_cost == 0 then
						c = c + 1
						available_treasures[c] = v
					end
				end
			end
		end
	end

	local num_avail = #available_treasures

	if num_avail == 0 then
		return
	end

	available_treasures[math_random(1, num_avail)]:give_location_only()
end

function load_treasures()

	local treasure_ini = ini_file("misc\\treasure_manager.ltx")

	if not treasure_ini:section_exist("list") then
		abort("[treasure_manager.load_treasures]: There is no 'list' section in treasure_manager.ltx.")
	end

	for i = 0, treasure_ini:line_count("list") - 1 do
		local result, section = treasure_ini:r_line("list", i, "", "")
		treasures[section] = CTreasure(treasure_ini, section)
	end
end

function save(thread)

	set_save_marker(thread, "save", false, "treasure_manager")

	for k, v in pairs (treasures) do
		thread:w_u8(v.flag)
--		dbglog("Saved self.flag = "..tostring(v.flag).." for treasure with name "..tostring(v.name)..".")
	end

	set_save_marker(thread, "save", true, "treasure_manager")
end

function load(thread)

	set_save_marker(thread, "load", false, "treasure_manager")

	for k, v in pairs (treasures) do
		v.flag = thread:r_u8()
--		dbglog("Loaded self.flag = "..tostring(v.flag).." for treasure with name "..tostring(v.name)..".")
	end

	set_save_marker(thread, "load", true, "treasure_manager")
end

function give_treasure(treasure_id)
	local t = treasures[treasure_id]
	if t ~= nil then
		if t.flag <= 1 then
			t:populate_stash()
			t:give_location_only()
		end
	else
		abort("[treasure_manager.give_treasure]: There is no treasure with ID '%s'.", tostring(treasure_id))
	end
end

function give_location_only(treasure_id)
	local t = treasures[treasure_id]
	if t ~= nil then
		local flag = t.flag
		if flag == 0 or flag == 2 then
			t:give_location_only()
		end
	else
		abort("[treasure_manager.give_location_only]: There is no treasure with ID '%s'.", tostring(treasure_id))
	end
end

--------------------------------------------------------------------------------

local dt = nil

local function select_dialog_treasures(npc)

	local act = db.actor
	local c = 0
	local available_treasures = {}

	for k, v in pairs (treasures) do
		if xr_logic.pick_section_from_condlist(act, npc, v.condlist) == "true" then
			if v:check_rank_and_community(npc) then
				local flag = v.flag
				if flag == 0 or flag == 2 then -- makes available even coordinates for treasures that haven't (yet) spawned
					if v.treasure_cost > 0 then
						c = c + 1
						available_treasures[c] = v
					end
				end
			end
		end
	end

	local num_avail = #available_treasures

	if num_avail == 0 then
		return nil
	end

	dt = available_treasures[math_random(1, num_avail)]
	return dt
end

function is_dialog_treasure(npc)
	return select_dialog_treasures(npc) ~= nil
end

function is_not_dialog_treasure(npc)
	return select_dialog_treasures(npc) == nil
end

function give_treasure_from_dialog(npc)
	dialogs.relocate_money(npc, dt.treasure_cost, "out")
	dt:give_location_only()
end

function get_treasure_cost()
	return tostring(dt.treasure_cost)
end

function have_money()
	return dt.treasure_cost <= db.actor:money()
end

function have_no_money()
	return dt.treasure_cost > db.actor:money()
end

function get_treasure_desc()
	return trans(dt.description)
end

function is_item_name()
--	return dt.say_item_name
	return false
end

function is_not_item_name()
--	return not dt.say_item_name
	return true
end

function get_item_name()
	local dt_items = dt.items
	local ini = system_ini()
	local str = trans(ini:r_string(dt_items[1].section, "inv_name"))
	for i = 2, #dt_items do
		str = str..", "..trans(ini:r_string(dt_items[i].section, "inv_name"))
	end
	return str.."."
end